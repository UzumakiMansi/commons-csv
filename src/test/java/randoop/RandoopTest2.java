package randoop;

import junit.framework.*;

public class RandoopTest2 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test1");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var7 = var3.withRecordSeparator("Delimiter=<4> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var13 = var9.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var15 = var13.withAllowMissingColumnNames(false);
    java.lang.String[] var16 = var13.getHeaderComments();
    java.lang.String var17 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var19 = var13.withQuote(' ');
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var23 = var21.withCommentMarker('#');
    java.lang.String[] var24 = var23.getHeaderComments();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var28 = var26.withAllowMissingColumnNames(true);
    java.lang.Object[] var30 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var31 = var28.withHeaderComments(var30);
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord(false);
    java.lang.Character var34 = var33.getCommentMarker();
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(true);
    java.lang.Object[] var40 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var41 = var38.withHeaderComments(var40);
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var44 = var41.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var46 = var44.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var48 = var46.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var49 = var46.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var53 = var51.withAllowMissingColumnNames(true);
    java.lang.Object[] var55 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var56 = var53.withHeaderComments(var55);
    org.apache.commons.csv.CSVFormat var58 = var56.withSkipHeaderRecord(false);
    java.lang.Character var59 = var56.getCommentMarker();
    java.lang.String[] var61 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var62 = var56.withHeader(var61);
    org.apache.commons.csv.CSVFormat var64 = var56.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var66 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var68 = var66.withAllowMissingColumnNames(true);
    java.lang.Object[] var70 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var71 = var68.withHeaderComments(var70);
    org.apache.commons.csv.CSVFormat var73 = var71.withSkipHeaderRecord(false);
    java.lang.Character var74 = var71.getCommentMarker();
    java.lang.String[] var76 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var77 = var71.withHeader(var76);
    org.apache.commons.csv.CSVFormat var78 = var64.withHeader(var76);
    org.apache.commons.csv.CSVFormat var79 = var49.withHeader(var76);
    org.apache.commons.csv.CSVFormat var80 = var33.withHeaderComments((java.lang.Object[])var76);
    org.apache.commons.csv.CSVFormat var81 = var23.withHeaderComments((java.lang.Object[])var76);
    org.apache.commons.csv.CSVFormat var82 = var13.withHeaderComments((java.lang.Object[])var76);
    boolean var83 = var7.equals((java.lang.Object)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test2");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    boolean var9 = var8.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var8.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var12 = var8.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var8.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test3");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var19 = var17.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var17.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var23 = var21.withNullString("Delimiter=<4> CommentStart=<#> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var25 = var21.withQuote('a');
    java.lang.Character var26 = var25.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var28 = var25.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 'a'+ "'", var26.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test4");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    boolean var10 = var6.isQuoteCharacterSet();
    java.lang.Character var11 = var6.getEscapeCharacter();
    boolean var12 = var6.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var16 = var6.withCommentMarker((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test5");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.String[] var4 = var1.getHeader();
    boolean var5 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test6");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withQuote(' ');
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var21 = var17.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var23 = var17.withEscape('a');
    org.apache.commons.csv.CSVFormat var25 = var17.withNullString("");
    boolean var26 = var12.equals((java.lang.Object)var25);
    org.apache.commons.csv.CSVFormat var28 = var25.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var30 = var25.withCommentMarker('#');
    boolean var31 = var25.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test7");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    java.lang.String var6 = var1.getNullString();
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var9 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.String[] var14 = var11.getHeader();
    org.apache.commons.csv.CSVFormat var16 = var11.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var18 = var11.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var22 = var20.withAllowMissingColumnNames(true);
    java.lang.Object[] var24 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var25 = var22.withHeaderComments(var24);
    org.apache.commons.csv.CSVFormat var27 = var25.withSkipHeaderRecord(false);
    java.lang.Character var28 = var25.getCommentMarker();
    java.lang.String[] var30 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var31 = var25.withHeader(var30);
    org.apache.commons.csv.CSVFormat var33 = var25.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var34 = var33.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var36 = var34.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var40 = var38.withAllowMissingColumnNames(true);
    java.lang.Object[] var42 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var43 = var40.withHeaderComments(var42);
    org.apache.commons.csv.CSVFormat var45 = var43.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var46 = var43.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var48 = var46.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var50 = var46.withQuote('a');
    org.apache.commons.csv.CSVFormat var52 = var46.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var54 = var52.withEscape(' ');
    org.apache.commons.csv.CSVFormat var56 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var58 = var56.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var60 = var56.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var62 = var60.withAllowMissingColumnNames(false);
    java.lang.String var63 = var60.toString();
    org.apache.commons.csv.CSVFormat var65 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var66 = var65.isNullStringSet();
    org.apache.commons.csv.CSVFormat var68 = var65.withCommentMarker((java.lang.Character)'a');
    java.lang.String var69 = var68.getNullString();
    org.apache.commons.csv.CSVFormat var71 = var68.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var73 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var74 = var73.withSkipHeaderRecord();
    java.lang.String[] var76 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var77 = var73.withHeader(var76);
    java.lang.String var78 = var68.format((java.lang.Object[])var76);
    org.apache.commons.csv.CSVFormat var79 = var60.withHeaderComments((java.lang.Object[])var76);
    org.apache.commons.csv.CSVFormat var80 = var52.withHeaderComments((java.lang.Object[])var76);
    org.apache.commons.csv.CSVFormat var81 = var36.withHeaderComments((java.lang.Object[])var76);
    java.lang.String var82 = var11.format((java.lang.Object[])var76);
    org.apache.commons.csv.CSVFormat var83 = var1.withHeaderComments((java.lang.Object[])var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false"+ "'", var63.equals("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + ""+ "'", var78.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + ""+ "'", var82.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test8");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var9 = var1.withNullString("");
    java.lang.String var10 = var1.toString();
    java.lang.Character var11 = var1.getEscapeCharacter();
    java.lang.String var12 = var1.getRecordSeparator();
    char var13 = var1.getDelimiter();
    org.apache.commons.csv.CSVFormat var14 = var1.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false"+ "'", var10.equals("Delimiter=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test9");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    java.lang.String var5 = var4.getNullString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var11 = var4.withNullString("Delimiter=<4> EmptyLines:ignored SkipHeaderRecord:true HeaderComments:[0]");
    org.apache.commons.csv.CSVFormat var12 = var11.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test10");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    boolean var14 = var7.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var7.withIgnoreEmptyLines();
    boolean var16 = var15.getAllowMissingColumnNames();
    java.lang.Character var17 = var15.getEscapeCharacter();
    boolean var18 = var15.isCommentMarkerSet();
    org.apache.commons.csv.CSVParser var19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> QuoteChar=<a> SkipHeaderRecord:false HeaderComments:[0]", var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test11");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    boolean var14 = var7.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var7.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var17 = var7.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var19 = var7.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var23 = var21.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var25 = var21.withRecordSeparator("hi!");
    boolean var26 = var25.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var28 = var25.withQuote(' ');
    boolean var29 = var28.isQuoteCharacterSet();
    java.lang.Character var30 = var28.getCommentMarker();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var34 = var32.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var36 = var32.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(false);
    java.lang.String[] var39 = var36.getHeaderComments();
    java.lang.String var40 = var36.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var42 = var36.withQuote(' ');
    boolean var43 = var42.getSkipHeaderRecord();
    java.lang.String[] var44 = var42.getHeaderComments();
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var48 = var46.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var50 = var48.withEscape(' ');
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var54 = var52.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var56 = var52.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var58 = var56.withQuote('a');
    java.lang.Object[] var59 = new java.lang.Object[] { var56};
    org.apache.commons.csv.CSVFormat var60 = var50.withHeaderComments(var59);
    java.lang.String var61 = var42.format(var59);
    org.apache.commons.csv.CSVFormat var62 = var28.withHeaderComments(var59);
    org.apache.commons.csv.CSVFormat var63 = var19.withHeaderComments(var59);
    org.apache.commons.csv.CSVParser var64 = org.apache.commons.csv.CSVParser.parse("a", var63);
    long var65 = var64.getRecordNumber();
    boolean var66 = var64.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Delimiter=<4>  SkipHeaderRecord:false hi!"+ "'", var61.equals("Delimiter=<4>  SkipHeaderRecord:false hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test12");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var4 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var6 = var4.withCommentMarker('#');
    boolean var7 = var4.isQuoteCharacterSet();
    java.lang.Character var8 = var4.getQuoteCharacter();
    boolean var9 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var4.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var13 = var4.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var17 = var15.withEscape(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test13");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    char var5 = var4.getDelimiter();
    org.apache.commons.csv.CSVFormat var7 = var4.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    java.lang.String var9 = var7.getNullString();
    java.lang.Character var10 = var7.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + '#'+ "'", var10.equals('#'));

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test14");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    boolean var8 = var7.isCommentMarkerSet();
    java.lang.Character var9 = var7.getEscapeCharacter();
    java.lang.String var10 = var7.getNullString();
    org.apache.commons.csv.CSVFormat var12 = var7.withEscape('#');
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator("Delimiter=<#> Escape=<a> EmptyLines:ignored SkipHeaderRecord:false");
    org.apache.commons.csv.CSVParser var15 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> CommentStart=<#> RecordSeparator=<hi!> SkipHeaderRecord:false", var14);
    long var16 = var15.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0L);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test15");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var19 = var17.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var17.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var23 = var21.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var24 = var21.withIgnoreEmptyLines();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var26 = var24.withQuote('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test16");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var3.withEscape(' ');
    boolean var6 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var3.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    java.lang.Object[] var14 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments(var14);
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord(false);
    java.lang.Character var18 = var15.getCommentMarker();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var15.withHeader(var20);
    boolean var22 = var15.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var23 = var15.withIgnoreEmptyLines();
    boolean var24 = var23.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var27 = var26.withSkipHeaderRecord();
    java.lang.String[] var29 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var30 = var26.withHeader(var29);
    org.apache.commons.csv.CSVFormat var31 = var23.withHeader(var29);
    org.apache.commons.csv.CSVFormat var32 = var3.withHeader(var29);
    org.apache.commons.csv.QuoteMode var33 = var3.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test17");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var17 = var13.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var18 = var13.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test18");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    boolean var14 = var7.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var16 = var7.withEscape((java.lang.Character)'a');
    java.lang.Object[] var18 = new java.lang.Object[] { (short)100};
    org.apache.commons.csv.CSVFormat var19 = var16.withHeaderComments(var18);
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var24 = var22.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var26 = var22.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var28 = var22.withEscape('a');
    org.apache.commons.csv.CSVFormat var30 = var28.withDelimiter('#');
    org.apache.commons.csv.CSVParser var31 = org.apache.commons.csv.CSVParser.parse("hi!", var30);
    org.apache.commons.csv.CSVFormat var32 = var30.withIgnoreEmptyLines();
    boolean var33 = var19.equals((java.lang.Object)var30);
    org.apache.commons.csv.CSVParser var34 = org.apache.commons.csv.CSVParser.parse("hi!", var30);
    long var35 = var34.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0L);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test19");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    boolean var6 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var7 = var1.withAllowMissingColumnNames();
    java.lang.Character var8 = var7.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreSurroundingSpaces();
    boolean var10 = var7.isEscapeCharacterSet();
    boolean var11 = var7.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test20");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.String[] var4 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    java.lang.Object[] var12 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var13 = var10.withHeaderComments(var12);
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var16 = var13.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var18 = var16.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var20 = var18.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var22 = var20.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var24.withAllowMissingColumnNames(true);
    java.lang.Object[] var28 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var29 = var26.withHeaderComments(var28);
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var35 = var33.withAllowMissingColumnNames(true);
    java.lang.Object[] var37 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var38 = var35.withHeaderComments(var37);
    org.apache.commons.csv.CSVFormat var40 = var38.withSkipHeaderRecord(false);
    java.lang.Character var41 = var38.getCommentMarker();
    java.lang.String[] var43 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var44 = var38.withHeader(var43);
    org.apache.commons.csv.CSVFormat var46 = var38.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var48 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var50 = var48.withAllowMissingColumnNames(true);
    java.lang.Object[] var52 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var53 = var50.withHeaderComments(var52);
    org.apache.commons.csv.CSVFormat var55 = var53.withSkipHeaderRecord(false);
    java.lang.Character var56 = var53.getCommentMarker();
    java.lang.String[] var58 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var59 = var53.withHeader(var58);
    org.apache.commons.csv.CSVFormat var60 = var46.withHeader(var58);
    java.lang.String var61 = var29.format((java.lang.Object[])var58);
    org.apache.commons.csv.CSVFormat var62 = var20.withHeaderComments((java.lang.Object[])var58);
    org.apache.commons.csv.CSVFormat var63 = var6.withHeaderComments((java.lang.Object[])var58);
    boolean var64 = var6.getSkipHeaderRecord();
    boolean var65 = var6.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + ""+ "'", var61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test21");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(true);
    java.lang.Character var10 = var9.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var12 = var9.withDelimiter(' ');
    boolean var13 = var12.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test22");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.String[] var5 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var7 = var2.withCommentMarker('a');
    java.lang.Character var8 = var2.getCommentMarker();
    org.apache.commons.csv.CSVFormat var9 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]", var2);
    java.lang.String[] var11 = var2.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test23");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var4.withRecordSeparator('a');
    java.lang.Character var7 = var4.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    java.lang.Object[] var13 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var14 = var11.withHeaderComments(var13);
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord(false);
    java.lang.Character var17 = var14.getCommentMarker();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var14.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var4.withHeader(var19);
    org.apache.commons.csv.CSVFormat var22 = var21.withIgnoreSurroundingSpaces();
    java.lang.Character var23 = var22.getCommentMarker();
    org.apache.commons.csv.CSVFormat var25 = var22.withEscape('#');
    org.apache.commons.csv.CSVFormat var27 = var25.withRecordSeparator("Delimiter=<4> Escape=<a> SkipHeaderRecord:false HeaderComments:[0]");
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var32 = var30.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var33 = org.apache.commons.csv.CSVParser.parse("", var32);
    boolean var34 = var27.equals((java.lang.Object)"");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + 'a'+ "'", var23.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test24");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var6 = var4.withRecordSeparator('a');
    java.lang.String var7 = var4.getNullString();
    boolean var8 = var4.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var10 = var4.withRecordSeparator("");
    java.lang.Character var11 = var10.getEscapeCharacter();
    java.lang.String var12 = var10.toString();
    org.apache.commons.csv.CSVFormat var13 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var15 = var13.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVParser var16 = org.apache.commons.csv.CSVParser.parse("a 0", var15);
    java.lang.String[] var17 = var15.getHeader();
    boolean var18 = var15.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Delimiter=<4> CommentStart=<#> RecordSeparator=<> SkipHeaderRecord:false"+ "'", var12.equals("Delimiter=<4> CommentStart=<#> RecordSeparator=<> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test25");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var14 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var29 = var21.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    java.lang.Object[] var35 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var36 = var33.withHeaderComments(var35);
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord(false);
    java.lang.Character var39 = var36.getCommentMarker();
    java.lang.String[] var41 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var42 = var36.withHeader(var41);
    org.apache.commons.csv.CSVFormat var43 = var29.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = var14.withHeader(var41);
    org.apache.commons.csv.CSVFormat var46 = var14.withIgnoreHeaderCase(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var48 = var46.withQuote('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test26");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var13.withHeaderComments((java.lang.Object[])var26);
    org.apache.commons.csv.CSVParser var29 = org.apache.commons.csv.CSVParser.parse("hi!", var13);
    java.lang.Character var30 = var13.getCommentMarker();
    org.apache.commons.csv.CSVFormat var32 = var13.withNullString("Delimiter=<4> QuoteChar=<a> CommentStart=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var36 = var34.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var38 = var34.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var40 = var38.withAllowMissingColumnNames(false);
    java.lang.String var41 = var38.toString();
    org.apache.commons.csv.CSVFormat var43 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var44 = var43.isNullStringSet();
    org.apache.commons.csv.CSVFormat var46 = var43.withCommentMarker((java.lang.Character)'a');
    java.lang.String var47 = var46.getNullString();
    org.apache.commons.csv.CSVFormat var49 = var46.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var52 = var51.withSkipHeaderRecord();
    java.lang.String[] var54 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var55 = var51.withHeader(var54);
    java.lang.String var56 = var46.format((java.lang.Object[])var54);
    org.apache.commons.csv.CSVFormat var57 = var38.withHeaderComments((java.lang.Object[])var54);
    org.apache.commons.csv.CSVFormat var58 = var13.withHeaderComments((java.lang.Object[])var54);
    char var59 = var58.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false"+ "'", var41.equals("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + ""+ "'", var56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == '4');

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test27");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines(true);
    java.lang.String[] var16 = var15.getHeader();
    org.apache.commons.csv.CSVFormat var18 = var15.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var20 = var18.withNullString("Delimiter=<4> SkipHeaderRecord:true HeaderComments:[0]");
    org.apache.commons.csv.CSVFormat var21 = var20.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test28");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var6.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var17 = var6.withQuote('a');
    java.lang.String[] var18 = var6.getHeaderComments();
    java.lang.Character var19 = var6.getQuoteCharacter();
    java.lang.String var20 = var6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]"+ "'", var20.equals("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]"));

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test29");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var3.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator("Delimiter=<4>  SkipHeaderRecord:false hi!");
    java.lang.Character var11 = var8.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test30");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    java.lang.String var7 = var6.getNullString();
    java.lang.String[] var8 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    java.lang.Object[] var14 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments(var14);
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord(false);
    java.lang.Character var18 = var15.getCommentMarker();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var15.withHeader(var20);
    java.lang.String var22 = var21.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var24.withAllowMissingColumnNames(true);
    java.lang.Object[] var28 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var29 = var26.withHeaderComments(var28);
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord(false);
    java.lang.Character var32 = var29.getCommentMarker();
    java.lang.String[] var34 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var35 = var29.withHeader(var34);
    org.apache.commons.csv.CSVFormat var36 = var21.withHeaderComments((java.lang.Object[])var34);
    boolean var37 = var36.isCommentMarkerSet();
    boolean var38 = var36.isCommentMarkerSet();
    java.lang.String[] var39 = var36.getHeader();
    java.lang.String var40 = var6.format((java.lang.Object[])var39);
    java.lang.Character var41 = var6.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test31");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var8 = var2.withEscape('a');
    org.apache.commons.csv.CSVFormat var10 = var8.withDelimiter('#');
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("hi!", var10);
    org.apache.commons.csv.CSVFormat var12 = var10.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = var10.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var15 = var10.withSkipHeaderRecord(true);
    boolean var16 = var10.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var18 = var10.withAllowMissingColumnNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test32");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withQuote(' ');
    org.apache.commons.csv.CSVFormat var17 = var15.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var19 = var15.withEscape('a');
    org.apache.commons.csv.CSVFormat var20 = var19.withIgnoreSurroundingSpaces();
    boolean var21 = var19.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test33");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    boolean var10 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var12 = var6.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    boolean var16 = var15.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test34");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var9 = var7.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var7.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var16 = var14.withAllowMissingColumnNames(true);
    java.lang.Object[] var18 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var19 = var16.withHeaderComments(var18);
    org.apache.commons.csv.CSVFormat var21 = var19.withSkipHeaderRecord(false);
    java.lang.Character var22 = var19.getCommentMarker();
    java.lang.String[] var24 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var25 = var19.withHeader(var24);
    org.apache.commons.csv.CSVFormat var27 = var19.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var28 = var27.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var30 = var28.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var34 = var32.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var36 = var34.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(true);
    boolean var39 = var36.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var43 = var41.withAllowMissingColumnNames(true);
    java.lang.Object[] var45 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var46 = var43.withHeaderComments(var45);
    org.apache.commons.csv.CSVFormat var48 = var46.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var49 = var46.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var51 = var49.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var53 = var51.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var55 = var53.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var59 = var57.withAllowMissingColumnNames(true);
    java.lang.Object[] var61 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var62 = var59.withHeaderComments(var61);
    org.apache.commons.csv.CSVFormat var64 = var62.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var66 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var68 = var66.withAllowMissingColumnNames(true);
    java.lang.Object[] var70 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var71 = var68.withHeaderComments(var70);
    org.apache.commons.csv.CSVFormat var73 = var71.withSkipHeaderRecord(false);
    java.lang.Character var74 = var71.getCommentMarker();
    java.lang.String[] var76 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var77 = var71.withHeader(var76);
    org.apache.commons.csv.CSVFormat var79 = var71.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var81 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var83 = var81.withAllowMissingColumnNames(true);
    java.lang.Object[] var85 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var86 = var83.withHeaderComments(var85);
    org.apache.commons.csv.CSVFormat var88 = var86.withSkipHeaderRecord(false);
    java.lang.Character var89 = var86.getCommentMarker();
    java.lang.String[] var91 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var92 = var86.withHeader(var91);
    org.apache.commons.csv.CSVFormat var93 = var79.withHeader(var91);
    java.lang.String var94 = var62.format((java.lang.Object[])var91);
    org.apache.commons.csv.CSVFormat var95 = var53.withHeaderComments((java.lang.Object[])var91);
    java.lang.String var96 = var36.format((java.lang.Object[])var91);
    org.apache.commons.csv.CSVFormat var97 = var30.withHeader(var91);
    org.apache.commons.csv.CSVFormat var98 = var12.withHeaderComments((java.lang.Object[])var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + ""+ "'", var94.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "aa"+ "'", var96.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test35");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var9.withQuote('a');
    org.apache.commons.csv.CSVFormat var15 = var9.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var21 = var19.withEscape(' ');
    org.apache.commons.csv.CSVFormat var23 = var19.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var27 = var25.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var28 = var25.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var30 = var28.withEscape('#');
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var34 = var32.withAllowMissingColumnNames(true);
    java.lang.Object[] var36 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var37 = var34.withHeaderComments(var36);
    org.apache.commons.csv.CSVFormat var39 = var37.withSkipHeaderRecord(false);
    java.lang.Character var40 = var37.getCommentMarker();
    java.lang.String[] var42 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var43 = var37.withHeader(var42);
    org.apache.commons.csv.CSVFormat var45 = var37.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var47 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var49 = var47.withAllowMissingColumnNames(true);
    java.lang.Object[] var51 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var52 = var49.withHeaderComments(var51);
    org.apache.commons.csv.CSVFormat var54 = var52.withSkipHeaderRecord(false);
    java.lang.Character var55 = var52.getCommentMarker();
    java.lang.String[] var57 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var58 = var52.withHeader(var57);
    org.apache.commons.csv.CSVFormat var59 = var45.withHeader(var57);
    java.lang.String var60 = var28.format((java.lang.Object[])var57);
    org.apache.commons.csv.CSVFormat var61 = var19.withHeader(var57);
    org.apache.commons.csv.CSVFormat var62 = var15.withHeader(var57);
    java.lang.String var63 = var15.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var65 = var15.withRecordSeparator('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ""+ "'", var60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test36");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    char var5 = var4.getDelimiter();
    org.apache.commons.csv.CSVFormat var7 = var4.withQuote((java.lang.Character)'#');
    java.lang.String var8 = var7.toString();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.Object[] var15 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var16 = var13.withHeaderComments(var15);
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var21 = var19.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var23 = var21.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var25 = var23.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(true);
    java.lang.Object[] var31 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var32 = var29.withHeaderComments(var31);
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(true);
    java.lang.Object[] var40 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var41 = var38.withHeaderComments(var40);
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord(false);
    java.lang.Character var44 = var41.getCommentMarker();
    java.lang.String[] var46 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var47 = var41.withHeader(var46);
    org.apache.commons.csv.CSVFormat var49 = var41.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var53 = var51.withAllowMissingColumnNames(true);
    java.lang.Object[] var55 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var56 = var53.withHeaderComments(var55);
    org.apache.commons.csv.CSVFormat var58 = var56.withSkipHeaderRecord(false);
    java.lang.Character var59 = var56.getCommentMarker();
    java.lang.String[] var61 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var62 = var56.withHeader(var61);
    org.apache.commons.csv.CSVFormat var63 = var49.withHeader(var61);
    java.lang.String var64 = var32.format((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var65 = var23.withHeaderComments((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var66 = var9.withHeaderComments((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var68 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var70 = var68.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var71 = var68.withAllowMissingColumnNames();
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    org.apache.commons.csv.CSVFormat var73 = var66.withHeaderComments(var72);
    java.lang.Character var74 = var66.getCommentMarker();
    boolean var75 = var66.isNullStringSet();
    boolean var76 = var66.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Delimiter=<4> QuoteChar=<#> CommentStart=<a> SkipHeaderRecord:false"+ "'", var8.equals("Delimiter=<4> QuoteChar=<#> CommentStart=<a> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + 'a'+ "'", var74.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test37");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    org.apache.commons.csv.CSVFormat var15 = var7.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withAllowMissingColumnNames(true);
    java.lang.Object[] var21 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var22 = var19.withHeaderComments(var21);
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord(false);
    java.lang.Character var25 = var22.getCommentMarker();
    java.lang.String[] var27 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var28 = var22.withHeader(var27);
    org.apache.commons.csv.CSVFormat var29 = var15.withHeader(var27);
    boolean var30 = var29.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVParser var31 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false", var29);
    java.util.Map var32 = var31.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test38");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var14.withQuote('#');
    boolean var18 = var17.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test39");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote('a');
    org.apache.commons.csv.CSVFormat var9 = var7.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var11 = var7.withCommentMarker((java.lang.Character)'#');
    boolean var12 = var11.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var16 = var14.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var18 = var14.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var20 = var14.withEscape('a');
    org.apache.commons.csv.CSVFormat var22 = var14.withNullString("");
    org.apache.commons.csv.CSVFormat var24 = var14.withNullString("hi!");
    org.apache.commons.csv.CSVFormat var26 = var24.withIgnoreEmptyLines(true);
    java.lang.String var27 = var26.getNullString();
    org.apache.commons.csv.CSVFormat var29 = var26.withIgnoreSurroundingSpaces(false);
    boolean var30 = var26.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var32 = var26.withNullString("Delimiter=<4> NullString=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var34 = var32.withQuote('#');
    org.apache.commons.csv.CSVFormat var36 = var34.withQuote((java.lang.Character)'a');
    boolean var37 = var11.equals((java.lang.Object)var34);
    boolean var38 = var34.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test40");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    var5.close();
    long var8 = var5.getRecordNumber();
    java.util.Map var9 = var5.getHeaderMap();
    long var10 = var5.getRecordNumber();
    long var11 = var5.getRecordNumber();
    var5.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test41");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var9.withQuote('a');
    org.apache.commons.csv.CSVFormat var15 = var9.withAllowMissingColumnNames(false);
    boolean var16 = var9.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var18 = var9.withCommentMarker((java.lang.Character)' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test42");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    java.lang.String var6 = var1.getNullString();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    java.lang.String[] var11 = var8.getHeader();
    org.apache.commons.csv.CSVFormat var13 = var8.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var19 = var17.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames(true);
    boolean var22 = var19.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var24.withAllowMissingColumnNames(true);
    java.lang.Object[] var28 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var29 = var26.withHeaderComments(var28);
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var32 = var29.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var34 = var32.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var36 = var34.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var38 = var36.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var42 = var40.withAllowMissingColumnNames(true);
    java.lang.Object[] var44 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var45 = var42.withHeaderComments(var44);
    org.apache.commons.csv.CSVFormat var47 = var45.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var51 = var49.withAllowMissingColumnNames(true);
    java.lang.Object[] var53 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var54 = var51.withHeaderComments(var53);
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord(false);
    java.lang.Character var57 = var54.getCommentMarker();
    java.lang.String[] var59 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var60 = var54.withHeader(var59);
    org.apache.commons.csv.CSVFormat var62 = var54.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var64 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var66 = var64.withAllowMissingColumnNames(true);
    java.lang.Object[] var68 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var69 = var66.withHeaderComments(var68);
    org.apache.commons.csv.CSVFormat var71 = var69.withSkipHeaderRecord(false);
    java.lang.Character var72 = var69.getCommentMarker();
    java.lang.String[] var74 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var75 = var69.withHeader(var74);
    org.apache.commons.csv.CSVFormat var76 = var62.withHeader(var74);
    java.lang.String var77 = var45.format((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var78 = var36.withHeaderComments((java.lang.Object[])var74);
    java.lang.String var79 = var19.format((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var80 = var13.withHeader(var74);
    org.apache.commons.csv.CSVFormat var81 = var1.withHeaderComments((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var82 = var1.withIgnoreSurroundingSpaces();
    boolean var83 = var1.isNullStringSet();
    char var84 = var1.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + ""+ "'", var77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "aa"+ "'", var79.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == '4');

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test43");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    org.apache.commons.csv.CSVFormat var15 = var7.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVParser var16 = org.apache.commons.csv.CSVParser.parse("hi!", var7);
    org.apache.commons.csv.CSVFormat var18 = var7.withQuote((java.lang.Character)'a');
    boolean var19 = var7.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var20 = var7.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test44");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var14 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var29 = var21.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    java.lang.Object[] var35 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var36 = var33.withHeaderComments(var35);
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord(false);
    java.lang.Character var39 = var36.getCommentMarker();
    java.lang.String[] var41 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var42 = var36.withHeader(var41);
    org.apache.commons.csv.CSVFormat var43 = var29.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = var14.withHeader(var41);
    org.apache.commons.csv.CSVFormat var46 = var14.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var48 = var46.withQuote((java.lang.Character)'#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test45");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.String[] var5 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var7 = var2.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var9 = var2.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var11 = var2.withEscape('#');
    org.apache.commons.csv.CSVParser var12 = org.apache.commons.csv.CSVParser.parse("ALL4MINIMAL4NON_NUMERIC4NONE", var11);
    java.util.List var13 = var12.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test46");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    boolean var5 = var1.getIgnoreHeaderCase();
    char var6 = var1.getDelimiter();
    org.apache.commons.csv.CSVFormat var8 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var10 = var1.withRecordSeparator('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test47");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    java.util.Iterator var7 = var5.iterator();
    long var8 = var5.getCurrentLineNumber();
    long var9 = var5.getRecordNumber();
    long var10 = var5.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test48");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    java.lang.Character var14 = var13.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test49");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    boolean var14 = var7.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var7.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var17 = var7.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var19 = var7.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var23 = var21.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var25 = var21.withRecordSeparator("hi!");
    boolean var26 = var25.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var28 = var25.withQuote(' ');
    boolean var29 = var28.isQuoteCharacterSet();
    java.lang.Character var30 = var28.getCommentMarker();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var34 = var32.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var36 = var32.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(false);
    java.lang.String[] var39 = var36.getHeaderComments();
    java.lang.String var40 = var36.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var42 = var36.withQuote(' ');
    boolean var43 = var42.getSkipHeaderRecord();
    java.lang.String[] var44 = var42.getHeaderComments();
    org.apache.commons.csv.CSVFormat var46 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var48 = var46.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var50 = var48.withEscape(' ');
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var54 = var52.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var56 = var52.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var58 = var56.withQuote('a');
    java.lang.Object[] var59 = new java.lang.Object[] { var56};
    org.apache.commons.csv.CSVFormat var60 = var50.withHeaderComments(var59);
    java.lang.String var61 = var42.format(var59);
    org.apache.commons.csv.CSVFormat var62 = var28.withHeaderComments(var59);
    org.apache.commons.csv.CSVFormat var63 = var19.withHeaderComments(var59);
    org.apache.commons.csv.CSVParser var64 = org.apache.commons.csv.CSVParser.parse("a", var63);
    org.apache.commons.csv.CSVFormat var66 = var63.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var68 = var63.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var70 = var68.withAllowMissingColumnNames(true);
    boolean var71 = var70.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "Delimiter=<4>  SkipHeaderRecord:false hi!"+ "'", var61.equals("Delimiter=<4>  SkipHeaderRecord:false hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test50");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines(true);
    java.lang.String[] var16 = var15.getHeader();
    org.apache.commons.csv.CSVFormat var18 = var15.withEscape((java.lang.Character)'#');
    java.lang.String[] var19 = var18.getHeader();
    java.lang.Character var20 = var18.getCommentMarker();
    org.apache.commons.csv.CSVFormat var22 = var18.withQuote('a');
    org.apache.commons.csv.CSVFormat var23 = var22.withIgnoreSurroundingSpaces();
    boolean var24 = var23.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ' '+ "'", var20.equals(' '));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test51");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    char var5 = var4.getDelimiter();
    org.apache.commons.csv.CSVFormat var7 = var4.withQuote((java.lang.Character)'#');
    java.lang.String var8 = var7.toString();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.Object[] var15 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var16 = var13.withHeaderComments(var15);
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var21 = var19.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var23 = var21.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var25 = var23.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(true);
    java.lang.Object[] var31 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var32 = var29.withHeaderComments(var31);
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(true);
    java.lang.Object[] var40 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var41 = var38.withHeaderComments(var40);
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord(false);
    java.lang.Character var44 = var41.getCommentMarker();
    java.lang.String[] var46 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var47 = var41.withHeader(var46);
    org.apache.commons.csv.CSVFormat var49 = var41.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var53 = var51.withAllowMissingColumnNames(true);
    java.lang.Object[] var55 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var56 = var53.withHeaderComments(var55);
    org.apache.commons.csv.CSVFormat var58 = var56.withSkipHeaderRecord(false);
    java.lang.Character var59 = var56.getCommentMarker();
    java.lang.String[] var61 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var62 = var56.withHeader(var61);
    org.apache.commons.csv.CSVFormat var63 = var49.withHeader(var61);
    java.lang.String var64 = var32.format((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var65 = var23.withHeaderComments((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var66 = var9.withHeaderComments((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var68 = var9.withRecordSeparator("a");
    java.lang.String[] var69 = var9.getHeaderComments();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var71 = var9.withDelimiter('a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Delimiter=<4> QuoteChar=<#> CommentStart=<a> SkipHeaderRecord:false"+ "'", var8.equals("Delimiter=<4> QuoteChar=<#> CommentStart=<a> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test52");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    boolean var6 = var5.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var8 = var5.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var9 = var8.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var11 = var8.withRecordSeparator("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test53");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    char var5 = var4.getDelimiter();
    org.apache.commons.csv.CSVFormat var7 = var4.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    boolean var9 = var7.getIgnoreSurroundingSpaces();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var11 = var7.withEscape((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test54");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    boolean var10 = var9.isNullStringSet();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var14 = var12.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var16 = var12.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(false);
    boolean var19 = var9.equals((java.lang.Object)var18);
    org.apache.commons.csv.CSVFormat var20 = var18.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test55");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var1.withRecordSeparator(' ');
    java.lang.String[] var7 = var6.getHeader();
    java.lang.String[] var8 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var12 = var6.withDelimiter('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test56");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var19 = var15.withDelimiter('4');
    boolean var20 = var19.isQuoteCharacterSet();
    boolean var21 = var19.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var22 = var19.withAllowMissingColumnNames();
    boolean var23 = var19.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test57");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var13.withHeaderComments((java.lang.Object[])var26);
    org.apache.commons.csv.CSVParser var29 = org.apache.commons.csv.CSVParser.parse("hi!", var13);
    java.lang.Character var30 = var13.getCommentMarker();
    org.apache.commons.csv.CSVFormat var32 = var13.withNullString("Delimiter=<4> QuoteChar=<a> CommentStart=<#> SkipHeaderRecord:false");
    boolean var33 = var13.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var35 = var13.withEscape('#');
    java.lang.String var36 = var35.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test58");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false HeaderComments:[0]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test59");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var18 = var15.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var22 = var20.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var23 = var20.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var25 = var23.withEscape('#');
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(true);
    java.lang.Object[] var31 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var32 = var29.withHeaderComments(var31);
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord(false);
    java.lang.Character var35 = var32.getCommentMarker();
    java.lang.String[] var37 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var38 = var32.withHeader(var37);
    org.apache.commons.csv.CSVFormat var40 = var32.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var44 = var42.withAllowMissingColumnNames(true);
    java.lang.Object[] var46 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var47 = var44.withHeaderComments(var46);
    org.apache.commons.csv.CSVFormat var49 = var47.withSkipHeaderRecord(false);
    java.lang.Character var50 = var47.getCommentMarker();
    java.lang.String[] var52 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var53 = var47.withHeader(var52);
    org.apache.commons.csv.CSVFormat var54 = var40.withHeader(var52);
    java.lang.String var55 = var23.format((java.lang.Object[])var52);
    org.apache.commons.csv.CSVFormat var56 = var18.withHeader(var52);
    java.lang.String[] var57 = var56.getHeader();
    org.apache.commons.csv.CSVFormat var59 = var56.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ""+ "'", var55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test60");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.QuoteMode var13 = var6.getQuoteMode();
    boolean var14 = var6.isNullStringSet();
    org.apache.commons.csv.CSVFormat var15 = var6.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test61");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator('a');
    java.lang.String var14 = var11.getNullString();
    org.apache.commons.csv.CSVFormat var16 = var11.withCommentMarker((java.lang.Character)'a');
    boolean var17 = var7.equals((java.lang.Object)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var19 = var7.withEscape('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test62");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.String[] var4 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var1.withIgnoreHeaderCase(false);
    boolean var7 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var9 = var1.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote('a');
    java.lang.String var12 = var9.toString();
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var16 = var14.withAllowMissingColumnNames(true);
    java.lang.Object[] var18 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var19 = var16.withHeaderComments(var18);
    org.apache.commons.csv.CSVFormat var21 = var19.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var22 = var19.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var24 = var22.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var26 = var22.withQuote('a');
    org.apache.commons.csv.CSVFormat var28 = var22.withAllowMissingColumnNames(false);
    boolean var29 = var9.equals((java.lang.Object)var28);
    org.apache.commons.csv.CSVFormat var31 = var9.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Delimiter=<4> Escape=< > SkipHeaderRecord:false"+ "'", var12.equals("Delimiter=<4> Escape=< > SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test63");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    boolean var6 = var5.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var8 = var5.withQuote(' ');
    boolean var9 = var8.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.String[] var14 = var11.getHeader();
    org.apache.commons.csv.CSVFormat var16 = var11.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var20 = var18.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var22 = var20.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var24 = var22.withAllowMissingColumnNames(true);
    boolean var25 = var22.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(true);
    java.lang.Object[] var31 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var32 = var29.withHeaderComments(var31);
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var35 = var32.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var37 = var35.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var39 = var37.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var41 = var39.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var43 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var45 = var43.withAllowMissingColumnNames(true);
    java.lang.Object[] var47 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var48 = var45.withHeaderComments(var47);
    org.apache.commons.csv.CSVFormat var50 = var48.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var54 = var52.withAllowMissingColumnNames(true);
    java.lang.Object[] var56 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var57 = var54.withHeaderComments(var56);
    org.apache.commons.csv.CSVFormat var59 = var57.withSkipHeaderRecord(false);
    java.lang.Character var60 = var57.getCommentMarker();
    java.lang.String[] var62 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var63 = var57.withHeader(var62);
    org.apache.commons.csv.CSVFormat var65 = var57.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var67 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var69 = var67.withAllowMissingColumnNames(true);
    java.lang.Object[] var71 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var72 = var69.withHeaderComments(var71);
    org.apache.commons.csv.CSVFormat var74 = var72.withSkipHeaderRecord(false);
    java.lang.Character var75 = var72.getCommentMarker();
    java.lang.String[] var77 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var78 = var72.withHeader(var77);
    org.apache.commons.csv.CSVFormat var79 = var65.withHeader(var77);
    java.lang.String var80 = var48.format((java.lang.Object[])var77);
    org.apache.commons.csv.CSVFormat var81 = var39.withHeaderComments((java.lang.Object[])var77);
    java.lang.String var82 = var22.format((java.lang.Object[])var77);
    org.apache.commons.csv.CSVFormat var83 = var16.withHeader(var77);
    org.apache.commons.csv.CSVFormat var85 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var86 = var85.isNullStringSet();
    org.apache.commons.csv.CSVFormat var88 = var85.withCommentMarker((java.lang.Character)'a');
    char var89 = var88.getDelimiter();
    boolean var90 = var83.equals((java.lang.Object)var89);
    java.lang.String[] var91 = var83.getHeader();
    org.apache.commons.csv.CSVFormat var92 = var8.withHeaderComments((java.lang.Object[])var91);
    org.apache.commons.csv.CSVFormat var94 = var8.withRecordSeparator("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]");
    org.apache.commons.csv.CSVFormat var96 = var8.withIgnoreEmptyLines(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + ""+ "'", var80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "aa"+ "'", var82.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test64");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.String[] var4 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var12 = var10.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var14 = var12.withAllowMissingColumnNames(true);
    boolean var15 = var12.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withAllowMissingColumnNames(true);
    java.lang.Object[] var21 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var22 = var19.withHeaderComments(var21);
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var25 = var22.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var27 = var25.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var29 = var27.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var31 = var29.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var35 = var33.withAllowMissingColumnNames(true);
    java.lang.Object[] var37 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var38 = var35.withHeaderComments(var37);
    org.apache.commons.csv.CSVFormat var40 = var38.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var44 = var42.withAllowMissingColumnNames(true);
    java.lang.Object[] var46 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var47 = var44.withHeaderComments(var46);
    org.apache.commons.csv.CSVFormat var49 = var47.withSkipHeaderRecord(false);
    java.lang.Character var50 = var47.getCommentMarker();
    java.lang.String[] var52 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var53 = var47.withHeader(var52);
    org.apache.commons.csv.CSVFormat var55 = var47.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var59 = var57.withAllowMissingColumnNames(true);
    java.lang.Object[] var61 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var62 = var59.withHeaderComments(var61);
    org.apache.commons.csv.CSVFormat var64 = var62.withSkipHeaderRecord(false);
    java.lang.Character var65 = var62.getCommentMarker();
    java.lang.String[] var67 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var68 = var62.withHeader(var67);
    org.apache.commons.csv.CSVFormat var69 = var55.withHeader(var67);
    java.lang.String var70 = var38.format((java.lang.Object[])var67);
    org.apache.commons.csv.CSVFormat var71 = var29.withHeaderComments((java.lang.Object[])var67);
    java.lang.String var72 = var12.format((java.lang.Object[])var67);
    org.apache.commons.csv.CSVFormat var73 = var6.withHeader(var67);
    boolean var74 = var73.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var76 = var73.withIgnoreSurroundingSpaces(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "aa"+ "'", var72.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test65");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.String[] var4 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = var1.withDelimiter('#');
    java.lang.Character var9 = var8.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test66");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    boolean var6 = var5.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var8 = var5.withSkipHeaderRecord(true);
    org.apache.commons.csv.QuoteMode var9 = var8.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test67");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var9.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var14 = var13.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var29 = var27.withQuote('a');
    org.apache.commons.csv.CSVFormat var30 = var29.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var32 = var29.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(true);
    java.lang.Object[] var40 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var41 = var38.withHeaderComments(var40);
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord(false);
    java.lang.Character var44 = var41.getCommentMarker();
    java.lang.String[] var46 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var47 = var41.withHeader(var46);
    boolean var48 = var41.getIgnoreSurroundingSpaces();
    java.lang.Character var49 = var41.getCommentMarker();
    org.apache.commons.csv.QuoteMode var50 = var41.getQuoteMode();
    boolean var51 = var41.isNullStringSet();
    org.apache.commons.csv.CSVFormat var53 = var41.withEscape('#');
    java.lang.String[] var54 = var41.getHeaderComments();
    org.apache.commons.csv.CSVFormat var55 = var32.withHeader(var54);
    org.apache.commons.csv.CSVFormat var56 = var14.withHeaderComments((java.lang.Object[])var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var58 = var56.withCommentMarker((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test68");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var12.withRecordSeparator('a');
    java.lang.String var30 = var29.getNullString();
    org.apache.commons.csv.CSVFormat var32 = var29.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test69");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines();
    boolean var15 = var14.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var17.withSkipHeaderRecord();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var17.withHeader(var20);
    org.apache.commons.csv.CSVFormat var22 = var14.withHeader(var20);
    org.apache.commons.csv.CSVFormat var24 = var14.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var26 = var14.withRecordSeparator("Delimiter=<4> CommentStart=<#> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.QuoteMode var27 = var14.getQuoteMode();
    org.apache.commons.csv.CSVFormat var29 = var14.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    java.lang.Object[] var35 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var36 = var33.withHeaderComments(var35);
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord(false);
    java.lang.Character var39 = var36.getCommentMarker();
    java.lang.String[] var41 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var42 = var36.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = var36.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var45 = var44.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var47 = var45.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var48 = var45.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var52 = var50.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var53 = var50.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var55 = var53.withEscape('#');
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var59 = var57.withAllowMissingColumnNames(true);
    java.lang.Object[] var61 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var62 = var59.withHeaderComments(var61);
    org.apache.commons.csv.CSVFormat var64 = var62.withSkipHeaderRecord(false);
    java.lang.Character var65 = var62.getCommentMarker();
    java.lang.String[] var67 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var68 = var62.withHeader(var67);
    org.apache.commons.csv.CSVFormat var70 = var62.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var72 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var74 = var72.withAllowMissingColumnNames(true);
    java.lang.Object[] var76 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var77 = var74.withHeaderComments(var76);
    org.apache.commons.csv.CSVFormat var79 = var77.withSkipHeaderRecord(false);
    java.lang.Character var80 = var77.getCommentMarker();
    java.lang.String[] var82 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var83 = var77.withHeader(var82);
    org.apache.commons.csv.CSVFormat var84 = var70.withHeader(var82);
    java.lang.String var85 = var53.format((java.lang.Object[])var82);
    org.apache.commons.csv.CSVFormat var86 = var48.withHeader(var82);
    java.lang.String var87 = var14.format((java.lang.Object[])var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + ""+ "'", var85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + ""+ "'", var87.equals(""));

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test70");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var17 = var15.withNullString("Delimiter=<4> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var18 = var17.withAllowMissingColumnNames();
    char var19 = var18.getDelimiter();
    org.apache.commons.csv.CSVFormat var21 = var18.withEscape('a');
    org.apache.commons.csv.CSVFormat var23 = var18.withEscape((java.lang.Character)'#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test71");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.String[] var5 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var7 = var2.withCommentMarker('a');
    java.lang.Character var8 = var2.getCommentMarker();
    org.apache.commons.csv.CSVFormat var9 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]", var2);
    boolean var11 = var10.isClosed();
    long var12 = var10.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test72");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var12.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var31 = var12.withIgnoreEmptyLines(false);
    java.lang.String var32 = var31.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test73");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var9.withQuote('a');
    org.apache.commons.csv.CSVFormat var15 = var9.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = var9.withIgnoreEmptyLines();
    java.lang.Character var17 = var9.getQuoteCharacter();
    boolean var18 = var9.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test74");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    org.apache.commons.csv.CSVFormat var15 = var7.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = var15.withSkipHeaderRecord();
    boolean var17 = var15.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var19 = var15.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var21 = var15.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVParser var22 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false", var15);
    boolean var23 = var22.isClosed();
    java.util.Iterator var24 = var22.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test75");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.String[] var4 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var1.withIgnoreHeaderCase(false);
    boolean var7 = var1.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var9 = var1.withEscape((java.lang.Character)' ');
    java.lang.String var10 = var1.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test76");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withQuote(' ');
    org.apache.commons.csv.CSVFormat var17 = var15.withEscape((java.lang.Character)' ');
    java.lang.Character var18 = var15.getCommentMarker();
    org.apache.commons.csv.CSVFormat var20 = var15.withQuote((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test77");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(true);
    java.lang.Object[] var9 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var10 = var7.withHeaderComments(var9);
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord(false);
    java.lang.Character var13 = var10.getCommentMarker();
    java.lang.String[] var15 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var16 = var10.withHeader(var15);
    java.lang.String var17 = var16.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var19 = var16.withQuote(' ');
    org.apache.commons.csv.CSVFormat var21 = var19.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var24 = var23.withSkipHeaderRecord();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var23.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var19.withHeader(var26);
    org.apache.commons.csv.CSVFormat var29 = var19.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var31 = var29.withIgnoreSurroundingSpaces(false);
    boolean var32 = var3.equals((java.lang.Object)var29);
    boolean var33 = var29.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test78");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    boolean var14 = var7.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var7.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var17 = var7.withRecordSeparator('#');
    boolean var18 = var17.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]", var17);
    var19.close();
    boolean var21 = var19.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test79");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var19 = var15.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var22 = var21.isNullStringSet();
    boolean var23 = var21.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var25 = var21.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var27 = var21.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var29 = var21.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = var21.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var33 = var21.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var37 = var35.withAllowMissingColumnNames(true);
    java.lang.Object[] var39 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var40 = var37.withHeaderComments(var39);
    org.apache.commons.csv.CSVFormat var42 = var40.withSkipHeaderRecord(false);
    java.lang.Character var43 = var40.getCommentMarker();
    java.lang.String[] var45 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var46 = var40.withHeader(var45);
    java.lang.String var47 = var46.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var51 = var49.withAllowMissingColumnNames(true);
    java.lang.Object[] var53 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var54 = var51.withHeaderComments(var53);
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord(false);
    java.lang.Character var57 = var54.getCommentMarker();
    java.lang.String[] var59 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var60 = var54.withHeader(var59);
    org.apache.commons.csv.CSVFormat var61 = var46.withHeaderComments((java.lang.Object[])var59);
    boolean var62 = var61.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var64 = var61.withNullString("");
    boolean var65 = var64.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var67 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var69 = var67.withAllowMissingColumnNames(true);
    java.lang.Object[] var71 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var72 = var69.withHeaderComments(var71);
    org.apache.commons.csv.CSVFormat var74 = var72.withSkipHeaderRecord(false);
    java.lang.Character var75 = var72.getCommentMarker();
    java.lang.String[] var77 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var78 = var72.withHeader(var77);
    org.apache.commons.csv.CSVFormat var80 = var72.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var82 = var72.withRecordSeparator("Delimiter=<4> QuoteChar=<a> CommentStart=<#> SkipHeaderRecord:false");
    java.lang.String[] var83 = var82.getHeaderComments();
    org.apache.commons.csv.CSVFormat var84 = var64.withHeader(var83);
    org.apache.commons.csv.CSVFormat var85 = var33.withHeader(var83);
    org.apache.commons.csv.CSVFormat var86 = var15.withHeader(var83);
    org.apache.commons.csv.CSVFormat var87 = var86.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var88 = var87.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test80");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var4 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var6 = var4.withCommentMarker('#');
    boolean var7 = var4.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat.Predefined[] var8 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var9 = var4.withHeaderComments((java.lang.Object[])var8);
    boolean var10 = var9.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var12 = var9.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test81");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    java.lang.String var5 = var4.getNullString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var11 = var4.withNullString("Delimiter=<4> EmptyLines:ignored SkipHeaderRecord:true HeaderComments:[0]");
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var15 = var13.withAllowMissingColumnNames(true);
    java.lang.Object[] var17 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var18 = var15.withHeaderComments(var17);
    org.apache.commons.csv.CSVFormat var20 = var18.withSkipHeaderRecord(false);
    java.lang.Character var21 = var18.getCommentMarker();
    java.lang.String[] var23 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var24 = var18.withHeader(var23);
    org.apache.commons.csv.CSVFormat var26 = var18.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var27 = var26.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var29 = var27.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var31 = var29.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var33 = var29.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var35 = var33.withNullString("Delimiter=<4> CommentStart=<#> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var37 = var33.withQuote('a');
    org.apache.commons.csv.CSVFormat var39 = var37.withIgnoreSurroundingSpaces(true);
    boolean var40 = var4.equals((java.lang.Object)var39);
    boolean var41 = var4.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test82");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    boolean var7 = var5.isClosed();
    boolean var8 = var5.isClosed();
    var5.close();
    var5.close();
    var5.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test83");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    boolean var10 = var6.isQuoteCharacterSet();
    java.lang.Character var11 = var6.getEscapeCharacter();
    boolean var12 = var6.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var16 = var6.withIgnoreSurroundingSpaces(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test84");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    boolean var7 = var5.isClosed();
    java.util.Iterator var8 = var5.iterator();
    java.util.Iterator var9 = var5.iterator();
    java.util.Map var10 = var5.getHeaderMap();
    long var11 = var5.getCurrentLineNumber();
    long var12 = var5.getRecordNumber();
    long var13 = var5.getRecordNumber();
    boolean var14 = var5.isClosed();
    var5.close();
    boolean var16 = var5.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test85");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    java.lang.String var15 = var6.getNullString();
    java.lang.String var16 = var6.getNullString();
    boolean var17 = var6.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var18 = var6.withAllowMissingColumnNames();
    java.lang.String var19 = var6.toString();
    org.apache.commons.csv.CSVFormat var20 = var6.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]"+ "'", var19.equals("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test86");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("#Delimiter=<4> SkipHeaderRecord:false#");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test87");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    java.lang.String var5 = var4.getNullString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreSurroundingSpaces(true);
    java.lang.String var10 = var9.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var12 = var9.withDelimiter('#');
    char var13 = var9.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == '4');

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test88");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames(true);
    java.lang.Object[] var23 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var24 = var21.withHeaderComments(var23);
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord(false);
    java.lang.Character var27 = var24.getCommentMarker();
    java.lang.String[] var29 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var30 = var24.withHeader(var29);
    org.apache.commons.csv.CSVFormat var31 = var17.withHeader(var29);
    org.apache.commons.csv.CSVFormat var33 = var31.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var34 = var31.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var36 = var34.withEscape('a');
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test89");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var14 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var11.withIgnoreEmptyLines(true);
    boolean var17 = var11.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test90");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    java.lang.String var5 = var4.getNullString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreSurroundingSpaces(true);
    java.lang.String var10 = var9.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var12 = var9.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var14 = var12.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var16 = var14.withNullString("Delimiter=<4> SkipHeaderRecord:true HeaderComments:[0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test91");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var5 = var3.withQuote(' ');
    org.apache.commons.csv.CSVFormat var7 = var3.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var8 = var7.withSkipHeaderRecord();
    java.lang.Character var9 = var8.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ' '+ "'", var9.equals(' '));

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test92");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var2 = var1.withAllowMissingColumnNames();
    boolean var3 = var1.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test93");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var6.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var17 = var6.withQuote('a');
    java.lang.String[] var18 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var20 = var6.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var24 = var22.withAllowMissingColumnNames(true);
    java.lang.Object[] var26 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var27 = var24.withHeaderComments(var26);
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord(false);
    java.lang.Character var30 = var27.getCommentMarker();
    java.lang.String[] var32 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var33 = var27.withHeader(var32);
    java.lang.String var34 = var33.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var36 = var33.withQuote(' ');
    org.apache.commons.csv.CSVFormat var38 = var36.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var41 = var40.withSkipHeaderRecord();
    java.lang.String[] var43 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var44 = var40.withHeader(var43);
    org.apache.commons.csv.CSVFormat var45 = var36.withHeader(var43);
    java.lang.String var46 = var6.format((java.lang.Object[])var43);
    java.lang.String var47 = var6.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + ""+ "'", var46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test94");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var12.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var31 = var29.withIgnoreHeaderCase(false);
    boolean var32 = var31.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var34 = var31.withSkipHeaderRecord(false);
    java.lang.String[] var35 = var34.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test95");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.String[] var4 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var12 = var10.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var14 = var12.withAllowMissingColumnNames(true);
    boolean var15 = var12.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withAllowMissingColumnNames(true);
    java.lang.Object[] var21 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var22 = var19.withHeaderComments(var21);
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var25 = var22.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var27 = var25.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var29 = var27.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var31 = var29.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var35 = var33.withAllowMissingColumnNames(true);
    java.lang.Object[] var37 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var38 = var35.withHeaderComments(var37);
    org.apache.commons.csv.CSVFormat var40 = var38.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var44 = var42.withAllowMissingColumnNames(true);
    java.lang.Object[] var46 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var47 = var44.withHeaderComments(var46);
    org.apache.commons.csv.CSVFormat var49 = var47.withSkipHeaderRecord(false);
    java.lang.Character var50 = var47.getCommentMarker();
    java.lang.String[] var52 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var53 = var47.withHeader(var52);
    org.apache.commons.csv.CSVFormat var55 = var47.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var59 = var57.withAllowMissingColumnNames(true);
    java.lang.Object[] var61 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var62 = var59.withHeaderComments(var61);
    org.apache.commons.csv.CSVFormat var64 = var62.withSkipHeaderRecord(false);
    java.lang.Character var65 = var62.getCommentMarker();
    java.lang.String[] var67 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var68 = var62.withHeader(var67);
    org.apache.commons.csv.CSVFormat var69 = var55.withHeader(var67);
    java.lang.String var70 = var38.format((java.lang.Object[])var67);
    org.apache.commons.csv.CSVFormat var71 = var29.withHeaderComments((java.lang.Object[])var67);
    java.lang.String var72 = var12.format((java.lang.Object[])var67);
    org.apache.commons.csv.CSVFormat var73 = var6.withHeader(var67);
    org.apache.commons.csv.CSVFormat var75 = var73.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var77 = var75.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var79 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var81 = var79.withAllowMissingColumnNames(true);
    java.lang.Object[] var83 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var84 = var81.withHeaderComments(var83);
    boolean var85 = var75.equals((java.lang.Object)var83);
    org.apache.commons.csv.QuoteMode var86 = var75.getQuoteMode();
    org.apache.commons.csv.CSVFormat var88 = var75.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "aa"+ "'", var72.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test96");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var14 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var29 = var21.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    java.lang.Object[] var35 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var36 = var33.withHeaderComments(var35);
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord(false);
    java.lang.Character var39 = var36.getCommentMarker();
    java.lang.String[] var41 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var42 = var36.withHeader(var41);
    org.apache.commons.csv.CSVFormat var43 = var29.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = var14.withHeader(var41);
    org.apache.commons.csv.CSVFormat var46 = var14.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var47 = var46.withAllowMissingColumnNames();
    java.lang.String[] var48 = var47.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test97");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var6.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var18 = var6.withDelimiter('a');
    boolean var19 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var21 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var23 = var6.withQuote(' ');
    org.apache.commons.csv.CSVFormat var25 = var6.withDelimiter('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test98");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(false);
    java.lang.String var30 = var27.toString();
    java.lang.String var31 = var27.toString();
    org.apache.commons.csv.CSVFormat var33 = var27.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var35 = var33.withQuote((java.lang.Character)'a');
    java.lang.String[] var36 = var33.getHeaderComments();
    org.apache.commons.csv.CSVFormat var37 = var33.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]"+ "'", var30.equals("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]"+ "'", var31.equals("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test99");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var14.withHeader(var26);
    boolean var29 = var28.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var31 = var28.withQuote(' ');
    org.apache.commons.csv.CSVFormat var33 = var28.withRecordSeparator('a');
    java.lang.String[] var34 = var28.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test100");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    var5.close();
    long var8 = var5.getCurrentLineNumber();
    java.util.Iterator var9 = var5.iterator();
    long var10 = var5.getRecordNumber();
    java.util.Map var11 = var5.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test101");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var6.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var20 = var18.withAllowMissingColumnNames(true);
    java.lang.Object[] var22 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var23 = var20.withHeaderComments(var22);
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    boolean var25 = var24.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(true);
    java.lang.Object[] var31 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var32 = var29.withHeaderComments(var31);
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord(false);
    java.lang.Character var35 = var32.getCommentMarker();
    java.lang.String[] var37 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var38 = var32.withHeader(var37);
    java.lang.String var39 = var38.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var43 = var41.withAllowMissingColumnNames(true);
    java.lang.Object[] var45 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var46 = var43.withHeaderComments(var45);
    org.apache.commons.csv.CSVFormat var48 = var46.withSkipHeaderRecord(false);
    java.lang.Character var49 = var46.getCommentMarker();
    java.lang.String[] var51 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var52 = var46.withHeader(var51);
    org.apache.commons.csv.CSVFormat var53 = var38.withHeaderComments((java.lang.Object[])var51);
    org.apache.commons.csv.CSVFormat var55 = var53.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var58 = var57.withSkipHeaderRecord();
    java.lang.String[] var60 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var61 = var57.withHeader(var60);
    org.apache.commons.csv.CSVFormat var62 = var55.withHeaderComments((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var63 = var24.withHeaderComments((java.lang.Object[])var60);
    java.lang.String var64 = var6.format((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var66 = var6.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var67 = var66.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var70 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var72 = var70.withAllowMissingColumnNames(true);
    java.lang.Object[] var74 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var75 = var72.withHeaderComments(var74);
    org.apache.commons.csv.CSVFormat var77 = var75.withSkipHeaderRecord(false);
    java.lang.Character var78 = var75.getCommentMarker();
    java.lang.String[] var80 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var81 = var75.withHeader(var80);
    org.apache.commons.csv.QuoteMode var82 = var75.getQuoteMode();
    boolean var83 = var75.isNullStringSet();
    boolean var84 = var75.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVParser var85 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> QuoteChar=<a> CommentStart=< > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]", var75);
    org.apache.commons.csv.CSVFormat var87 = var75.withCommentMarker((java.lang.Character)' ');
    boolean var88 = var66.equals((java.lang.Object)' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test102");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    boolean var10 = var9.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var9.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var13 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVParser var14 = org.apache.commons.csv.CSVParser.parse("", var9);
    long var15 = var14.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test103");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var3.withRecordSeparator("hi!");
    java.lang.Character var9 = var3.getCommentMarker();
    org.apache.commons.csv.CSVFormat var11 = var3.withRecordSeparator("Delimiter=<4> QuoteChar=<a> CommentStart=<#> RecordSeparator=<> SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test104");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var5.getHeaderComments();
    java.lang.String var9 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var5.withQuote(' ');
    boolean var12 = var11.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var11.withDelimiter('4');
    boolean var15 = var11.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = var11.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var18 = var17.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var18.withDelimiter('#');
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var24 = var22.withAllowMissingColumnNames(true);
    java.lang.Object[] var26 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var27 = var24.withHeaderComments(var26);
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord(false);
    java.lang.Character var30 = var27.getCommentMarker();
    java.lang.String[] var32 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var33 = var27.withHeader(var32);
    java.lang.String var34 = var33.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var36 = var33.withQuote(' ');
    org.apache.commons.csv.CSVFormat var38 = var36.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var40 = var38.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var41 = var38.withIgnoreSurroundingSpaces();
    java.lang.String[] var42 = var41.getHeaderComments();
    org.apache.commons.csv.CSVFormat var43 = var20.withHeader(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test105");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape(' ');
    boolean var8 = var7.isCommentMarkerSet();
    java.lang.String[] var9 = var7.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test106");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    java.lang.String[] var28 = var27.getHeader();
    org.apache.commons.csv.CSVFormat var30 = var27.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var32 = var30.withRecordSeparator("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test107");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    boolean var10 = var6.getSkipHeaderRecord();
    boolean var11 = var6.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var13 = var6.withIgnoreEmptyLines(false);
    boolean var14 = var6.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test108");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    boolean var10 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var12 = var6.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var19 = var15.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var21 = var15.withEscape((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test109");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var7 = var6.withAllowMissingColumnNames();
    boolean var8 = var7.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var10 = var7.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var12 = var7.withCommentMarker((java.lang.Character)' ');
    java.lang.Character var13 = var7.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test110");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var6.withQuote((java.lang.Character)'a');
    java.lang.Character var17 = var6.getCommentMarker();
    java.lang.String var18 = var6.getRecordSeparator();
    boolean var19 = var6.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test111");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    var5.close();
    boolean var8 = var5.isClosed();
    boolean var9 = var5.isClosed();
    boolean var10 = var5.isClosed();
    boolean var11 = var5.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test112");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withQuote(' ');
    java.lang.String var16 = var12.getNullString();
    boolean var17 = var12.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test113");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    java.lang.String var5 = var4.getNullString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var9 = var7.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord(true);
    boolean var12 = var9.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test114");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(false);
    boolean var6 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var5.withCommentMarker(' ');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var10 = var8.withEscape((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test115");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    boolean var5 = var3.isQuoteCharacterSet();
    java.lang.Character var6 = var3.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test116");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    java.lang.String var8 = var5.toString();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var11 = var10.isNullStringSet();
    org.apache.commons.csv.CSVFormat var13 = var10.withCommentMarker((java.lang.Character)'a');
    java.lang.String var14 = var13.getNullString();
    org.apache.commons.csv.CSVFormat var16 = var13.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var18.withSkipHeaderRecord();
    java.lang.String[] var21 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var22 = var18.withHeader(var21);
    java.lang.String var23 = var13.format((java.lang.Object[])var21);
    org.apache.commons.csv.CSVFormat var24 = var5.withHeaderComments((java.lang.Object[])var21);
    java.lang.String var25 = var5.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false"+ "'", var8.equals("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test117");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    char var5 = var4.getDelimiter();
    org.apache.commons.csv.CSVFormat var7 = var4.withQuote((java.lang.Character)'#');
    java.lang.String var8 = var7.toString();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.Object[] var15 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var16 = var13.withHeaderComments(var15);
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord(false);
    java.lang.Character var19 = var16.getCommentMarker();
    java.lang.String[] var21 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var22 = var16.withHeader(var21);
    java.lang.String var23 = var22.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var27 = var25.withAllowMissingColumnNames(true);
    java.lang.Object[] var29 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var30 = var27.withHeaderComments(var29);
    org.apache.commons.csv.CSVFormat var32 = var30.withSkipHeaderRecord(false);
    java.lang.Character var33 = var30.getCommentMarker();
    java.lang.String[] var35 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var36 = var30.withHeader(var35);
    org.apache.commons.csv.CSVFormat var37 = var22.withHeaderComments((java.lang.Object[])var35);
    org.apache.commons.csv.CSVParser var38 = org.apache.commons.csv.CSVParser.parse("hi!", var22);
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    org.apache.commons.csv.CSVFormat var40 = var7.withHeaderComments(var39);
    boolean var41 = var40.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var43 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var45 = var43.withAllowMissingColumnNames(true);
    java.lang.Object[] var47 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var48 = var45.withHeaderComments(var47);
    org.apache.commons.csv.CSVFormat var50 = var48.withSkipHeaderRecord(false);
    java.lang.Character var51 = var48.getCommentMarker();
    java.lang.String[] var53 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var54 = var48.withHeader(var53);
    org.apache.commons.csv.CSVFormat var56 = var48.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var58 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var60 = var58.withAllowMissingColumnNames(true);
    java.lang.Object[] var62 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var63 = var60.withHeaderComments(var62);
    org.apache.commons.csv.CSVFormat var65 = var63.withSkipHeaderRecord(false);
    java.lang.Character var66 = var63.getCommentMarker();
    java.lang.String[] var68 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var69 = var63.withHeader(var68);
    org.apache.commons.csv.CSVFormat var70 = var56.withHeader(var68);
    java.lang.String var71 = var40.format((java.lang.Object[])var68);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var73 = var40.withEscape('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Delimiter=<4> QuoteChar=<#> CommentStart=<a> SkipHeaderRecord:false"+ "'", var8.equals("Delimiter=<4> QuoteChar=<#> CommentStart=<a> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test118");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("a");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test119");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.String[] var5 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var7 = var2.withCommentMarker('a');
    java.lang.Character var8 = var2.getCommentMarker();
    org.apache.commons.csv.CSVFormat var9 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]", var2);
    boolean var11 = var10.isClosed();
    long var12 = var10.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test120");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var13.withHeaderComments((java.lang.Object[])var26);
    org.apache.commons.csv.CSVParser var29 = org.apache.commons.csv.CSVParser.parse("hi!", var13);
    java.lang.Character var30 = var13.getCommentMarker();
    org.apache.commons.csv.CSVFormat var32 = var13.withRecordSeparator("Delimiter=<4>  SkipHeaderRecord:false hi!");
    boolean var33 = var13.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test121");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('4');
    boolean var5 = var4.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test122");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(false);
    boolean var6 = var5.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var5.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var10 = var5.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withRecordSeparator("Delimiter=<4> QuoteChar=<#> CommentStart=<a> SkipHeaderRecord:false");
    boolean var13 = var10.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test123");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    char var5 = var4.getDelimiter();
    org.apache.commons.csv.CSVFormat var7 = var4.withQuote((java.lang.Character)'#');
    boolean var8 = var4.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test124");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var9 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var11 = var1.withIgnoreSurroundingSpaces(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var13 = var1.withCommentMarker((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test125");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var8 = var2.withEscape('a');
    org.apache.commons.csv.CSVFormat var10 = var8.withDelimiter('#');
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("hi!", var10);
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var14 = var13.isNullStringSet();
    boolean var15 = var10.equals((java.lang.Object)var14);
    org.apache.commons.csv.CSVFormat var17 = var10.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator("Delimiter=<4> NullString=<hi!> SkipHeaderRecord:false");
    java.lang.Character var20 = var17.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test126");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator('a');
    java.lang.String var14 = var11.getNullString();
    org.apache.commons.csv.CSVFormat var16 = var11.withCommentMarker((java.lang.Character)'a');
    boolean var17 = var7.equals((java.lang.Object)var16);
    org.apache.commons.csv.CSVFormat var19 = var16.withAllowMissingColumnNames(true);
    boolean var20 = var16.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var21 = var16.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test127");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withQuote(' ');
    java.lang.Character var16 = var15.getEscapeCharacter();
    boolean var17 = var15.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames(true);
    java.lang.Object[] var23 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var24 = var21.withHeaderComments(var23);
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord(false);
    java.lang.Character var27 = var24.getCommentMarker();
    java.lang.String[] var29 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var30 = var24.withHeader(var29);
    org.apache.commons.csv.CSVFormat var32 = var24.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var34 = var24.withRecordSeparator("Delimiter=<4> QuoteChar=<a> CommentStart=<#> SkipHeaderRecord:false");
    java.lang.String[] var35 = var34.getHeaderComments();
    java.lang.String var36 = var15.format((java.lang.Object[])var35);
    boolean var37 = var15.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "0"+ "'", var36.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test128");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var9.withQuote('a');
    org.apache.commons.csv.CSVFormat var15 = var9.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = var15.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var19 = var18.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var21 = var19.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var23 = var19.withCommentMarker('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test129");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<4> CommentStart=<#> SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test130");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    java.lang.String var6 = var3.getNullString();
    org.apache.commons.csv.CSVFormat var8 = var3.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator("aa");
    boolean var11 = var10.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var15 = var10.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var17 = var10.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat('a');
    java.lang.String var20 = var19.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var24 = var22.withAllowMissingColumnNames(true);
    java.lang.Object[] var26 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var27 = var24.withHeaderComments(var26);
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord(false);
    java.lang.Character var30 = var27.getCommentMarker();
    java.lang.String[] var32 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var33 = var27.withHeader(var32);
    boolean var34 = var27.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var35 = var27.withIgnoreEmptyLines();
    boolean var36 = var27.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var38 = var27.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var42 = var40.withAllowMissingColumnNames(true);
    java.lang.Object[] var44 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var45 = var42.withHeaderComments(var44);
    org.apache.commons.csv.CSVFormat var47 = var45.withSkipHeaderRecord(false);
    java.lang.Character var48 = var45.getCommentMarker();
    java.lang.String[] var50 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var51 = var45.withHeader(var50);
    java.lang.String var52 = var51.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var56 = var54.withAllowMissingColumnNames(true);
    java.lang.Object[] var58 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var59 = var56.withHeaderComments(var58);
    org.apache.commons.csv.CSVFormat var61 = var59.withSkipHeaderRecord(false);
    java.lang.Character var62 = var59.getCommentMarker();
    java.lang.String[] var64 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var65 = var59.withHeader(var64);
    org.apache.commons.csv.CSVFormat var66 = var51.withHeaderComments((java.lang.Object[])var64);
    org.apache.commons.csv.CSVFormat var68 = var66.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var70 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var71 = var70.withSkipHeaderRecord();
    java.lang.String[] var73 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var74 = var70.withHeader(var73);
    org.apache.commons.csv.CSVFormat var75 = var68.withHeaderComments((java.lang.Object[])var73);
    org.apache.commons.csv.CSVFormat var76 = var27.withHeader(var73);
    org.apache.commons.csv.CSVFormat var77 = var19.withHeaderComments((java.lang.Object[])var73);
    org.apache.commons.csv.CSVFormat var78 = var10.withHeaderComments((java.lang.Object[])var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test131");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    boolean var7 = var5.isClosed();
    java.util.Iterator var8 = var5.iterator();
    var5.close();
    long var10 = var5.getRecordNumber();
    long var11 = var5.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test132");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    java.lang.String var6 = var3.getNullString();
    org.apache.commons.csv.CSVFormat var8 = var3.withRecordSeparator('#');
    java.lang.Character var9 = var3.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.Object[] var15 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var16 = var13.withHeaderComments(var15);
    boolean var17 = var16.isCommentMarkerSet();
    java.lang.Character var18 = var16.getEscapeCharacter();
    java.lang.String var19 = var16.getNullString();
    org.apache.commons.csv.CSVFormat var21 = var16.withCommentMarker((java.lang.Character)'a');
    boolean var22 = var3.equals((java.lang.Object)var21);
    java.lang.Character var23 = var21.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + 'a'+ "'", var23.equals('a'));

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test133");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var4 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape('#');
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    java.lang.Object[] var12 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var13 = var10.withHeaderComments(var12);
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord(false);
    java.lang.Character var16 = var13.getCommentMarker();
    java.lang.String[] var18 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var19 = var13.withHeader(var18);
    org.apache.commons.csv.CSVFormat var21 = var13.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var25 = var23.withAllowMissingColumnNames(true);
    java.lang.Object[] var27 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var28 = var25.withHeaderComments(var27);
    org.apache.commons.csv.CSVFormat var30 = var28.withSkipHeaderRecord(false);
    java.lang.Character var31 = var28.getCommentMarker();
    java.lang.String[] var33 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var34 = var28.withHeader(var33);
    org.apache.commons.csv.CSVFormat var35 = var21.withHeader(var33);
    java.lang.String var36 = var4.format((java.lang.Object[])var33);
    org.apache.commons.csv.CSVFormat.Predefined[] var37 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var38 = var4.withHeaderComments((java.lang.Object[])var37);
    boolean var39 = var38.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.QuoteMode var40 = var38.getQuoteMode();
    org.apache.commons.csv.CSVFormat var42 = var38.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var44 = var38.withCommentMarker('a');
    org.apache.commons.csv.QuoteMode var45 = var44.getQuoteMode();
    org.apache.commons.csv.CSVFormat var47 = var44.withAllowMissingColumnNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test134");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var7 = var6.withAllowMissingColumnNames();
    boolean var8 = var7.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var9 = var7.withAllowMissingColumnNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test135");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withRecordSeparator("hi!");
    boolean var7 = var6.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var9 = var6.withQuote(' ');
    boolean var10 = var6.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var6.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]", var6);
    boolean var14 = var13.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test136");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    var5.close();
    java.util.Iterator var8 = var5.iterator();
    var5.close();
    var5.close();
    java.util.Iterator var11 = var5.iterator();
    java.util.Map var12 = var5.getHeaderMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var13 = var5.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test137");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    boolean var6 = var5.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var8 = var5.withQuote(' ');
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    java.lang.Object[] var14 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments(var14);
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord(false);
    java.lang.Character var18 = var15.getCommentMarker();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var15.withHeader(var20);
    org.apache.commons.csv.CSVFormat var23 = var15.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var27 = var25.withAllowMissingColumnNames(true);
    java.lang.Object[] var29 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var30 = var27.withHeaderComments(var29);
    org.apache.commons.csv.CSVFormat var32 = var30.withSkipHeaderRecord(false);
    java.lang.Character var33 = var30.getCommentMarker();
    java.lang.String[] var35 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var36 = var30.withHeader(var35);
    org.apache.commons.csv.CSVFormat var37 = var23.withHeader(var35);
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var41 = var39.withAllowMissingColumnNames(true);
    java.lang.Object[] var43 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var44 = var41.withHeaderComments(var43);
    java.lang.String var45 = var37.format(var43);
    org.apache.commons.csv.CSVFormat var46 = var8.withHeaderComments(var43);
    boolean var47 = var46.isQuoteCharacterSet();
    boolean var48 = var46.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "0"+ "'", var45.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test138");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames(false);
    java.lang.String[] var9 = var6.getHeaderComments();
    java.lang.String var10 = var6.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var12 = var6.withQuote(' ');
    boolean var13 = var12.getSkipHeaderRecord();
    java.lang.String[] var14 = var12.getHeaderComments();
    org.apache.commons.csv.QuoteMode var15 = var12.getQuoteMode();
    org.apache.commons.csv.CSVFormat var16 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVParser var17 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> Escape=<a> QuoteChar=< > SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[0] Header:[]", var12);
    java.lang.String var18 = var12.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test139");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.QuoteMode var13 = var6.getQuoteMode();
    boolean var14 = var6.isNullStringSet();
    boolean var15 = var6.isNullStringSet();
    org.apache.commons.csv.CSVFormat var16 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var18 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var20 = var6.withSkipHeaderRecord(true);
    boolean var21 = var20.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test140");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var4 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var6 = var4.withCommentMarker('#');
    java.lang.Character var7 = var4.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var9 = var4.withSkipHeaderRecord(false);
    char var10 = var4.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == '4');

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test141");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.String[] var4 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var12 = var10.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var14 = var12.withAllowMissingColumnNames(true);
    boolean var15 = var12.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withAllowMissingColumnNames(true);
    java.lang.Object[] var21 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var22 = var19.withHeaderComments(var21);
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var25 = var22.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var27 = var25.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var29 = var27.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var31 = var29.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var35 = var33.withAllowMissingColumnNames(true);
    java.lang.Object[] var37 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var38 = var35.withHeaderComments(var37);
    org.apache.commons.csv.CSVFormat var40 = var38.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var44 = var42.withAllowMissingColumnNames(true);
    java.lang.Object[] var46 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var47 = var44.withHeaderComments(var46);
    org.apache.commons.csv.CSVFormat var49 = var47.withSkipHeaderRecord(false);
    java.lang.Character var50 = var47.getCommentMarker();
    java.lang.String[] var52 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var53 = var47.withHeader(var52);
    org.apache.commons.csv.CSVFormat var55 = var47.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var59 = var57.withAllowMissingColumnNames(true);
    java.lang.Object[] var61 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var62 = var59.withHeaderComments(var61);
    org.apache.commons.csv.CSVFormat var64 = var62.withSkipHeaderRecord(false);
    java.lang.Character var65 = var62.getCommentMarker();
    java.lang.String[] var67 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var68 = var62.withHeader(var67);
    org.apache.commons.csv.CSVFormat var69 = var55.withHeader(var67);
    java.lang.String var70 = var38.format((java.lang.Object[])var67);
    org.apache.commons.csv.CSVFormat var71 = var29.withHeaderComments((java.lang.Object[])var67);
    java.lang.String var72 = var12.format((java.lang.Object[])var67);
    org.apache.commons.csv.CSVFormat var73 = var6.withHeader(var67);
    boolean var74 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var75 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var77 = var6.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var79 = var6.withCommentMarker((java.lang.Character)' ');
    java.lang.String[] var80 = var6.getHeaderComments();
    boolean var81 = var6.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "aa"+ "'", var72.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test142");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    char var5 = var4.getDelimiter();
    org.apache.commons.csv.CSVFormat var7 = var4.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var8 = var4.withSkipHeaderRecord();
    java.lang.Character var9 = var8.getCommentMarker();
    boolean var10 = var8.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 'a'+ "'", var9.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test143");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var4 = var2.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var6 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var8 = var6.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator('a');
    java.lang.String var11 = var8.getNullString();
    org.apache.commons.csv.CSVFormat var13 = var8.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var28 = var20.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var32 = var30.withAllowMissingColumnNames(true);
    java.lang.Object[] var34 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var35 = var32.withHeaderComments(var34);
    org.apache.commons.csv.CSVFormat var37 = var35.withSkipHeaderRecord(false);
    java.lang.Character var38 = var35.getCommentMarker();
    java.lang.String[] var40 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var41 = var35.withHeader(var40);
    org.apache.commons.csv.CSVFormat var42 = var28.withHeader(var40);
    org.apache.commons.csv.CSVFormat var43 = var13.withHeader(var40);
    java.lang.String var44 = var2.format((java.lang.Object[])var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var46 = var2.withEscape('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test144");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote('a');
    org.apache.commons.csv.CSVFormat var15 = var14.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var17 = var14.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var23 = var21.withAllowMissingColumnNames(true);
    java.lang.Object[] var25 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var26 = var23.withHeaderComments(var25);
    org.apache.commons.csv.CSVFormat var28 = var26.withSkipHeaderRecord(false);
    java.lang.Character var29 = var26.getCommentMarker();
    java.lang.String[] var31 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var32 = var26.withHeader(var31);
    boolean var33 = var26.getIgnoreSurroundingSpaces();
    java.lang.Character var34 = var26.getCommentMarker();
    org.apache.commons.csv.QuoteMode var35 = var26.getQuoteMode();
    boolean var36 = var26.isNullStringSet();
    org.apache.commons.csv.CSVFormat var38 = var26.withEscape('#');
    java.lang.String[] var39 = var26.getHeaderComments();
    org.apache.commons.csv.CSVFormat var40 = var17.withHeader(var39);
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var44 = var42.withAllowMissingColumnNames(true);
    java.lang.Object[] var46 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var47 = var44.withHeaderComments(var46);
    org.apache.commons.csv.CSVFormat var49 = var44.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var51 = var49.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var53 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var55 = var53.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var57 = var53.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var59 = var57.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var61 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var63 = var61.withAllowMissingColumnNames(true);
    java.lang.Object[] var65 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var66 = var63.withHeaderComments(var65);
    org.apache.commons.csv.CSVFormat var68 = var66.withSkipHeaderRecord(false);
    java.lang.Character var69 = var66.getCommentMarker();
    java.lang.String[] var71 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var72 = var66.withHeader(var71);
    org.apache.commons.csv.CSVFormat var73 = var57.withHeader(var71);
    java.lang.String var74 = var51.format((java.lang.Object[])var71);
    org.apache.commons.csv.CSVFormat var75 = var17.withHeader(var71);
    boolean var76 = var17.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test145");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    java.lang.String[] var4 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var5 = var1.withHeader(var4);
    org.apache.commons.csv.CSVFormat var7 = var1.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var9 = var7.withIgnoreHeaderCase(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var11 = var9.withCommentMarker((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test146");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("", var4);
    boolean var12 = var11.isClosed();
    java.util.List var13 = var11.getRecords();
    long var14 = var11.getRecordNumber();
    java.util.Map var15 = var11.getHeaderMap();
    java.util.Iterator var16 = var11.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test147");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    java.lang.String var6 = var3.getNullString();
    org.apache.commons.csv.CSVFormat var8 = var3.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator("aa");
    boolean var11 = var10.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var10.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var15 = var10.withSkipHeaderRecord(false);
    java.lang.Character var16 = var10.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + '#'+ "'", var16.equals('#'));

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test148");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var9.withRecordSeparator('#');
    java.lang.Character var14 = var9.getCommentMarker();
    java.lang.String[] var15 = var9.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test149");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var3.withEscape(' ');
    org.apache.commons.csv.CSVFormat var7 = var3.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    java.lang.Object[] var13 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var14 = var11.withHeaderComments(var13);
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord(false);
    java.lang.Character var17 = var14.getCommentMarker();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var14.withHeader(var19);
    boolean var21 = var14.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var22 = var14.withIgnoreEmptyLines();
    boolean var23 = var22.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var25.withSkipHeaderRecord();
    java.lang.String[] var28 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var29 = var25.withHeader(var28);
    org.apache.commons.csv.CSVFormat var30 = var22.withHeader(var28);
    org.apache.commons.csv.CSVFormat var31 = var3.withHeaderComments((java.lang.Object[])var28);
    java.lang.String[] var32 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var36 = var34.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var38 = var34.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var40 = var38.withAllowMissingColumnNames(false);
    boolean var41 = var40.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var43 = var40.withQuote(' ');
    org.apache.commons.csv.CSVFormat var45 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var47 = var45.withAllowMissingColumnNames(true);
    java.lang.Object[] var49 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var50 = var47.withHeaderComments(var49);
    org.apache.commons.csv.CSVFormat var52 = var50.withSkipHeaderRecord(false);
    java.lang.Character var53 = var50.getCommentMarker();
    java.lang.String[] var55 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var56 = var50.withHeader(var55);
    java.lang.String var57 = var56.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var59 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var61 = var59.withAllowMissingColumnNames(true);
    java.lang.Object[] var63 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var64 = var61.withHeaderComments(var63);
    org.apache.commons.csv.CSVFormat var66 = var64.withSkipHeaderRecord(false);
    java.lang.Character var67 = var64.getCommentMarker();
    java.lang.String[] var69 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var70 = var64.withHeader(var69);
    org.apache.commons.csv.CSVFormat var71 = var56.withHeaderComments((java.lang.Object[])var69);
    org.apache.commons.csv.CSVFormat var73 = var71.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var75 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var76 = var75.withSkipHeaderRecord();
    java.lang.String[] var78 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var79 = var75.withHeader(var78);
    org.apache.commons.csv.CSVFormat var80 = var73.withHeaderComments((java.lang.Object[])var78);
    boolean var81 = var73.isEscapeCharacterSet();
    java.lang.String[] var82 = var73.getHeaderComments();
    org.apache.commons.csv.CSVFormat var83 = var40.withHeader(var82);
    org.apache.commons.csv.CSVFormat var84 = var3.withHeader(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test150");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    boolean var3 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var7 = var1.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var9 = var1.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var11 = var1.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var13 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var28 = var26.withQuote('a');
    org.apache.commons.csv.CSVFormat var29 = var28.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var31 = var28.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var37 = var35.withAllowMissingColumnNames(true);
    java.lang.Object[] var39 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var40 = var37.withHeaderComments(var39);
    org.apache.commons.csv.CSVFormat var42 = var40.withSkipHeaderRecord(false);
    java.lang.Character var43 = var40.getCommentMarker();
    java.lang.String[] var45 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var46 = var40.withHeader(var45);
    boolean var47 = var40.getIgnoreSurroundingSpaces();
    java.lang.Character var48 = var40.getCommentMarker();
    org.apache.commons.csv.QuoteMode var49 = var40.getQuoteMode();
    boolean var50 = var40.isNullStringSet();
    org.apache.commons.csv.CSVFormat var52 = var40.withEscape('#');
    java.lang.String[] var53 = var40.getHeaderComments();
    org.apache.commons.csv.CSVFormat var54 = var31.withHeader(var53);
    org.apache.commons.csv.CSVFormat var55 = var1.withHeaderComments((java.lang.Object[])var53);
    org.apache.commons.csv.CSVFormat var57 = var55.withQuote((java.lang.Character)' ');
    java.lang.String var58 = var57.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "Delimiter=<4> QuoteChar=< > SkipHeaderRecord:false HeaderComments:[0]"+ "'", var58.equals("Delimiter=<4> QuoteChar=< > SkipHeaderRecord:false HeaderComments:[0]"));

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test151");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    java.lang.String var5 = var4.getNullString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var11 = var4.withNullString("Delimiter=<4> EmptyLines:ignored SkipHeaderRecord:true HeaderComments:[0]");
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var15 = var13.withAllowMissingColumnNames(true);
    java.lang.Object[] var17 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var18 = var15.withHeaderComments(var17);
    org.apache.commons.csv.CSVFormat var20 = var18.withSkipHeaderRecord(false);
    java.lang.Character var21 = var18.getCommentMarker();
    java.lang.String[] var23 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var24 = var18.withHeader(var23);
    org.apache.commons.csv.CSVFormat var26 = var18.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var27 = var26.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var29 = var27.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var31 = var29.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var33 = var29.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var35 = var33.withNullString("Delimiter=<4> CommentStart=<#> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var37 = var33.withQuote('a');
    org.apache.commons.csv.CSVFormat var39 = var37.withIgnoreSurroundingSpaces(true);
    boolean var40 = var4.equals((java.lang.Object)var39);
    org.apache.commons.csv.CSVFormat var42 = var4.withIgnoreSurroundingSpaces(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test152");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var12.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var31 = var29.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var35 = var33.withQuote(' ');
    java.lang.String var36 = var33.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "Delimiter=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0] Header:[]"+ "'", var36.equals("Delimiter=<4> RecordSeparator=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0] Header:[]"));

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test153");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    boolean var7 = var6.isCommentMarkerSet();
    java.lang.Character var8 = var6.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var12 = var6.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test154");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    org.apache.commons.csv.CSVFormat var15 = var7.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = var15.withSkipHeaderRecord();
    boolean var17 = var15.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var19 = var15.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var21 = var15.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVParser var22 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false", var15);
    boolean var23 = var22.isClosed();
    long var24 = var22.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0L);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test155");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var1.withRecordSeparator(' ');
    boolean var7 = var1.getIgnoreSurroundingSpaces();
    boolean var8 = var1.getAllowMissingColumnNames();
    boolean var9 = var1.isEscapeCharacterSet();
    java.lang.String[] var10 = var1.getHeader();
    java.lang.Character var11 = var1.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test156");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var3.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator('a');
    java.lang.Character var8 = var5.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test157");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var19 = var17.withIgnoreSurroundingSpaces(false);
    boolean var20 = var19.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = var19.withRecordSeparator("aALL4MINIMAL4NON_NUMERIC4NONEa");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test158");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    boolean var7 = var6.isCommentMarkerSet();
    java.lang.Character var8 = var6.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var14 = var12.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var16 = var12.withIgnoreEmptyLines(false);
    boolean var17 = var16.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var19 = var16.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var20 = var19.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.String[] var23 = var20.getHeaderComments();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var27 = var25.withAllowMissingColumnNames(true);
    java.lang.Object[] var29 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var30 = var27.withHeaderComments(var29);
    org.apache.commons.csv.CSVFormat var31 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.QuoteMode var32 = var30.getQuoteMode();
    boolean var33 = var30.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var37 = var35.withAllowMissingColumnNames(true);
    java.lang.Object[] var39 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var40 = var37.withHeaderComments(var39);
    org.apache.commons.csv.CSVFormat var42 = var40.withSkipHeaderRecord(false);
    java.lang.Character var43 = var40.getCommentMarker();
    java.lang.String[] var45 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var46 = var40.withHeader(var45);
    java.lang.String var47 = var46.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var51 = var49.withAllowMissingColumnNames(true);
    java.lang.Object[] var53 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var54 = var51.withHeaderComments(var53);
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord(false);
    java.lang.Character var57 = var54.getCommentMarker();
    java.lang.String[] var59 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var60 = var54.withHeader(var59);
    org.apache.commons.csv.CSVFormat var61 = var46.withHeaderComments((java.lang.Object[])var59);
    java.lang.String var62 = var30.format((java.lang.Object[])var59);
    java.lang.String var63 = var20.format((java.lang.Object[])var59);
    org.apache.commons.csv.CSVFormat var64 = var20.withAllowMissingColumnNames();
    boolean var65 = var6.equals((java.lang.Object)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + ""+ "'", var62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test159");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var14 = var12.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var12.withAllowMissingColumnNames();
    boolean var16 = var12.isEscapeCharacterSet();
    org.apache.commons.csv.CSVParser var17 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]", var12);
    org.apache.commons.csv.CSVFormat var18 = var12.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test160");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var19 = var17.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var21 = var17.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var23 = var21.withNullString("Delimiter=<4> CommentStart=<#> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var25 = var21.withQuote('a');
    org.apache.commons.csv.CSVFormat var27 = var25.withIgnoreSurroundingSpaces(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var29 = var25.withCommentMarker('a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test161");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    java.util.Iterator var7 = var5.iterator();
    java.util.Map var8 = var5.getHeaderMap();
    long var9 = var5.getCurrentLineNumber();
    boolean var10 = var5.isClosed();
    long var11 = var5.getCurrentLineNumber();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var12 = var5.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test162");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    var5.close();
    java.util.Iterator var8 = var5.iterator();
    var5.close();
    java.util.Map var10 = var5.getHeaderMap();
    boolean var11 = var5.isClosed();
    boolean var12 = var5.isClosed();
    long var13 = var5.getRecordNumber();
    boolean var14 = var5.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test163");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    java.lang.String var5 = var4.getNullString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var9 = var4.withSkipHeaderRecord(false);
    java.lang.Character var10 = var9.getCommentMarker();
    org.apache.commons.csv.CSVFormat var12 = var9.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var15 = var12.withEscape('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 'a'+ "'", var10.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test164");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var7 = var3.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var9 = var3.withAllowMissingColumnNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test165");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var8 = var2.withEscape('a');
    org.apache.commons.csv.CSVFormat var10 = var8.withDelimiter('#');
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("hi!", var10);
    org.apache.commons.csv.CSVFormat var12 = var10.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var10.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var16 = var14.withEscape((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test166");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var14 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var29 = var21.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    java.lang.Object[] var35 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var36 = var33.withHeaderComments(var35);
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord(false);
    java.lang.Character var39 = var36.getCommentMarker();
    java.lang.String[] var41 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var42 = var36.withHeader(var41);
    org.apache.commons.csv.CSVFormat var43 = var29.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = var14.withHeader(var41);
    java.lang.String var45 = var14.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var47 = var14.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var49 = var47.withIgnoreEmptyLines(true);
    boolean var50 = var47.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test167");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var5.getHeaderComments();
    java.lang.String var9 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var5.withQuote(' ');
    boolean var12 = var11.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var11.withDelimiter('4');
    boolean var15 = var11.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = var11.withIgnoreEmptyLines(true);
    boolean var18 = var11.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test168");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines();
    boolean var15 = var14.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var17.withSkipHeaderRecord();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var17.withHeader(var20);
    org.apache.commons.csv.CSVFormat var22 = var14.withHeader(var20);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var24.withAllowMissingColumnNames(true);
    java.lang.Object[] var28 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var29 = var26.withHeaderComments(var28);
    boolean var30 = var29.isCommentMarkerSet();
    java.lang.Character var31 = var29.getEscapeCharacter();
    java.lang.String var32 = var29.getNullString();
    org.apache.commons.csv.CSVFormat var34 = var29.withEscape('a');
    org.apache.commons.csv.CSVFormat var35 = var29.withIgnoreEmptyLines();
    boolean var36 = var22.equals((java.lang.Object)var35);
    org.apache.commons.csv.CSVFormat var38 = var35.withIgnoreEmptyLines(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test169");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var5.getHeaderComments();
    java.lang.String var9 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var5.withQuote(' ');
    boolean var12 = var11.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var11.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var16 = var11.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var18 = var11.withIgnoreEmptyLines(true);
    char var19 = var18.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == '4');

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test170");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var35 = var33.withRecordSeparator('a');
    java.lang.String var36 = var33.getNullString();
    org.apache.commons.csv.CSVFormat var38 = var33.withCommentMarker((java.lang.Character)'a');
    boolean var39 = var38.getSkipHeaderRecord();
    java.lang.String var40 = var38.getNullString();
    org.apache.commons.csv.CSVFormat var42 = var38.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var46 = var44.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var48 = var46.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var49 = var46.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var53 = var51.withAllowMissingColumnNames(true);
    java.lang.Object[] var55 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var56 = var53.withHeaderComments(var55);
    org.apache.commons.csv.CSVFormat var58 = var56.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var59 = var56.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var61 = var59.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var63 = var59.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var65 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var67 = var65.withAllowMissingColumnNames(true);
    java.lang.Object[] var69 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var70 = var67.withHeaderComments(var69);
    org.apache.commons.csv.CSVFormat var72 = var70.withSkipHeaderRecord(false);
    java.lang.Character var73 = var70.getCommentMarker();
    java.lang.String[] var75 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var76 = var70.withHeader(var75);
    org.apache.commons.csv.CSVFormat var78 = var70.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var80 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var82 = var80.withAllowMissingColumnNames(true);
    java.lang.Object[] var84 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var85 = var82.withHeaderComments(var84);
    org.apache.commons.csv.CSVFormat var87 = var85.withSkipHeaderRecord(false);
    java.lang.Character var88 = var85.getCommentMarker();
    java.lang.String[] var90 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var91 = var85.withHeader(var90);
    org.apache.commons.csv.CSVFormat var92 = var78.withHeader(var90);
    org.apache.commons.csv.CSVFormat var93 = var63.withHeaderComments((java.lang.Object[])var90);
    org.apache.commons.csv.CSVFormat var94 = var49.withHeader(var90);
    org.apache.commons.csv.CSVFormat var95 = var42.withHeader(var90);
    java.lang.String var96 = var29.format((java.lang.Object[])var90);
    boolean var97 = var29.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var99 = var29.withEscape((java.lang.Character)' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + ""+ "'", var96.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test171");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.String[] var5 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var7 = var2.withCommentMarker('a');
    org.apache.commons.csv.CSVParser var8 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]", var7);
    boolean var9 = var7.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test172");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote('a');
    org.apache.commons.csv.CSVFormat var15 = var14.withIgnoreEmptyLines();
    boolean var16 = var15.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = var15.withRecordSeparator("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]");
    boolean var19 = var18.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test173");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var7 = var5.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    java.lang.Object[] var13 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var14 = var11.withHeaderComments(var13);
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord(false);
    java.lang.Character var17 = var14.getCommentMarker();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var14.withHeader(var19);
    org.apache.commons.csv.CSVFormat var22 = var14.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var23 = var22.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var25 = var23.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var29 = var27.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var31 = var29.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    boolean var34 = var31.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(true);
    java.lang.Object[] var40 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var41 = var38.withHeaderComments(var40);
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var44 = var41.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var46 = var44.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var48 = var46.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var50 = var48.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var54 = var52.withAllowMissingColumnNames(true);
    java.lang.Object[] var56 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var57 = var54.withHeaderComments(var56);
    org.apache.commons.csv.CSVFormat var59 = var57.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var61 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var63 = var61.withAllowMissingColumnNames(true);
    java.lang.Object[] var65 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var66 = var63.withHeaderComments(var65);
    org.apache.commons.csv.CSVFormat var68 = var66.withSkipHeaderRecord(false);
    java.lang.Character var69 = var66.getCommentMarker();
    java.lang.String[] var71 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var72 = var66.withHeader(var71);
    org.apache.commons.csv.CSVFormat var74 = var66.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var76 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var78 = var76.withAllowMissingColumnNames(true);
    java.lang.Object[] var80 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var81 = var78.withHeaderComments(var80);
    org.apache.commons.csv.CSVFormat var83 = var81.withSkipHeaderRecord(false);
    java.lang.Character var84 = var81.getCommentMarker();
    java.lang.String[] var86 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var87 = var81.withHeader(var86);
    org.apache.commons.csv.CSVFormat var88 = var74.withHeader(var86);
    java.lang.String var89 = var57.format((java.lang.Object[])var86);
    org.apache.commons.csv.CSVFormat var90 = var48.withHeaderComments((java.lang.Object[])var86);
    java.lang.String var91 = var31.format((java.lang.Object[])var86);
    org.apache.commons.csv.CSVFormat var92 = var25.withHeader(var86);
    org.apache.commons.csv.CSVFormat var93 = var7.withHeader(var86);
    boolean var94 = var93.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "aa"+ "'", var91.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test174");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var17 = var15.withNullString("Delimiter=<4> SkipHeaderRecord:false");
    java.lang.String var18 = var15.toString();
    boolean var19 = var15.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var21 = var15.withQuote((java.lang.Character)'#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Delimiter=<4> QuoteChar=<a> CommentStart=< > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]"+ "'", var18.equals("Delimiter=<4> QuoteChar=<a> CommentStart=< > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test175");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    boolean var12 = var9.getIgnoreHeaderCase();
    java.lang.String[] var13 = var9.getHeader();
    boolean var14 = var9.getIgnoreEmptyLines();
    boolean var15 = var9.isNullStringSet();
    org.apache.commons.csv.QuoteMode var16 = var9.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test176");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    boolean var14 = var7.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var7.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var17 = var7.withRecordSeparator('#');
    boolean var18 = var17.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]", var17);
    long var20 = var19.getRecordNumber();
    boolean var21 = var19.isClosed();
    java.util.List var22 = var19.getRecords();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test177");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    org.apache.commons.csv.CSVFormat var15 = var7.withAllowMissingColumnNames(false);
    java.lang.String var16 = var7.getNullString();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var19 = var18.isNullStringSet();
    org.apache.commons.csv.CSVFormat var21 = var18.withCommentMarker((java.lang.Character)'a');
    java.lang.String var22 = var21.getNullString();
    org.apache.commons.csv.CSVFormat var24 = var21.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var27 = var26.withSkipHeaderRecord();
    java.lang.String[] var29 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var30 = var26.withHeader(var29);
    java.lang.String var31 = var21.format((java.lang.Object[])var29);
    org.apache.commons.csv.CSVFormat var32 = var7.withHeader(var29);
    org.apache.commons.csv.CSVParser var33 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]", var7);
    org.apache.commons.csv.CSVFormat var35 = var7.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var37 = var35.withIgnoreHeaderCase(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test178");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    var5.close();
    java.util.Iterator var8 = var5.iterator();
    var5.close();
    var5.close();
    java.util.Iterator var11 = var5.iterator();
    var5.close();
    boolean var13 = var5.isClosed();
    var5.close();
    java.util.Map var15 = var5.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test179");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var3.withQuote(' ');
    java.lang.String[] var9 = var3.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test180");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    char var5 = var4.getDelimiter();
    org.apache.commons.csv.CSVFormat var7 = var4.withQuote((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var8 = var7.withAllowMissingColumnNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var10 = var7.withEscape('a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test181");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    boolean var7 = var5.isClosed();
    java.util.Iterator var8 = var5.iterator();
    java.util.Iterator var9 = var5.iterator();
    java.util.Map var10 = var5.getHeaderMap();
    long var11 = var5.getCurrentLineNumber();
    long var12 = var5.getRecordNumber();
    boolean var13 = var5.isClosed();
    boolean var14 = var5.isClosed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var15 = var5.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test182");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    boolean var7 = var5.isClosed();
    java.util.Iterator var8 = var5.iterator();
    java.util.Iterator var9 = var5.iterator();
    java.util.Map var10 = var5.getHeaderMap();
    long var11 = var5.getCurrentLineNumber();
    long var12 = var5.getRecordNumber();
    java.util.Iterator var13 = var5.iterator();
    var5.close();
    long var15 = var5.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test183");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    boolean var6 = var5.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    java.lang.Object[] var12 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var13 = var10.withHeaderComments(var12);
    org.apache.commons.csv.CSVFormat var14 = var13.withAllowMissingColumnNames();
    org.apache.commons.csv.QuoteMode var15 = var13.getQuoteMode();
    boolean var16 = var13.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var20 = var18.withAllowMissingColumnNames(true);
    java.lang.Object[] var22 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var23 = var20.withHeaderComments(var22);
    org.apache.commons.csv.CSVFormat var25 = var23.withSkipHeaderRecord(false);
    java.lang.Character var26 = var23.getCommentMarker();
    java.lang.String[] var28 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var29 = var23.withHeader(var28);
    java.lang.String var30 = var29.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var34 = var32.withAllowMissingColumnNames(true);
    java.lang.Object[] var36 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var37 = var34.withHeaderComments(var36);
    org.apache.commons.csv.CSVFormat var39 = var37.withSkipHeaderRecord(false);
    java.lang.Character var40 = var37.getCommentMarker();
    java.lang.String[] var42 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var43 = var37.withHeader(var42);
    org.apache.commons.csv.CSVFormat var44 = var29.withHeaderComments((java.lang.Object[])var42);
    java.lang.String var45 = var13.format((java.lang.Object[])var42);
    org.apache.commons.csv.CSVFormat var46 = var5.withHeaderComments((java.lang.Object[])var42);
    org.apache.commons.csv.CSVFormat var47 = var5.withAllowMissingColumnNames();
    java.lang.String[] var48 = var5.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test184");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    java.lang.String var5 = var4.getNullString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var9 = var4.withSkipHeaderRecord(false);
    java.lang.Character var10 = var9.getCommentMarker();
    org.apache.commons.csv.CSVFormat var12 = var9.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var13 = var12.withIgnoreSurroundingSpaces();
    java.lang.String var14 = var13.getNullString();
    java.lang.String var15 = var13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 'a'+ "'", var10.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Delimiter=<4> Escape=< > CommentStart=<a> SurroundingSpaces:ignored SkipHeaderRecord:false"+ "'", var15.equals("Delimiter=<4> Escape=< > CommentStart=<a> SurroundingSpaces:ignored SkipHeaderRecord:false"));

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test185");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var9 = var1.withNullString("");
    boolean var10 = var1.isNullStringSet();
    char var11 = var1.getDelimiter();
    boolean var12 = var1.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var1.withQuote(' ');
    org.apache.commons.csv.CSVFormat var16 = var14.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var17 = var16.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord(true);
    java.lang.String var20 = var17.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test186");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    boolean var8 = var5.isCommentMarkerSet();
    boolean var9 = var5.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var11 = var5.withDelimiter('#');
    boolean var12 = var5.getIgnoreHeaderCase();
    boolean var13 = var5.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test187");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withQuote(' ');
    java.lang.Character var16 = var15.getEscapeCharacter();
    boolean var17 = var15.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test188");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var4.withQuote(' ');
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("#", var9);
    java.util.Iterator var11 = var10.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test189");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    boolean var6 = var1.getSkipHeaderRecord();
    java.lang.String[] var7 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var9 = var1.withNullString("0");
    boolean var10 = var1.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test190");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.QuoteMode var13 = var6.getQuoteMode();
    boolean var14 = var6.isNullStringSet();
    boolean var15 = var6.isNullStringSet();
    org.apache.commons.csv.CSVFormat var16 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var18 = var6.withRecordSeparator('4');
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var22 = var20.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var24 = var20.withRecordSeparator("hi!");
    boolean var25 = var24.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var27 = var24.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var31 = var29.withAllowMissingColumnNames(true);
    java.lang.Object[] var33 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var34 = var31.withHeaderComments(var33);
    org.apache.commons.csv.CSVFormat var36 = var34.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var37 = var34.withIgnoreEmptyLines();
    boolean var38 = var37.isNullStringSet();
    java.lang.String[] var39 = var37.getHeader();
    java.lang.String[] var40 = var37.getHeaderComments();
    org.apache.commons.csv.CSVFormat var41 = var27.withHeaderComments((java.lang.Object[])var40);
    java.lang.String var42 = var18.format((java.lang.Object[])var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "04"+ "'", var42.equals("04"));

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test191");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    boolean var7 = var6.isCommentMarkerSet();
    java.lang.Character var8 = var6.getEscapeCharacter();
    java.lang.String var9 = var6.getNullString();
    boolean var10 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.QuoteMode var11 = var6.getQuoteMode();
    java.lang.Character var12 = var6.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = var14.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var18 = var14.withQuote('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test192");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var4 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape('#');
    boolean var7 = var4.isCommentMarkerSet();
    java.lang.String[] var8 = var4.getHeaderComments();
    org.apache.commons.csv.CSVFormat var10 = var4.withDelimiter(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test193");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var3.withRecordSeparator("hi!");
    boolean var9 = var3.isCommentMarkerSet();
    java.lang.String var10 = var3.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test194");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    boolean var4 = var1.isNullStringSet();
    boolean var5 = var1.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test195");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withAllowMissingColumnNames(true);
    java.lang.Object[] var21 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var22 = var19.withHeaderComments(var21);
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var28 = var26.withAllowMissingColumnNames(true);
    java.lang.Object[] var30 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var31 = var28.withHeaderComments(var30);
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord(false);
    java.lang.Character var34 = var31.getCommentMarker();
    java.lang.String[] var36 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var37 = var31.withHeader(var36);
    org.apache.commons.csv.CSVFormat var39 = var31.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var43 = var41.withAllowMissingColumnNames(true);
    java.lang.Object[] var45 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var46 = var43.withHeaderComments(var45);
    org.apache.commons.csv.CSVFormat var48 = var46.withSkipHeaderRecord(false);
    java.lang.Character var49 = var46.getCommentMarker();
    java.lang.String[] var51 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var52 = var46.withHeader(var51);
    org.apache.commons.csv.CSVFormat var53 = var39.withHeader(var51);
    java.lang.String var54 = var22.format((java.lang.Object[])var51);
    org.apache.commons.csv.CSVFormat var55 = var13.withHeaderComments((java.lang.Object[])var51);
    boolean var56 = var55.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var57 = var55.withIgnoreEmptyLines();
    java.lang.Character var58 = var55.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + ""+ "'", var54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ' '+ "'", var58.equals(' '));

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test196");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withQuote(' ');
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var21 = var17.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var23 = var17.withEscape('a');
    org.apache.commons.csv.CSVFormat var25 = var17.withNullString("");
    boolean var26 = var12.equals((java.lang.Object)var25);
    java.lang.String var27 = var25.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test197");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines(true);
    java.lang.String[] var16 = var15.getHeader();
    org.apache.commons.csv.CSVFormat var18 = var15.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var20 = var18.withQuote('a');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var22 = var20.withCommentMarker('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test198");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var1.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var8 = var6.withDelimiter('a');
    java.lang.String[] var9 = var8.getHeader();
    org.apache.commons.csv.CSVFormat var11 = var8.withIgnoreHeaderCase(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test199");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    org.apache.commons.csv.CSVFormat var15 = var7.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVParser var16 = org.apache.commons.csv.CSVParser.parse("aa", var7);
    org.apache.commons.csv.QuoteMode var17 = var7.getQuoteMode();
    org.apache.commons.csv.CSVFormat var18 = var7.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var20 = var18.withAllowMissingColumnNames(false);
    org.apache.commons.csv.QuoteMode var21 = var18.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test200");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    java.lang.String var6 = var3.getNullString();
    org.apache.commons.csv.CSVFormat var7 = var3.withSkipHeaderRecord();
    boolean var8 = var7.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test201");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var5 = var3.withQuote(' ');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'#');
    boolean var8 = var7.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator('a');
    java.lang.String var15 = var12.getNullString();
    org.apache.commons.csv.CSVFormat var17 = var12.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames(true);
    java.lang.Object[] var23 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var24 = var21.withHeaderComments(var23);
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord(false);
    java.lang.Character var27 = var24.getCommentMarker();
    java.lang.String[] var29 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var30 = var24.withHeader(var29);
    org.apache.commons.csv.CSVFormat var32 = var24.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var36 = var34.withAllowMissingColumnNames(true);
    java.lang.Object[] var38 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var39 = var36.withHeaderComments(var38);
    org.apache.commons.csv.CSVFormat var41 = var39.withSkipHeaderRecord(false);
    java.lang.Character var42 = var39.getCommentMarker();
    java.lang.String[] var44 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var45 = var39.withHeader(var44);
    org.apache.commons.csv.CSVFormat var46 = var32.withHeader(var44);
    org.apache.commons.csv.CSVFormat var47 = var17.withHeader(var44);
    org.apache.commons.csv.CSVFormat var48 = var7.withHeader(var44);
    org.apache.commons.csv.CSVFormat var50 = var48.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var52 = var48.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test202");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    java.lang.String var6 = var3.getNullString();
    org.apache.commons.csv.CSVFormat var8 = var3.withCommentMarker((java.lang.Character)'a');
    boolean var9 = var8.getSkipHeaderRecord();
    boolean var10 = var8.getSkipHeaderRecord();
    boolean var11 = var8.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test203");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var13.withHeaderComments((java.lang.Object[])var26);
    org.apache.commons.csv.CSVFormat var29 = var13.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVParser var30 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> QuoteChar=< > RecordSeparator=<hi!> SkipHeaderRecord:false", var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test204");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var3.withEscape(' ');
    org.apache.commons.csv.CSVFormat var7 = var3.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    java.lang.Object[] var13 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var14 = var11.withHeaderComments(var13);
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord(false);
    java.lang.Character var17 = var14.getCommentMarker();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var14.withHeader(var19);
    boolean var21 = var14.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var22 = var14.withIgnoreEmptyLines();
    boolean var23 = var22.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var25.withSkipHeaderRecord();
    java.lang.String[] var28 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var29 = var25.withHeader(var28);
    org.apache.commons.csv.CSVFormat var30 = var22.withHeader(var28);
    org.apache.commons.csv.CSVFormat var31 = var3.withHeaderComments((java.lang.Object[])var28);
    java.lang.String[] var32 = var3.getHeader();
    java.lang.Character var33 = var3.getQuoteCharacter();
    boolean var34 = var3.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.QuoteMode var35 = var3.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test205");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    java.lang.String[] var4 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var5 = var1.withHeader(var4);
    boolean var6 = var5.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var8 = var5.withDelimiter('4');
    org.apache.commons.csv.QuoteMode var9 = var8.getQuoteMode();
    boolean var10 = var8.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test206");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    java.lang.String var5 = var4.getNullString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var9 = var4.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var11 = var4.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var13 = var4.withIgnoreEmptyLines(true);
    boolean var14 = var13.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test207");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    java.util.Iterator var7 = var5.iterator();
    java.util.Map var8 = var5.getHeaderMap();
    long var9 = var5.getCurrentLineNumber();
    boolean var10 = var5.isClosed();
    long var11 = var5.getCurrentLineNumber();
    long var12 = var5.getRecordNumber();
    java.util.Iterator var13 = var5.iterator();
    java.util.Iterator var14 = var5.iterator();
    long var15 = var5.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test208");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(false);
    java.lang.String var30 = var27.toString();
    java.lang.String var31 = var27.toString();
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var35 = var33.withAllowMissingColumnNames(true);
    java.lang.Object[] var37 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var38 = var35.withHeaderComments(var37);
    org.apache.commons.csv.CSVFormat var40 = var38.withSkipHeaderRecord(false);
    java.lang.Character var41 = var38.getCommentMarker();
    java.lang.String[] var43 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var44 = var38.withHeader(var43);
    boolean var45 = var38.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var46 = var38.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var48 = var38.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var52 = var50.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var54 = var50.withIgnoreEmptyLines(false);
    boolean var55 = var54.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var59 = var57.withAllowMissingColumnNames(true);
    java.lang.Object[] var61 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var62 = var59.withHeaderComments(var61);
    org.apache.commons.csv.CSVFormat var63 = var62.withAllowMissingColumnNames();
    org.apache.commons.csv.QuoteMode var64 = var62.getQuoteMode();
    boolean var65 = var62.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var67 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var69 = var67.withAllowMissingColumnNames(true);
    java.lang.Object[] var71 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var72 = var69.withHeaderComments(var71);
    org.apache.commons.csv.CSVFormat var74 = var72.withSkipHeaderRecord(false);
    java.lang.Character var75 = var72.getCommentMarker();
    java.lang.String[] var77 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var78 = var72.withHeader(var77);
    java.lang.String var79 = var78.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var81 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var83 = var81.withAllowMissingColumnNames(true);
    java.lang.Object[] var85 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var86 = var83.withHeaderComments(var85);
    org.apache.commons.csv.CSVFormat var88 = var86.withSkipHeaderRecord(false);
    java.lang.Character var89 = var86.getCommentMarker();
    java.lang.String[] var91 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var92 = var86.withHeader(var91);
    org.apache.commons.csv.CSVFormat var93 = var78.withHeaderComments((java.lang.Object[])var91);
    java.lang.String var94 = var62.format((java.lang.Object[])var91);
    org.apache.commons.csv.CSVFormat var95 = var54.withHeaderComments((java.lang.Object[])var91);
    org.apache.commons.csv.CSVFormat var96 = var38.withHeader(var91);
    java.lang.String var97 = var27.format((java.lang.Object[])var91);
    java.lang.Character var98 = var27.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]"+ "'", var30.equals("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]"+ "'", var31.equals("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + ""+ "'", var94.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + ""+ "'", var97.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test209");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = var13.withQuote(' ');
    org.apache.commons.csv.CSVFormat var18 = var16.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var20 = var16.withEscape('a');
    org.apache.commons.csv.CSVFormat var21 = var20.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var22 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]", var20);
    long var23 = var22.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0L);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test210");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVParser var8 = org.apache.commons.csv.CSVParser.parse("hi!", var7);
    java.util.Iterator var9 = var8.iterator();
    long var10 = var8.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test211");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.QuoteMode var13 = var6.getQuoteMode();
    boolean var14 = var6.isNullStringSet();
    org.apache.commons.csv.CSVFormat var16 = var6.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var18 = var16.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var20 = var16.withNullString("Delimiter=<4> CommentStart=<a> SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test212");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var7 = var5.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    java.lang.Object[] var13 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var14 = var11.withHeaderComments(var13);
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord(false);
    java.lang.Character var17 = var14.getCommentMarker();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var14.withHeader(var19);
    org.apache.commons.csv.CSVFormat var22 = var14.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var23 = var22.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var25 = var23.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var29 = var27.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var31 = var29.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    boolean var34 = var31.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(true);
    java.lang.Object[] var40 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var41 = var38.withHeaderComments(var40);
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var44 = var41.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var46 = var44.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var48 = var46.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var50 = var48.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var54 = var52.withAllowMissingColumnNames(true);
    java.lang.Object[] var56 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var57 = var54.withHeaderComments(var56);
    org.apache.commons.csv.CSVFormat var59 = var57.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var61 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var63 = var61.withAllowMissingColumnNames(true);
    java.lang.Object[] var65 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var66 = var63.withHeaderComments(var65);
    org.apache.commons.csv.CSVFormat var68 = var66.withSkipHeaderRecord(false);
    java.lang.Character var69 = var66.getCommentMarker();
    java.lang.String[] var71 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var72 = var66.withHeader(var71);
    org.apache.commons.csv.CSVFormat var74 = var66.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var76 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var78 = var76.withAllowMissingColumnNames(true);
    java.lang.Object[] var80 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var81 = var78.withHeaderComments(var80);
    org.apache.commons.csv.CSVFormat var83 = var81.withSkipHeaderRecord(false);
    java.lang.Character var84 = var81.getCommentMarker();
    java.lang.String[] var86 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var87 = var81.withHeader(var86);
    org.apache.commons.csv.CSVFormat var88 = var74.withHeader(var86);
    java.lang.String var89 = var57.format((java.lang.Object[])var86);
    org.apache.commons.csv.CSVFormat var90 = var48.withHeaderComments((java.lang.Object[])var86);
    java.lang.String var91 = var31.format((java.lang.Object[])var86);
    org.apache.commons.csv.CSVFormat var92 = var25.withHeader(var86);
    org.apache.commons.csv.CSVFormat var93 = var7.withHeader(var86);
    boolean var94 = var93.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "aa"+ "'", var91.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test213");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var4.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVParser var7 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0] Header:[]", var4);
    org.apache.commons.csv.CSVFormat var9 = var4.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test214");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    char var5 = var4.getDelimiter();
    org.apache.commons.csv.CSVFormat var7 = var4.withQuote((java.lang.Character)'#');
    java.lang.String var8 = var7.toString();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.Object[] var15 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var16 = var13.withHeaderComments(var15);
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var21 = var19.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var23 = var21.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var25 = var23.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(true);
    java.lang.Object[] var31 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var32 = var29.withHeaderComments(var31);
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(true);
    java.lang.Object[] var40 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var41 = var38.withHeaderComments(var40);
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord(false);
    java.lang.Character var44 = var41.getCommentMarker();
    java.lang.String[] var46 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var47 = var41.withHeader(var46);
    org.apache.commons.csv.CSVFormat var49 = var41.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var53 = var51.withAllowMissingColumnNames(true);
    java.lang.Object[] var55 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var56 = var53.withHeaderComments(var55);
    org.apache.commons.csv.CSVFormat var58 = var56.withSkipHeaderRecord(false);
    java.lang.Character var59 = var56.getCommentMarker();
    java.lang.String[] var61 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var62 = var56.withHeader(var61);
    org.apache.commons.csv.CSVFormat var63 = var49.withHeader(var61);
    java.lang.String var64 = var32.format((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var65 = var23.withHeaderComments((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var66 = var9.withHeaderComments((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var68 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var70 = var68.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var71 = var68.withAllowMissingColumnNames();
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    org.apache.commons.csv.CSVFormat var73 = var66.withHeaderComments(var72);
    java.lang.Character var74 = var66.getQuoteCharacter();
    boolean var75 = var66.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Delimiter=<4> QuoteChar=<#> CommentStart=<a> SkipHeaderRecord:false"+ "'", var8.equals("Delimiter=<4> QuoteChar=<#> CommentStart=<a> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + '#'+ "'", var74.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test215");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var6.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var17 = var6.withQuote('a');
    java.lang.String[] var18 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var20 = var6.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var22 = var6.withRecordSeparator("Delimiter=<#> SkipHeaderRecord:false HeaderComments:[0] Header:[]");
    java.lang.Character var23 = var22.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test216");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var7 = var6.withAllowMissingColumnNames();
    boolean var8 = var7.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    java.lang.Object[] var14 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments(var14);
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord(false);
    java.lang.Character var18 = var15.getCommentMarker();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var15.withHeader(var20);
    java.lang.String var22 = var21.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var24.withAllowMissingColumnNames(true);
    java.lang.Object[] var28 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var29 = var26.withHeaderComments(var28);
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord(false);
    java.lang.Character var32 = var29.getCommentMarker();
    java.lang.String[] var34 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var35 = var29.withHeader(var34);
    org.apache.commons.csv.CSVFormat var36 = var21.withHeaderComments((java.lang.Object[])var34);
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var41 = var40.withSkipHeaderRecord();
    java.lang.String[] var43 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var44 = var40.withHeader(var43);
    org.apache.commons.csv.CSVFormat var45 = var38.withHeaderComments((java.lang.Object[])var43);
    org.apache.commons.csv.CSVFormat var46 = var7.withHeaderComments((java.lang.Object[])var43);
    java.lang.Character var47 = var7.getCommentMarker();
    org.apache.commons.csv.CSVFormat var48 = var7.withSkipHeaderRecord();
    boolean var49 = var7.isQuoteCharacterSet();
    java.lang.String var50 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]"+ "'", var50.equals("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]"));

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test217");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    java.lang.Object[] var14 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments(var14);
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord(false);
    java.lang.Character var18 = var15.getCommentMarker();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var15.withHeader(var20);
    org.apache.commons.csv.CSVFormat var23 = var15.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var27 = var25.withAllowMissingColumnNames(true);
    java.lang.Object[] var29 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var30 = var27.withHeaderComments(var29);
    org.apache.commons.csv.CSVFormat var32 = var30.withSkipHeaderRecord(false);
    java.lang.Character var33 = var30.getCommentMarker();
    java.lang.String[] var35 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var36 = var30.withHeader(var35);
    org.apache.commons.csv.CSVFormat var37 = var23.withHeader(var35);
    java.lang.String var38 = var6.format((java.lang.Object[])var35);
    org.apache.commons.csv.CSVFormat var40 = var6.withSkipHeaderRecord(true);
    java.lang.Character var41 = var6.getCommentMarker();
    org.apache.commons.csv.CSVFormat var43 = var6.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var45 = var43.withSkipHeaderRecord(true);
    boolean var46 = var45.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test218");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var9.withQuote('a');
    org.apache.commons.csv.CSVFormat var15 = var9.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = var15.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var19 = var18.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var21 = var19.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var23 = var19.withCommentMarker(' ');
    java.lang.String var24 = var23.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test219");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = var29.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var35 = var33.withAllowMissingColumnNames(true);
    java.lang.String[] var36 = var33.getHeader();
    org.apache.commons.csv.CSVFormat var38 = var33.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var42 = var40.withAllowMissingColumnNames(true);
    java.lang.Object[] var44 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var45 = var42.withHeaderComments(var44);
    org.apache.commons.csv.CSVFormat var47 = var45.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var48 = var45.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var50 = var48.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var52 = var50.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var54 = var52.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var56 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var58 = var56.withAllowMissingColumnNames(true);
    java.lang.Object[] var60 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var61 = var58.withHeaderComments(var60);
    org.apache.commons.csv.CSVFormat var63 = var61.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var65 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var67 = var65.withAllowMissingColumnNames(true);
    java.lang.Object[] var69 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var70 = var67.withHeaderComments(var69);
    org.apache.commons.csv.CSVFormat var72 = var70.withSkipHeaderRecord(false);
    java.lang.Character var73 = var70.getCommentMarker();
    java.lang.String[] var75 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var76 = var70.withHeader(var75);
    org.apache.commons.csv.CSVFormat var78 = var70.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var80 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var82 = var80.withAllowMissingColumnNames(true);
    java.lang.Object[] var84 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var85 = var82.withHeaderComments(var84);
    org.apache.commons.csv.CSVFormat var87 = var85.withSkipHeaderRecord(false);
    java.lang.Character var88 = var85.getCommentMarker();
    java.lang.String[] var90 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var91 = var85.withHeader(var90);
    org.apache.commons.csv.CSVFormat var92 = var78.withHeader(var90);
    java.lang.String var93 = var61.format((java.lang.Object[])var90);
    org.apache.commons.csv.CSVFormat var94 = var52.withHeaderComments((java.lang.Object[])var90);
    org.apache.commons.csv.CSVFormat var95 = var38.withHeaderComments((java.lang.Object[])var90);
    org.apache.commons.csv.CSVFormat var96 = var29.withHeaderComments((java.lang.Object[])var90);
    org.apache.commons.csv.CSVFormat var98 = var96.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var99 = var96.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + ""+ "'", var93.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test220");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    boolean var10 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var12 = var6.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker('a');
    java.lang.String[] var18 = var15.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test221");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var9 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var10 = var1.withIgnoreEmptyLines();
    java.lang.String var11 = var10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=<4> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var11.equals("Delimiter=<4> EmptyLines:ignored SkipHeaderRecord:false"));

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test222");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.String[] var5 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var7 = var2.withCommentMarker('a');
    java.lang.Character var8 = var2.getCommentMarker();
    org.apache.commons.csv.CSVFormat var9 = var2.withSkipHeaderRecord();
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]", var2);
    var10.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var12 = var10.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test223");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    java.lang.String var6 = var1.getNullString();
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var9 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var12 = var11.isNullStringSet();
    org.apache.commons.csv.CSVFormat var14 = var11.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var16 = var14.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var20 = var18.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var22 = var18.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var24 = var18.withEscape('a');
    org.apache.commons.csv.CSVFormat var26 = var18.withNullString("");
    org.apache.commons.csv.CSVFormat var28 = var18.withNullString("hi!");
    org.apache.commons.csv.CSVFormat var30 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var31 = var30.isNullStringSet();
    org.apache.commons.csv.CSVFormat var33 = var30.withNullString("");
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var37 = var35.withAllowMissingColumnNames(true);
    java.lang.Object[] var39 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var40 = var37.withHeaderComments(var39);
    org.apache.commons.csv.CSVFormat var42 = var40.withSkipHeaderRecord(false);
    java.lang.Character var43 = var40.getCommentMarker();
    java.lang.String[] var45 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var46 = var40.withHeader(var45);
    java.lang.String var47 = var46.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var51 = var49.withAllowMissingColumnNames(true);
    java.lang.Object[] var53 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var54 = var51.withHeaderComments(var53);
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord(false);
    java.lang.Character var57 = var54.getCommentMarker();
    java.lang.String[] var59 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var60 = var54.withHeader(var59);
    org.apache.commons.csv.CSVFormat var61 = var46.withHeaderComments((java.lang.Object[])var59);
    java.lang.String var62 = var33.format((java.lang.Object[])var59);
    org.apache.commons.csv.CSVFormat var63 = var18.withHeader(var59);
    java.lang.String var64 = var16.format((java.lang.Object[])var59);
    org.apache.commons.csv.CSVFormat var65 = var9.withHeaderComments((java.lang.Object[])var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + ""+ "'", var62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "a"+ "'", var64.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test224");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var4 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var6 = var4.withCommentMarker('#');
    boolean var7 = var4.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat.Predefined[] var8 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var9 = var4.withHeaderComments((java.lang.Object[])var8);
    org.apache.commons.csv.CSVFormat var10 = var4.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var4.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test225");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var13 = var10.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var15 = var13.withEscape('#');
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withAllowMissingColumnNames(true);
    java.lang.Object[] var21 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var22 = var19.withHeaderComments(var21);
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord(false);
    java.lang.Character var25 = var22.getCommentMarker();
    java.lang.String[] var27 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var28 = var22.withHeader(var27);
    org.apache.commons.csv.CSVFormat var30 = var22.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var34 = var32.withAllowMissingColumnNames(true);
    java.lang.Object[] var36 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var37 = var34.withHeaderComments(var36);
    org.apache.commons.csv.CSVFormat var39 = var37.withSkipHeaderRecord(false);
    java.lang.Character var40 = var37.getCommentMarker();
    java.lang.String[] var42 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var43 = var37.withHeader(var42);
    org.apache.commons.csv.CSVFormat var44 = var30.withHeader(var42);
    java.lang.String var45 = var13.format((java.lang.Object[])var42);
    org.apache.commons.csv.CSVFormat var46 = var4.withHeader(var42);
    boolean var47 = var4.isCommentMarkerSet();
    java.lang.String[] var48 = var4.getHeaderComments();
    java.lang.String[] var49 = var4.getHeader();
    org.apache.commons.csv.CSVParser var50 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> Escape=<a> QuoteChar=< > SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[0] Header:[]", var4);
    org.apache.commons.csv.CSVFormat var52 = var4.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test226");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var18 = var15.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var19 = var18.withSkipHeaderRecord();
    java.lang.Character var20 = var18.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test227");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withRecordSeparator("hi!");
    boolean var7 = var6.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var9 = var6.withQuote(' ');
    boolean var10 = var6.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var12 = var6.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]", var6);
    org.apache.commons.csv.CSVFormat var14 = var6.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test228");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    java.lang.String[] var4 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var5 = var1.withHeader(var4);
    boolean var6 = var5.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var8 = var5.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var9 = var5.withSkipHeaderRecord();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var11 = var5.withQuote((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test229");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    org.apache.commons.csv.CSVFormat var15 = var7.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withAllowMissingColumnNames(true);
    java.lang.Object[] var21 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var22 = var19.withHeaderComments(var21);
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord(false);
    java.lang.Character var25 = var22.getCommentMarker();
    java.lang.String[] var27 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var28 = var22.withHeader(var27);
    org.apache.commons.csv.CSVFormat var29 = var15.withHeader(var27);
    boolean var30 = var29.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var32 = var29.withQuote(' ');
    org.apache.commons.csv.CSVFormat var34 = var29.withAllowMissingColumnNames(true);
    java.lang.String var35 = var29.toString();
    org.apache.commons.csv.CSVFormat var37 = var29.withDelimiter(' ');
    org.apache.commons.csv.CSVParser var38 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false", var37);
    java.util.Iterator var39 = var38.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0] Header:[]"+ "'", var35.equals("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0] Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test230");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    java.lang.String var15 = var6.getNullString();
    boolean var16 = var6.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var18 = var6.withCommentMarker(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test231");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    boolean var6 = var5.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    java.lang.Object[] var12 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var13 = var10.withHeaderComments(var12);
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var16 = var13.withIgnoreEmptyLines();
    boolean var17 = var13.isQuoteCharacterSet();
    java.lang.String var18 = var13.toString();
    org.apache.commons.csv.CSVFormat var20 = var13.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var24 = var22.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var26 = var22.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var28 = var26.withAllowMissingColumnNames(false);
    boolean var29 = var26.isCommentMarkerSet();
    boolean var30 = var26.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var32 = var26.withDelimiter('#');
    java.lang.String var33 = var32.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var35 = var32.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var39 = var37.withAllowMissingColumnNames(true);
    java.lang.Object[] var41 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var42 = var39.withHeaderComments(var41);
    org.apache.commons.csv.CSVFormat var43 = var32.withHeaderComments(var41);
    org.apache.commons.csv.CSVFormat var44 = var13.withHeaderComments(var41);
    org.apache.commons.csv.CSVFormat var45 = var5.withHeaderComments(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]"+ "'", var18.equals("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test232");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var9 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var11 = var1.withNullString("hi!");
    org.apache.commons.csv.CSVFormat var13 = var11.withEscape('#');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test233");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var5.getHeaderComments();
    java.lang.String var9 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var5.withQuote(' ');
    boolean var12 = var11.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var11.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var16 = var11.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var18 = var11.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var20 = var11.withSkipHeaderRecord(true);
    java.lang.String[] var21 = var11.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test234");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = var29.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var35 = var33.withAllowMissingColumnNames(true);
    java.lang.String[] var36 = var33.getHeader();
    org.apache.commons.csv.CSVFormat var38 = var33.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var42 = var40.withAllowMissingColumnNames(true);
    java.lang.Object[] var44 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var45 = var42.withHeaderComments(var44);
    org.apache.commons.csv.CSVFormat var47 = var45.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var48 = var45.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var50 = var48.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var52 = var50.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var54 = var52.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var56 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var58 = var56.withAllowMissingColumnNames(true);
    java.lang.Object[] var60 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var61 = var58.withHeaderComments(var60);
    org.apache.commons.csv.CSVFormat var63 = var61.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var65 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var67 = var65.withAllowMissingColumnNames(true);
    java.lang.Object[] var69 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var70 = var67.withHeaderComments(var69);
    org.apache.commons.csv.CSVFormat var72 = var70.withSkipHeaderRecord(false);
    java.lang.Character var73 = var70.getCommentMarker();
    java.lang.String[] var75 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var76 = var70.withHeader(var75);
    org.apache.commons.csv.CSVFormat var78 = var70.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var80 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var82 = var80.withAllowMissingColumnNames(true);
    java.lang.Object[] var84 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var85 = var82.withHeaderComments(var84);
    org.apache.commons.csv.CSVFormat var87 = var85.withSkipHeaderRecord(false);
    java.lang.Character var88 = var85.getCommentMarker();
    java.lang.String[] var90 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var91 = var85.withHeader(var90);
    org.apache.commons.csv.CSVFormat var92 = var78.withHeader(var90);
    java.lang.String var93 = var61.format((java.lang.Object[])var90);
    org.apache.commons.csv.CSVFormat var94 = var52.withHeaderComments((java.lang.Object[])var90);
    org.apache.commons.csv.CSVFormat var95 = var38.withHeaderComments((java.lang.Object[])var90);
    org.apache.commons.csv.CSVFormat var96 = var29.withHeaderComments((java.lang.Object[])var90);
    boolean var97 = var96.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + ""+ "'", var93.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test235");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote('a');
    org.apache.commons.csv.CSVFormat var16 = var14.withNullString("Delimiter=<4> QuoteChar=<a> CommentStart=< > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]");
    org.apache.commons.csv.CSVFormat var18 = var16.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var20 = var16.withEscape(' ');
    boolean var21 = var20.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test236");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var11 = var9.withNullString("Delimiter=<4> CommentStart=<#> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var15 = var13.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var17 = var13.withIgnoreEmptyLines(false);
    java.lang.String var18 = var13.getNullString();
    org.apache.commons.csv.CSVFormat var19 = var13.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var22 = var21.isNullStringSet();
    org.apache.commons.csv.CSVFormat var24 = var21.withCommentMarker((java.lang.Character)'a');
    java.lang.String var25 = var24.getNullString();
    org.apache.commons.csv.CSVFormat var27 = var24.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var30 = var29.withSkipHeaderRecord();
    java.lang.String[] var32 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var33 = var29.withHeader(var32);
    java.lang.String var34 = var24.format((java.lang.Object[])var32);
    java.lang.String var35 = var13.format((java.lang.Object[])var32);
    org.apache.commons.csv.CSVFormat var36 = var9.withHeaderComments((java.lang.Object[])var32);
    org.apache.commons.csv.CSVFormat var38 = var9.withRecordSeparator("0");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test237");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withCommentMarker('#');
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false", var8);
    org.apache.commons.csv.CSVFormat var11 = var8.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var13 = var8.withAllowMissingColumnNames(true);
    java.lang.String var14 = var8.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var16 = var8.withEscape('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Delimiter=<4> CommentStart=<#> SkipHeaderRecord:false"+ "'", var14.equals("Delimiter=<4> CommentStart=<#> SkipHeaderRecord:false"));

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test238");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    java.lang.String var18 = var15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Delimiter=<4> QuoteChar=<a> CommentStart=< > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]"+ "'", var18.equals("Delimiter=<4> QuoteChar=<a> CommentStart=< > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]"));

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test239");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    boolean var7 = var6.isCommentMarkerSet();
    java.lang.Character var8 = var6.getEscapeCharacter();
    java.lang.String var9 = var6.getNullString();
    org.apache.commons.csv.CSVFormat var10 = var6.withIgnoreSurroundingSpaces();
    char var11 = var10.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == '4');

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test240");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withQuote(' ');
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var21 = var17.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var23 = var17.withEscape('a');
    org.apache.commons.csv.CSVFormat var25 = var17.withNullString("");
    boolean var26 = var12.equals((java.lang.Object)var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var29 = var27.withNullString("aa");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test241");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    boolean var8 = var5.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var11 = var10.isNullStringSet();
    org.apache.commons.csv.CSVFormat var13 = var10.withCommentMarker((java.lang.Character)'a');
    boolean var14 = var5.equals((java.lang.Object)'a');
    org.apache.commons.csv.CSVFormat var16 = var5.withSkipHeaderRecord(true);
    java.lang.Character var17 = var16.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test242");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var12.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord(false);
    java.lang.Character var32 = var29.getQuoteCharacter();
    boolean var33 = var29.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var37 = var35.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var38 = var35.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var40 = var38.withCommentMarker('#');
    boolean var41 = var38.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat.Predefined[] var42 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var43 = var38.withHeaderComments((java.lang.Object[])var42);
    org.apache.commons.csv.CSVFormat var44 = var29.withHeaderComments((java.lang.Object[])var42);
    org.apache.commons.csv.QuoteMode var45 = var29.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test243");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var9 = var1.withNullString("");
    boolean var10 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var12 = var1.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]");
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var29 = var21.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    java.lang.Object[] var35 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var36 = var33.withHeaderComments(var35);
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord(false);
    java.lang.Character var39 = var36.getCommentMarker();
    java.lang.String[] var41 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var42 = var36.withHeader(var41);
    org.apache.commons.csv.CSVFormat var43 = var29.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = var14.withHeaderComments((java.lang.Object[])var41);
    org.apache.commons.csv.CSVFormat var46 = var44.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var48 = var44.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test244");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    org.apache.commons.csv.CSVFormat var15 = var7.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVParser var16 = org.apache.commons.csv.CSVParser.parse("hi!", var7);
    org.apache.commons.csv.CSVFormat var17 = var7.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var19 = var17.withEscape('#');
    org.apache.commons.csv.CSVFormat var20 = var17.withSkipHeaderRecord();
    char var21 = var17.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == '4');

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test245");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(true);
    char var8 = var5.getDelimiter();
    boolean var9 = var5.isNullStringSet();
    java.lang.Character var10 = var5.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 'a'+ "'", var10.equals('a'));

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test246");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    var5.close();
    long var8 = var5.getRecordNumber();
    java.util.Map var9 = var5.getHeaderMap();
    long var10 = var5.getRecordNumber();
    long var11 = var5.getRecordNumber();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var12 = var5.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test247");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var13.withHeaderComments((java.lang.Object[])var26);
    org.apache.commons.csv.CSVParser var29 = org.apache.commons.csv.CSVParser.parse("hi!", var13);
    java.lang.Character var30 = var13.getCommentMarker();
    java.lang.Character var31 = var13.getCommentMarker();
    org.apache.commons.csv.CSVFormat var32 = var13.withAllowMissingColumnNames();
    boolean var33 = var13.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test248");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    java.lang.Object[] var14 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments(var14);
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord(false);
    java.lang.Character var18 = var15.getCommentMarker();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var15.withHeader(var20);
    org.apache.commons.csv.CSVFormat var23 = var15.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var27 = var25.withAllowMissingColumnNames(true);
    java.lang.Object[] var29 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var30 = var27.withHeaderComments(var29);
    org.apache.commons.csv.CSVFormat var32 = var30.withSkipHeaderRecord(false);
    java.lang.Character var33 = var30.getCommentMarker();
    java.lang.String[] var35 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var36 = var30.withHeader(var35);
    org.apache.commons.csv.CSVFormat var37 = var23.withHeader(var35);
    java.lang.String var38 = var6.format((java.lang.Object[])var35);
    org.apache.commons.csv.CSVFormat var40 = var6.withSkipHeaderRecord(true);
    java.lang.String[] var41 = var6.getHeader();
    org.apache.commons.csv.CSVFormat var43 = var6.withNullString("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test249");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    boolean var8 = var5.isCommentMarkerSet();
    boolean var9 = var5.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var11 = var5.withDelimiter('#');
    java.lang.String var12 = var11.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var14 = var11.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var15 = var11.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test250");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var6.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var18 = var6.withDelimiter('a');
    boolean var19 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var21 = var6.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var23 = var6.withQuote(' ');
    java.lang.Character var24 = var23.getQuoteCharacter();
    boolean var25 = var23.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ' '+ "'", var24.equals(' '));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test251");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = var6.withRecordSeparator("Delimiter=<4> QuoteChar=<a> CommentStart=<#> SkipHeaderRecord:false");
    java.lang.String[] var17 = var16.getHeaderComments();
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test252");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var9.withRecordSeparator("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    boolean var14 = var13.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var13.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var18 = var16.withIgnoreSurroundingSpaces(false);
    boolean var19 = var16.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test253");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var9.withQuote('a');
    org.apache.commons.csv.CSVFormat var15 = var9.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var17 = var15.withEscape(' ');
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var23 = var19.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var25 = var23.withAllowMissingColumnNames(false);
    java.lang.String var26 = var23.toString();
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var29 = var28.isNullStringSet();
    org.apache.commons.csv.CSVFormat var31 = var28.withCommentMarker((java.lang.Character)'a');
    java.lang.String var32 = var31.getNullString();
    org.apache.commons.csv.CSVFormat var34 = var31.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var37 = var36.withSkipHeaderRecord();
    java.lang.String[] var39 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var40 = var36.withHeader(var39);
    java.lang.String var41 = var31.format((java.lang.Object[])var39);
    org.apache.commons.csv.CSVFormat var42 = var23.withHeaderComments((java.lang.Object[])var39);
    org.apache.commons.csv.CSVFormat var43 = var15.withHeaderComments((java.lang.Object[])var39);
    boolean var44 = var15.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var46 = var15.withIgnoreSurroundingSpaces(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false"+ "'", var26.equals("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test254");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var4.withRecordSeparator('a');
    java.lang.Character var7 = var4.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    java.lang.Object[] var13 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var14 = var11.withHeaderComments(var13);
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord(false);
    java.lang.Character var17 = var14.getCommentMarker();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var14.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var4.withHeader(var19);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var25 = var21.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var27 = var21.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test255");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("", var4);
    java.util.Iterator var12 = var11.iterator();
    var11.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test256");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    boolean var16 = var14.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var18 = var14.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var20 = var14.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var21 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var23 = var14.withQuote((java.lang.Character)'a');
    boolean var24 = var23.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test257");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    boolean var12 = var9.getIgnoreHeaderCase();
    java.lang.String[] var13 = var9.getHeader();
    boolean var14 = var9.getIgnoreEmptyLines();
    boolean var15 = var9.isNullStringSet();
    boolean var16 = var9.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test258");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    var5.close();
    java.util.Iterator var8 = var5.iterator();
    var5.close();
    var5.close();
    java.util.Iterator var11 = var5.iterator();
    var5.close();
    boolean var13 = var5.isClosed();
    java.util.Map var14 = var5.getHeaderMap();
    java.util.Iterator var15 = var5.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test259");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.String var4 = var3.getNullString();
    org.apache.commons.csv.CSVFormat var6 = var3.withQuote((java.lang.Character)'#');
    boolean var7 = var6.isNullStringSet();
    org.apache.commons.csv.CSVFormat var9 = var6.withCommentMarker((java.lang.Character)'a');
    boolean var10 = var9.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test260");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.QuoteMode var13 = var6.getQuoteMode();
    boolean var14 = var6.isNullStringSet();
    boolean var15 = var6.isNullStringSet();
    org.apache.commons.csv.CSVFormat var16 = var6.withSkipHeaderRecord();
    boolean var17 = var6.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames(true);
    java.lang.Object[] var23 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var24 = var21.withHeaderComments(var23);
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var27 = var24.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var29 = var27.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var31 = var27.withQuote('a');
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var35 = var33.withAllowMissingColumnNames(true);
    java.lang.Object[] var37 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var38 = var35.withHeaderComments(var37);
    org.apache.commons.csv.CSVFormat var40 = var38.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var41 = var38.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var43 = var41.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var45 = var43.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var47 = var45.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var49 = var47.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var53 = var51.withAllowMissingColumnNames(true);
    java.lang.Object[] var55 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var56 = var53.withHeaderComments(var55);
    org.apache.commons.csv.CSVFormat var58 = var56.withSkipHeaderRecord(false);
    java.lang.Character var59 = var56.getCommentMarker();
    java.lang.String[] var61 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var62 = var56.withHeader(var61);
    org.apache.commons.csv.CSVFormat var63 = var49.withHeader(var61);
    org.apache.commons.csv.CSVFormat var64 = var27.withHeader(var61);
    java.lang.String var65 = var6.format((java.lang.Object[])var61);
    java.lang.Character var66 = var6.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var68 = var6.withRecordSeparator('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test261");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    var5.close();
    long var8 = var5.getRecordNumber();
    java.util.Map var9 = var5.getHeaderMap();
    long var10 = var5.getRecordNumber();
    long var11 = var5.getRecordNumber();
    java.util.Map var12 = var5.getHeaderMap();
    java.util.Map var13 = var5.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test262");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator('a');
    java.lang.String var14 = var11.getNullString();
    org.apache.commons.csv.CSVFormat var16 = var11.withCommentMarker((java.lang.Character)'a');
    boolean var17 = var7.equals((java.lang.Object)var16);
    org.apache.commons.csv.CSVFormat var19 = var16.withAllowMissingColumnNames(true);
    boolean var20 = var19.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var22 = var19.withEscape((java.lang.Character)' ');
    boolean var23 = var19.getIgnoreHeaderCase();
    java.lang.String var24 = var19.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Delimiter=<4> CommentStart=<a> SkipHeaderRecord:false"+ "'", var24.equals("Delimiter=<4> CommentStart=<a> SkipHeaderRecord:false"));

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test263");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    boolean var16 = var14.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var18 = var14.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var20 = var18.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var21 = var18.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var23 = var18.withCommentMarker('#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test264");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var8 = var6.withAllowMissingColumnNames(false);
    java.lang.String[] var9 = var6.getHeaderComments();
    java.lang.String var10 = var6.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var12 = var6.withQuote(' ');
    boolean var13 = var12.getSkipHeaderRecord();
    java.lang.String[] var14 = var12.getHeaderComments();
    org.apache.commons.csv.QuoteMode var15 = var12.getQuoteMode();
    org.apache.commons.csv.CSVFormat var16 = var12.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVParser var17 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false", var16);
    long var18 = var17.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0L);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test265");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    boolean var6 = var1.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var8 = var1.withIgnoreHeaderCase(false);
    boolean var9 = var1.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.Object[] var15 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var16 = var13.withHeaderComments(var15);
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var21 = var19.withQuote((java.lang.Character)'a');
    boolean var22 = var19.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var24.withAllowMissingColumnNames(true);
    java.lang.Object[] var28 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var29 = var26.withHeaderComments(var28);
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord(false);
    java.lang.Character var32 = var29.getCommentMarker();
    java.lang.String[] var34 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var35 = var29.withHeader(var34);
    boolean var36 = var29.getIgnoreSurroundingSpaces();
    java.lang.Character var37 = var29.getCommentMarker();
    org.apache.commons.csv.QuoteMode var38 = var29.getQuoteMode();
    boolean var39 = var29.isNullStringSet();
    org.apache.commons.csv.CSVFormat var41 = var29.withEscape('#');
    org.apache.commons.csv.CSVFormat var43 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var44 = var43.isNullStringSet();
    org.apache.commons.csv.CSVFormat var46 = var43.withNullString("");
    org.apache.commons.csv.CSVFormat var48 = var43.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var50 = var48.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var54 = var52.withAllowMissingColumnNames(true);
    java.lang.Object[] var56 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var57 = var54.withHeaderComments(var56);
    org.apache.commons.csv.CSVFormat var59 = var57.withSkipHeaderRecord(false);
    java.lang.Character var60 = var57.getCommentMarker();
    java.lang.String[] var62 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var63 = var57.withHeader(var62);
    org.apache.commons.csv.CSVFormat var65 = var57.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var67 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var69 = var67.withAllowMissingColumnNames(true);
    java.lang.Object[] var71 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var72 = var69.withHeaderComments(var71);
    org.apache.commons.csv.CSVFormat var74 = var72.withSkipHeaderRecord(false);
    java.lang.Character var75 = var72.getCommentMarker();
    java.lang.String[] var77 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var78 = var72.withHeader(var77);
    org.apache.commons.csv.CSVFormat var79 = var65.withHeader(var77);
    org.apache.commons.csv.CSVFormat var80 = var48.withHeaderComments((java.lang.Object[])var77);
    boolean var81 = var29.equals((java.lang.Object)var77);
    org.apache.commons.csv.CSVFormat var82 = var19.withHeader(var77);
    java.lang.String var83 = var1.format((java.lang.Object[])var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + ""+ "'", var83.equals(""));

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test266");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    java.lang.String var6 = var3.getNullString();
    org.apache.commons.csv.CSVFormat var8 = var3.withCommentMarker((java.lang.Character)'a');
    boolean var9 = var8.getSkipHeaderRecord();
    boolean var10 = var8.getSkipHeaderRecord();
    java.lang.Character var11 = var8.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var12 = var8.withSkipHeaderRecord();
    boolean var13 = var8.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var15 = var8.withIgnoreSurroundingSpaces(false);
    boolean var16 = var8.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test267");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var4.withQuote(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("", var4);
    long var12 = var11.getCurrentLineNumber();
    java.util.Iterator var13 = var11.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test268");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var3.withEscape(' ');
    org.apache.commons.csv.CSVFormat var7 = var3.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    java.lang.Object[] var13 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var14 = var11.withHeaderComments(var13);
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord(false);
    java.lang.Character var17 = var14.getCommentMarker();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var14.withHeader(var19);
    boolean var21 = var14.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var22 = var14.withIgnoreEmptyLines();
    boolean var23 = var22.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var25.withSkipHeaderRecord();
    java.lang.String[] var28 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var29 = var25.withHeader(var28);
    org.apache.commons.csv.CSVFormat var30 = var22.withHeader(var28);
    org.apache.commons.csv.CSVFormat var31 = var3.withHeaderComments((java.lang.Object[])var28);
    org.apache.commons.csv.CSVFormat var33 = var3.withIgnoreEmptyLines(true);
    boolean var34 = var3.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var36 = var3.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test269");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    boolean var12 = var9.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var16 = var14.withAllowMissingColumnNames(true);
    java.lang.Object[] var18 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var19 = var16.withHeaderComments(var18);
    org.apache.commons.csv.CSVFormat var21 = var19.withSkipHeaderRecord(false);
    java.lang.Character var22 = var19.getCommentMarker();
    java.lang.String[] var24 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var25 = var19.withHeader(var24);
    boolean var26 = var19.getIgnoreSurroundingSpaces();
    java.lang.Character var27 = var19.getCommentMarker();
    org.apache.commons.csv.QuoteMode var28 = var19.getQuoteMode();
    boolean var29 = var19.isNullStringSet();
    org.apache.commons.csv.CSVFormat var31 = var19.withEscape('#');
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var34 = var33.isNullStringSet();
    org.apache.commons.csv.CSVFormat var36 = var33.withNullString("");
    org.apache.commons.csv.CSVFormat var38 = var33.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var40 = var38.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var44 = var42.withAllowMissingColumnNames(true);
    java.lang.Object[] var46 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var47 = var44.withHeaderComments(var46);
    org.apache.commons.csv.CSVFormat var49 = var47.withSkipHeaderRecord(false);
    java.lang.Character var50 = var47.getCommentMarker();
    java.lang.String[] var52 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var53 = var47.withHeader(var52);
    org.apache.commons.csv.CSVFormat var55 = var47.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var59 = var57.withAllowMissingColumnNames(true);
    java.lang.Object[] var61 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var62 = var59.withHeaderComments(var61);
    org.apache.commons.csv.CSVFormat var64 = var62.withSkipHeaderRecord(false);
    java.lang.Character var65 = var62.getCommentMarker();
    java.lang.String[] var67 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var68 = var62.withHeader(var67);
    org.apache.commons.csv.CSVFormat var69 = var55.withHeader(var67);
    org.apache.commons.csv.CSVFormat var70 = var38.withHeaderComments((java.lang.Object[])var67);
    boolean var71 = var19.equals((java.lang.Object)var67);
    org.apache.commons.csv.CSVFormat var72 = var9.withHeader(var67);
    org.apache.commons.csv.CSVFormat var74 = var72.withNullString("Delimiter=<4> SkipHeaderRecord:true HeaderComments:[0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test270");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var3.withEscape(' ');
    org.apache.commons.csv.CSVFormat var7 = var3.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var12 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withEscape('#');
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var29 = var21.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    java.lang.Object[] var35 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var36 = var33.withHeaderComments(var35);
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord(false);
    java.lang.Character var39 = var36.getCommentMarker();
    java.lang.String[] var41 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var42 = var36.withHeader(var41);
    org.apache.commons.csv.CSVFormat var43 = var29.withHeader(var41);
    java.lang.String var44 = var12.format((java.lang.Object[])var41);
    org.apache.commons.csv.CSVFormat var45 = var3.withHeader(var41);
    boolean var46 = var3.isCommentMarkerSet();
    java.lang.String[] var47 = var3.getHeaderComments();
    org.apache.commons.csv.CSVFormat var49 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var51 = var3.withRecordSeparator("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test271");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    boolean var3 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var7 = var1.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var9 = var1.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var11 = var1.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var13 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    java.lang.String var27 = var26.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var29 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var31 = var29.withAllowMissingColumnNames(true);
    java.lang.Object[] var33 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var34 = var31.withHeaderComments(var33);
    org.apache.commons.csv.CSVFormat var36 = var34.withSkipHeaderRecord(false);
    java.lang.Character var37 = var34.getCommentMarker();
    java.lang.String[] var39 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var40 = var34.withHeader(var39);
    org.apache.commons.csv.CSVFormat var41 = var26.withHeaderComments((java.lang.Object[])var39);
    boolean var42 = var41.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var44 = var41.withNullString("");
    boolean var45 = var44.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var47 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var49 = var47.withAllowMissingColumnNames(true);
    java.lang.Object[] var51 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var52 = var49.withHeaderComments(var51);
    org.apache.commons.csv.CSVFormat var54 = var52.withSkipHeaderRecord(false);
    java.lang.Character var55 = var52.getCommentMarker();
    java.lang.String[] var57 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var58 = var52.withHeader(var57);
    org.apache.commons.csv.CSVFormat var60 = var52.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var62 = var52.withRecordSeparator("Delimiter=<4> QuoteChar=<a> CommentStart=<#> SkipHeaderRecord:false");
    java.lang.String[] var63 = var62.getHeaderComments();
    org.apache.commons.csv.CSVFormat var64 = var44.withHeader(var63);
    org.apache.commons.csv.CSVFormat var65 = var13.withHeader(var63);
    boolean var66 = var13.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var68 = var13.withRecordSeparator("Delimiter=<4> QuoteChar=< > RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var70 = var13.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var72 = var13.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var75 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var77 = var75.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var79 = var75.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var81 = var75.withEscape('a');
    org.apache.commons.csv.CSVFormat var83 = var81.withDelimiter('#');
    org.apache.commons.csv.CSVParser var84 = org.apache.commons.csv.CSVParser.parse("hi!", var83);
    org.apache.commons.csv.CSVFormat var85 = var83.withIgnoreSurroundingSpaces();
    java.lang.String[] var86 = var85.getHeaderComments();
    org.apache.commons.csv.CSVFormat var88 = var85.withAllowMissingColumnNames(false);
    boolean var89 = var13.equals((java.lang.Object)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test272");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var4 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape('#');
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    java.lang.Object[] var12 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var13 = var10.withHeaderComments(var12);
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord(false);
    java.lang.Character var16 = var13.getCommentMarker();
    java.lang.String[] var18 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var19 = var13.withHeader(var18);
    org.apache.commons.csv.CSVFormat var21 = var13.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var25 = var23.withAllowMissingColumnNames(true);
    java.lang.Object[] var27 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var28 = var25.withHeaderComments(var27);
    org.apache.commons.csv.CSVFormat var30 = var28.withSkipHeaderRecord(false);
    java.lang.Character var31 = var28.getCommentMarker();
    java.lang.String[] var33 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var34 = var28.withHeader(var33);
    org.apache.commons.csv.CSVFormat var35 = var21.withHeader(var33);
    java.lang.String var36 = var4.format((java.lang.Object[])var33);
    org.apache.commons.csv.CSVFormat.Predefined[] var37 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var38 = var4.withHeaderComments((java.lang.Object[])var37);
    boolean var39 = var38.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var40 = var38.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test273");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var14.withNullString("Delimiter=<4> QuoteChar=<#> CommentStart=<a> SkipHeaderRecord:false");
    java.lang.String[] var18 = var17.getHeaderComments();
    boolean var19 = var17.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test274");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Delimiter=<4> EmptyLines:ignored SkipHeaderRecord:true HeaderComments:[0]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test275");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    var5.close();
    long var8 = var5.getCurrentLineNumber();
    java.util.Iterator var9 = var5.iterator();
    long var10 = var5.getRecordNumber();
    boolean var11 = var5.isClosed();
    java.util.Map var12 = var5.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test276");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var5.getHeaderComments();
    java.lang.String var9 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var5.withQuote(' ');
    boolean var12 = var11.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var11.withDelimiter('4');
    boolean var15 = var11.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = var11.withNullString("Delimiter=<4> SkipHeaderRecord:false");
    boolean var18 = var11.isQuoteCharacterSet();
    char var19 = var11.getDelimiter();
    boolean var20 = var11.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var21 = var11.withIgnoreEmptyLines();
    boolean var22 = var21.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test277");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.String[] var4 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var12 = var10.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var14 = var12.withAllowMissingColumnNames(true);
    boolean var15 = var12.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withAllowMissingColumnNames(true);
    java.lang.Object[] var21 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var22 = var19.withHeaderComments(var21);
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var25 = var22.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var27 = var25.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var29 = var27.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var31 = var29.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var35 = var33.withAllowMissingColumnNames(true);
    java.lang.Object[] var37 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var38 = var35.withHeaderComments(var37);
    org.apache.commons.csv.CSVFormat var40 = var38.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var44 = var42.withAllowMissingColumnNames(true);
    java.lang.Object[] var46 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var47 = var44.withHeaderComments(var46);
    org.apache.commons.csv.CSVFormat var49 = var47.withSkipHeaderRecord(false);
    java.lang.Character var50 = var47.getCommentMarker();
    java.lang.String[] var52 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var53 = var47.withHeader(var52);
    org.apache.commons.csv.CSVFormat var55 = var47.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var59 = var57.withAllowMissingColumnNames(true);
    java.lang.Object[] var61 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var62 = var59.withHeaderComments(var61);
    org.apache.commons.csv.CSVFormat var64 = var62.withSkipHeaderRecord(false);
    java.lang.Character var65 = var62.getCommentMarker();
    java.lang.String[] var67 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var68 = var62.withHeader(var67);
    org.apache.commons.csv.CSVFormat var69 = var55.withHeader(var67);
    java.lang.String var70 = var38.format((java.lang.Object[])var67);
    org.apache.commons.csv.CSVFormat var71 = var29.withHeaderComments((java.lang.Object[])var67);
    java.lang.String var72 = var12.format((java.lang.Object[])var67);
    org.apache.commons.csv.CSVFormat var73 = var6.withHeader(var67);
    boolean var74 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var75 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var77 = var6.withSkipHeaderRecord(true);
    org.apache.commons.csv.QuoteMode var78 = var77.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "aa"+ "'", var72.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test278");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var14 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var29 = var21.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    java.lang.Object[] var35 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var36 = var33.withHeaderComments(var35);
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord(false);
    java.lang.Character var39 = var36.getCommentMarker();
    java.lang.String[] var41 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var42 = var36.withHeader(var41);
    org.apache.commons.csv.CSVFormat var43 = var29.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = var14.withHeader(var41);
    org.apache.commons.csv.CSVFormat var46 = var14.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var47 = var46.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var49 = var46.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var50 = var49.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var52 = var50.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test279");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    java.lang.String var6 = var3.getNullString();
    org.apache.commons.csv.CSVFormat var8 = var3.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator("aa");
    boolean var11 = var10.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var10.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var15 = var10.withSkipHeaderRecord(false);
    boolean var16 = var15.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test280");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines(false);
    boolean var7 = var6.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var9 = var6.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var10 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("aALL4MINIMAL4NON_NUMERIC4NONEa", var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test281");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var9 = var1.withNullString("");
    boolean var10 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var12 = var1.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var13 = var1.withIgnoreEmptyLines();
    boolean var14 = var1.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var18 = var1.withRecordSeparator("Delimiter=<4> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[0] Header:[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test282");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var9 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var11 = var1.withNullString("hi!");
    org.apache.commons.csv.CSVFormat var13 = var11.withEscape('#');
    org.apache.commons.csv.QuoteMode var14 = var11.getQuoteMode();
    org.apache.commons.csv.CSVFormat var15 = var11.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = var11.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var23 = var19.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var25 = var23.withQuote('a');
    org.apache.commons.csv.CSVFormat var27 = var25.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var29 = var25.withCommentMarker((java.lang.Character)'#');
    boolean var30 = var29.getSkipHeaderRecord();
    java.lang.Character var31 = var29.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var35 = var33.withAllowMissingColumnNames(true);
    java.lang.Object[] var37 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var38 = var35.withHeaderComments(var37);
    org.apache.commons.csv.CSVFormat var39 = var38.withAllowMissingColumnNames();
    boolean var40 = var39.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var44 = var42.withAllowMissingColumnNames(true);
    java.lang.Object[] var46 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var47 = var44.withHeaderComments(var46);
    org.apache.commons.csv.CSVFormat var49 = var47.withSkipHeaderRecord(false);
    java.lang.Character var50 = var47.getCommentMarker();
    java.lang.String[] var52 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var53 = var47.withHeader(var52);
    java.lang.String var54 = var53.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var56 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var58 = var56.withAllowMissingColumnNames(true);
    java.lang.Object[] var60 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var61 = var58.withHeaderComments(var60);
    org.apache.commons.csv.CSVFormat var63 = var61.withSkipHeaderRecord(false);
    java.lang.Character var64 = var61.getCommentMarker();
    java.lang.String[] var66 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var67 = var61.withHeader(var66);
    org.apache.commons.csv.CSVFormat var68 = var53.withHeaderComments((java.lang.Object[])var66);
    org.apache.commons.csv.CSVFormat var70 = var68.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var72 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var73 = var72.withSkipHeaderRecord();
    java.lang.String[] var75 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var76 = var72.withHeader(var75);
    org.apache.commons.csv.CSVFormat var77 = var70.withHeaderComments((java.lang.Object[])var75);
    org.apache.commons.csv.CSVFormat var78 = var39.withHeaderComments((java.lang.Object[])var75);
    java.lang.String var79 = var29.format((java.lang.Object[])var75);
    org.apache.commons.csv.CSVFormat var80 = var17.withHeaderComments((java.lang.Object[])var75);
    java.lang.String var81 = var80.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "aa"+ "'", var79.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test283");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var35 = var33.withRecordSeparator('a');
    java.lang.String var36 = var33.getNullString();
    org.apache.commons.csv.CSVFormat var38 = var33.withCommentMarker((java.lang.Character)'a');
    boolean var39 = var38.getSkipHeaderRecord();
    java.lang.String var40 = var38.getNullString();
    org.apache.commons.csv.CSVFormat var42 = var38.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var46 = var44.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var48 = var46.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var49 = var46.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var53 = var51.withAllowMissingColumnNames(true);
    java.lang.Object[] var55 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var56 = var53.withHeaderComments(var55);
    org.apache.commons.csv.CSVFormat var58 = var56.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var59 = var56.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var61 = var59.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var63 = var59.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var65 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var67 = var65.withAllowMissingColumnNames(true);
    java.lang.Object[] var69 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var70 = var67.withHeaderComments(var69);
    org.apache.commons.csv.CSVFormat var72 = var70.withSkipHeaderRecord(false);
    java.lang.Character var73 = var70.getCommentMarker();
    java.lang.String[] var75 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var76 = var70.withHeader(var75);
    org.apache.commons.csv.CSVFormat var78 = var70.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var80 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var82 = var80.withAllowMissingColumnNames(true);
    java.lang.Object[] var84 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var85 = var82.withHeaderComments(var84);
    org.apache.commons.csv.CSVFormat var87 = var85.withSkipHeaderRecord(false);
    java.lang.Character var88 = var85.getCommentMarker();
    java.lang.String[] var90 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var91 = var85.withHeader(var90);
    org.apache.commons.csv.CSVFormat var92 = var78.withHeader(var90);
    org.apache.commons.csv.CSVFormat var93 = var63.withHeaderComments((java.lang.Object[])var90);
    org.apache.commons.csv.CSVFormat var94 = var49.withHeader(var90);
    org.apache.commons.csv.CSVFormat var95 = var42.withHeader(var90);
    java.lang.String var96 = var29.format((java.lang.Object[])var90);
    org.apache.commons.csv.CSVFormat var98 = var29.withAllowMissingColumnNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + ""+ "'", var96.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test284");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var6.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var17 = var6.withQuote('a');
    java.lang.String[] var18 = var6.getHeaderComments();
    org.apache.commons.csv.CSVFormat var20 = var6.withDelimiter('a');
    char var21 = var6.getDelimiter();
    org.apache.commons.csv.CSVFormat var23 = var6.withDelimiter('4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test285");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    java.lang.String var6 = var3.getNullString();
    org.apache.commons.csv.CSVFormat var8 = var3.withCommentMarker((java.lang.Character)'a');
    boolean var9 = var8.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = var8.withQuote('#');
    java.lang.String[] var12 = var11.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test286");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    boolean var18 = var17.getIgnoreEmptyLines();
    boolean var19 = var17.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var21 = var17.withQuote((java.lang.Character)'#');
    java.lang.String[] var22 = var21.getHeader();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var24.withAllowMissingColumnNames(true);
    java.lang.Object[] var28 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var29 = var26.withHeaderComments(var28);
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord(false);
    java.lang.Character var32 = var31.getCommentMarker();
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var36 = var34.withAllowMissingColumnNames(true);
    java.lang.Object[] var38 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var39 = var36.withHeaderComments(var38);
    org.apache.commons.csv.CSVFormat var41 = var39.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var42 = var39.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var44 = var42.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var46 = var44.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var47 = var44.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var51 = var49.withAllowMissingColumnNames(true);
    java.lang.Object[] var53 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var54 = var51.withHeaderComments(var53);
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord(false);
    java.lang.Character var57 = var54.getCommentMarker();
    java.lang.String[] var59 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var60 = var54.withHeader(var59);
    org.apache.commons.csv.CSVFormat var62 = var54.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var64 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var66 = var64.withAllowMissingColumnNames(true);
    java.lang.Object[] var68 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var69 = var66.withHeaderComments(var68);
    org.apache.commons.csv.CSVFormat var71 = var69.withSkipHeaderRecord(false);
    java.lang.Character var72 = var69.getCommentMarker();
    java.lang.String[] var74 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var75 = var69.withHeader(var74);
    org.apache.commons.csv.CSVFormat var76 = var62.withHeader(var74);
    org.apache.commons.csv.CSVFormat var77 = var47.withHeader(var74);
    org.apache.commons.csv.CSVFormat var78 = var31.withHeaderComments((java.lang.Object[])var74);
    java.lang.String var79 = var21.format((java.lang.Object[])var74);
    boolean var80 = var21.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "0##"+ "'", var79.equals("0##"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test287");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.String[] var4 = var1.getHeader();
    org.apache.commons.csv.CSVFormat var6 = var1.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    java.lang.Object[] var12 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var13 = var10.withHeaderComments(var12);
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var16 = var13.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var18 = var16.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var20 = var18.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var22 = var20.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var24.withAllowMissingColumnNames(true);
    java.lang.Object[] var28 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var29 = var26.withHeaderComments(var28);
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var35 = var33.withAllowMissingColumnNames(true);
    java.lang.Object[] var37 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var38 = var35.withHeaderComments(var37);
    org.apache.commons.csv.CSVFormat var40 = var38.withSkipHeaderRecord(false);
    java.lang.Character var41 = var38.getCommentMarker();
    java.lang.String[] var43 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var44 = var38.withHeader(var43);
    org.apache.commons.csv.CSVFormat var46 = var38.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var48 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var50 = var48.withAllowMissingColumnNames(true);
    java.lang.Object[] var52 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var53 = var50.withHeaderComments(var52);
    org.apache.commons.csv.CSVFormat var55 = var53.withSkipHeaderRecord(false);
    java.lang.Character var56 = var53.getCommentMarker();
    java.lang.String[] var58 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var59 = var53.withHeader(var58);
    org.apache.commons.csv.CSVFormat var60 = var46.withHeader(var58);
    java.lang.String var61 = var29.format((java.lang.Object[])var58);
    org.apache.commons.csv.CSVFormat var62 = var20.withHeaderComments((java.lang.Object[])var58);
    org.apache.commons.csv.CSVFormat var63 = var6.withHeaderComments((java.lang.Object[])var58);
    boolean var64 = var6.getSkipHeaderRecord();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var66 = var6.withEscape('a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + ""+ "'", var61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test288");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var9 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var11 = var1.withNullString("hi!");
    org.apache.commons.csv.CSVFormat var13 = var11.withIgnoreEmptyLines(false);
    java.lang.Character var14 = var13.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test289");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    boolean var28 = var27.isCommentMarkerSet();
    boolean var29 = var27.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var31 = var27.withNullString("a 0");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var33 = var27.withQuote((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test290");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    boolean var7 = var6.isCommentMarkerSet();
    java.lang.Character var8 = var6.getEscapeCharacter();
    java.lang.String var9 = var6.getNullString();
    org.apache.commons.csv.CSVFormat var11 = var6.withEscape('a');
    org.apache.commons.csv.CSVFormat var12 = var6.withIgnoreEmptyLines();
    boolean var13 = var12.getIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test291");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var14 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var29 = var21.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    java.lang.Object[] var35 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var36 = var33.withHeaderComments(var35);
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord(false);
    java.lang.Character var39 = var36.getCommentMarker();
    java.lang.String[] var41 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var42 = var36.withHeader(var41);
    org.apache.commons.csv.CSVFormat var43 = var29.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = var14.withHeader(var41);
    org.apache.commons.csv.CSVFormat var46 = var44.withCommentMarker((java.lang.Character)'#');
    java.lang.String var47 = var44.toString();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var51 = var49.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var53 = var49.withQuote((java.lang.Character)' ');
    boolean var54 = var44.equals((java.lang.Object)var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "Delimiter=<4> QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0] Header:[]"+ "'", var47.equals("Delimiter=<4> QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0] Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test292");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    org.apache.commons.csv.CSVFormat var15 = var7.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withAllowMissingColumnNames(true);
    java.lang.Object[] var21 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var22 = var19.withHeaderComments(var21);
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord(false);
    java.lang.Character var25 = var22.getCommentMarker();
    java.lang.String[] var27 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var28 = var22.withHeader(var27);
    org.apache.commons.csv.CSVFormat var29 = var15.withHeader(var27);
    boolean var30 = var29.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVParser var31 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false", var29);
    var31.close();
    boolean var33 = var31.isClosed();
    long var34 = var31.getRecordNumber();
    java.util.Map var35 = var31.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test293");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var6.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var18 = var6.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var22 = var20.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var24 = var20.withRecordSeparator("hi!");
    boolean var25 = var24.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var27 = var24.withQuote(' ');
    boolean var28 = var27.isQuoteCharacterSet();
    java.lang.Character var29 = var27.getCommentMarker();
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var35 = var31.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var37 = var35.withAllowMissingColumnNames(false);
    java.lang.String[] var38 = var35.getHeaderComments();
    java.lang.String var39 = var35.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var41 = var35.withQuote(' ');
    boolean var42 = var41.getSkipHeaderRecord();
    java.lang.String[] var43 = var41.getHeaderComments();
    org.apache.commons.csv.CSVFormat var45 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var47 = var45.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var49 = var47.withEscape(' ');
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var53 = var51.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var55 = var51.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var57 = var55.withQuote('a');
    java.lang.Object[] var58 = new java.lang.Object[] { var55};
    org.apache.commons.csv.CSVFormat var59 = var49.withHeaderComments(var58);
    java.lang.String var60 = var41.format(var58);
    org.apache.commons.csv.CSVFormat var61 = var27.withHeaderComments(var58);
    org.apache.commons.csv.CSVFormat var62 = var18.withHeaderComments(var58);
    org.apache.commons.csv.CSVFormat var64 = var18.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var66 = var18.withRecordSeparator("aa");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "Delimiter=<4>  SkipHeaderRecord:false hi!"+ "'", var60.equals("Delimiter=<4>  SkipHeaderRecord:false hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test294");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(true);
    boolean var8 = var5.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    java.lang.Object[] var14 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments(var14);
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var18 = var15.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var20 = var18.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var22 = var20.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var24 = var22.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var28 = var26.withAllowMissingColumnNames(true);
    java.lang.Object[] var30 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var31 = var28.withHeaderComments(var30);
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var37 = var35.withAllowMissingColumnNames(true);
    java.lang.Object[] var39 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var40 = var37.withHeaderComments(var39);
    org.apache.commons.csv.CSVFormat var42 = var40.withSkipHeaderRecord(false);
    java.lang.Character var43 = var40.getCommentMarker();
    java.lang.String[] var45 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var46 = var40.withHeader(var45);
    org.apache.commons.csv.CSVFormat var48 = var40.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var52 = var50.withAllowMissingColumnNames(true);
    java.lang.Object[] var54 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var55 = var52.withHeaderComments(var54);
    org.apache.commons.csv.CSVFormat var57 = var55.withSkipHeaderRecord(false);
    java.lang.Character var58 = var55.getCommentMarker();
    java.lang.String[] var60 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var61 = var55.withHeader(var60);
    org.apache.commons.csv.CSVFormat var62 = var48.withHeader(var60);
    java.lang.String var63 = var31.format((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var64 = var22.withHeaderComments((java.lang.Object[])var60);
    java.lang.String var65 = var5.format((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var67 = var5.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var69 = var67.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var71 = var69.withIgnoreSurroundingSpaces(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var73 = var71.withEscape((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "aa"+ "'", var65.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test295");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var14.withHeader(var26);
    boolean var29 = var28.getAllowMissingColumnNames();
    java.lang.String var30 = var28.getNullString();
    char var31 = var28.getDelimiter();
    java.lang.Character var32 = var28.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var34 = var28.withNullString("Delimiter=<4> CommentStart=<#> RecordSeparator=<hi!> SkipHeaderRecord:false");
    char var35 = var34.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == '4');

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test296");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.Object[] var15 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var16 = var13.withHeaderComments(var15);
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord(false);
    java.lang.Character var19 = var16.getCommentMarker();
    java.lang.String[] var21 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var22 = var16.withHeader(var21);
    org.apache.commons.csv.CSVFormat var24 = var16.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var28 = var26.withAllowMissingColumnNames(true);
    java.lang.Object[] var30 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var31 = var28.withHeaderComments(var30);
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord(false);
    java.lang.Character var34 = var31.getCommentMarker();
    java.lang.String[] var36 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var37 = var31.withHeader(var36);
    org.apache.commons.csv.CSVFormat var38 = var24.withHeader(var36);
    java.lang.String var39 = var7.format((java.lang.Object[])var36);
    org.apache.commons.csv.CSVFormat var41 = var7.withSkipHeaderRecord(true);
    java.lang.Character var42 = var7.getCommentMarker();
    org.apache.commons.csv.CSVFormat var44 = var7.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVParser var45 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> QuoteChar=<a> CommentStart=<#> SkipHeaderRecord:false", var7);
    org.apache.commons.csv.CSVFormat var47 = var7.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test297");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator('a');
    java.lang.String var14 = var11.getNullString();
    org.apache.commons.csv.CSVFormat var16 = var11.withCommentMarker((java.lang.Character)'a');
    boolean var17 = var7.equals((java.lang.Object)var16);
    org.apache.commons.csv.CSVFormat var19 = var16.withRecordSeparator("aa");
    org.apache.commons.csv.CSVFormat var21 = var19.withIgnoreEmptyLines(false);
    java.lang.String var22 = var19.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Delimiter=<4> CommentStart=<a> RecordSeparator=<aa> SkipHeaderRecord:false"+ "'", var22.equals("Delimiter=<4> CommentStart=<a> RecordSeparator=<aa> SkipHeaderRecord:false"));

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test298");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines(true);
    java.lang.String[] var16 = var15.getHeader();
    org.apache.commons.csv.CSVFormat var18 = var15.withEscape((java.lang.Character)'#');
    java.lang.String[] var19 = var18.getHeader();
    java.lang.Character var20 = var18.getCommentMarker();
    org.apache.commons.csv.CSVFormat var22 = var18.withQuote('a');
    boolean var23 = var22.getSkipHeaderRecord();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var25 = var22.withQuote((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ' '+ "'", var20.equals(' '));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test299");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withQuote(' ');
    org.apache.commons.csv.CSVFormat var17 = var15.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('#');
    java.lang.Character var20 = var19.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var24 = var22.withAllowMissingColumnNames(true);
    java.lang.Object[] var26 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var27 = var24.withHeaderComments(var26);
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord(false);
    java.lang.Character var30 = var27.getCommentMarker();
    java.lang.String[] var32 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var33 = var27.withHeader(var32);
    java.lang.String var34 = var33.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(true);
    java.lang.Object[] var40 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var41 = var38.withHeaderComments(var40);
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord(false);
    java.lang.Character var44 = var41.getCommentMarker();
    java.lang.String[] var46 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var47 = var41.withHeader(var46);
    org.apache.commons.csv.CSVFormat var48 = var33.withHeaderComments((java.lang.Object[])var46);
    boolean var49 = var48.isCommentMarkerSet();
    boolean var50 = var48.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var52 = var48.withNullString("a 0");
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var56 = var54.withAllowMissingColumnNames(true);
    java.lang.Object[] var58 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var59 = var56.withHeaderComments(var58);
    boolean var60 = var59.isCommentMarkerSet();
    java.lang.Character var61 = var59.getEscapeCharacter();
    java.lang.String var62 = var59.getNullString();
    org.apache.commons.csv.CSVFormat var64 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var66 = var64.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var68 = var66.withEscape(' ');
    org.apache.commons.csv.CSVFormat var70 = var66.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var72 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var74 = var72.withAllowMissingColumnNames(true);
    java.lang.Object[] var76 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var77 = var74.withHeaderComments(var76);
    org.apache.commons.csv.CSVFormat var79 = var77.withSkipHeaderRecord(false);
    java.lang.Character var80 = var77.getCommentMarker();
    java.lang.String[] var82 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var83 = var77.withHeader(var82);
    boolean var84 = var77.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var85 = var77.withIgnoreEmptyLines();
    boolean var86 = var85.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var88 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var89 = var88.withSkipHeaderRecord();
    java.lang.String[] var91 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var92 = var88.withHeader(var91);
    org.apache.commons.csv.CSVFormat var93 = var85.withHeader(var91);
    org.apache.commons.csv.CSVFormat var94 = var66.withHeaderComments((java.lang.Object[])var91);
    org.apache.commons.csv.CSVFormat var95 = var59.withHeader(var91);
    java.lang.String var96 = var48.format((java.lang.Object[])var91);
    org.apache.commons.csv.CSVFormat var97 = var19.withHeaderComments((java.lang.Object[])var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ' '+ "'", var20.equals(' '));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + ""+ "'", var96.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test300");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    var5.close();
    java.util.Iterator var8 = var5.iterator();
    long var9 = var5.getRecordNumber();
    java.util.Iterator var10 = var5.iterator();
    long var11 = var5.getCurrentLineNumber();
    var5.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test301");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('#');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var5 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(true);
    java.lang.Object[] var9 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var10 = var7.withHeaderComments(var9);
    org.apache.commons.csv.CSVFormat var12 = var10.withSkipHeaderRecord(false);
    java.lang.Character var13 = var10.getCommentMarker();
    java.lang.String[] var15 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var16 = var10.withHeader(var15);
    org.apache.commons.csv.CSVFormat var18 = var10.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var22 = var20.withAllowMissingColumnNames(true);
    java.lang.Object[] var24 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var25 = var22.withHeaderComments(var24);
    org.apache.commons.csv.CSVFormat var27 = var25.withSkipHeaderRecord(false);
    java.lang.Character var28 = var25.getCommentMarker();
    java.lang.String[] var30 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var31 = var25.withHeader(var30);
    org.apache.commons.csv.CSVFormat var32 = var18.withHeader(var30);
    org.apache.commons.csv.CSVFormat var33 = var3.withHeader(var30);
    java.lang.String var34 = var3.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test302");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var3 = var2.isNullStringSet();
    boolean var4 = var2.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreSurroundingSpaces(false);
    java.lang.Character var7 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVParser var8 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> QuoteChar=<#> CommentStart=<a> SkipHeaderRecord:false", var6);
    java.util.Iterator var9 = var8.iterator();
    java.util.Iterator var10 = var8.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test303");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var13.withHeaderComments((java.lang.Object[])var26);
    org.apache.commons.csv.CSVParser var29 = org.apache.commons.csv.CSVParser.parse("hi!", var13);
    java.lang.String[] var30 = var13.getHeader();
    java.lang.String[] var31 = var13.getHeader();
    boolean var32 = var13.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var33 = var13.withIgnoreEmptyLines();
    java.lang.Character var34 = var13.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test304");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var17 = var13.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var23 = var21.withAllowMissingColumnNames(true);
    java.lang.Object[] var25 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var26 = var23.withHeaderComments(var25);
    org.apache.commons.csv.CSVFormat var28 = var26.withSkipHeaderRecord(false);
    java.lang.Character var29 = var26.getCommentMarker();
    java.lang.String[] var31 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var32 = var26.withHeader(var31);
    org.apache.commons.csv.CSVFormat var34 = var26.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(true);
    java.lang.Object[] var40 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var41 = var38.withHeaderComments(var40);
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord(false);
    java.lang.Character var44 = var41.getCommentMarker();
    java.lang.String[] var46 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var47 = var41.withHeader(var46);
    org.apache.commons.csv.CSVFormat var48 = var34.withHeader(var46);
    boolean var49 = var48.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var51 = var48.withQuote(' ');
    org.apache.commons.csv.CSVFormat var53 = var48.withAllowMissingColumnNames(true);
    java.lang.String var54 = var48.toString();
    boolean var55 = var17.equals((java.lang.Object)var48);
    java.lang.String var56 = var48.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0] Header:[]"+ "'", var54.equals("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0] Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test305");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var9.withQuote('a');
    org.apache.commons.csv.CSVFormat var15 = var9.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = var15.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var20 = var16.withIgnoreEmptyLines(true);
    boolean var21 = var20.isQuoteCharacterSet();
    boolean var22 = var20.isQuoteCharacterSet();
    boolean var23 = var20.getAllowMissingColumnNames();
    java.lang.String var24 = var20.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test306");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(true);
    char var8 = var5.getDelimiter();
    boolean var9 = var5.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test307");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var8 = var2.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var11 = var8.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var13 = var8.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var15 = var8.withNullString("Delimiter=<4> SkipHeaderRecord:false");
    boolean var16 = var15.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVParser var17 = org.apache.commons.csv.CSVParser.parse("0", var15);
    boolean var18 = var15.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test308");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var14.withHeader(var26);
    boolean var29 = var14.isNullStringSet();
    boolean var30 = var14.isCommentMarkerSet();
    char var31 = var14.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == '4');

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test309");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var6.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var18 = var6.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var20 = var6.withNullString("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]");
    java.lang.String var21 = var20.getRecordSeparator();
    boolean var22 = var20.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test310");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    boolean var12 = var9.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var16 = var14.withAllowMissingColumnNames(true);
    java.lang.Object[] var18 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var19 = var16.withHeaderComments(var18);
    org.apache.commons.csv.CSVFormat var21 = var19.withSkipHeaderRecord(false);
    java.lang.Character var22 = var19.getCommentMarker();
    java.lang.String[] var24 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var25 = var19.withHeader(var24);
    boolean var26 = var19.getIgnoreSurroundingSpaces();
    java.lang.Character var27 = var19.getCommentMarker();
    org.apache.commons.csv.QuoteMode var28 = var19.getQuoteMode();
    boolean var29 = var19.isNullStringSet();
    org.apache.commons.csv.CSVFormat var31 = var19.withEscape('#');
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var34 = var33.isNullStringSet();
    org.apache.commons.csv.CSVFormat var36 = var33.withNullString("");
    org.apache.commons.csv.CSVFormat var38 = var33.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var40 = var38.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var44 = var42.withAllowMissingColumnNames(true);
    java.lang.Object[] var46 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var47 = var44.withHeaderComments(var46);
    org.apache.commons.csv.CSVFormat var49 = var47.withSkipHeaderRecord(false);
    java.lang.Character var50 = var47.getCommentMarker();
    java.lang.String[] var52 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var53 = var47.withHeader(var52);
    org.apache.commons.csv.CSVFormat var55 = var47.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var59 = var57.withAllowMissingColumnNames(true);
    java.lang.Object[] var61 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var62 = var59.withHeaderComments(var61);
    org.apache.commons.csv.CSVFormat var64 = var62.withSkipHeaderRecord(false);
    java.lang.Character var65 = var62.getCommentMarker();
    java.lang.String[] var67 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var68 = var62.withHeader(var67);
    org.apache.commons.csv.CSVFormat var69 = var55.withHeader(var67);
    org.apache.commons.csv.CSVFormat var70 = var38.withHeaderComments((java.lang.Object[])var67);
    boolean var71 = var19.equals((java.lang.Object)var67);
    org.apache.commons.csv.CSVFormat var72 = var9.withHeader(var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var74 = var9.withCommentMarker('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test311");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var5.getHeaderComments();
    java.lang.String var9 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var5.withQuote(' ');
    boolean var12 = var11.isCommentMarkerSet();
    java.lang.Character var13 = var11.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test312");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var9 = var1.withNullString("");
    boolean var10 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var12 = var1.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var13 = var1.withIgnoreEmptyLines();
    boolean var14 = var1.getAllowMissingColumnNames();
    java.lang.Character var15 = var1.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var17 = var1.withNullString("Delimiter=<4> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var18 = var1.withSkipHeaderRecord();
    char var19 = var1.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == '4');

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test313");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    boolean var10 = var6.isQuoteCharacterSet();
    java.lang.String var11 = var6.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var13 = var6.withCommentMarker('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]"+ "'", var11.equals("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]"));

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test314");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withAllowMissingColumnNames(true);
    java.lang.Object[] var21 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var22 = var19.withHeaderComments(var21);
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var28 = var26.withAllowMissingColumnNames(true);
    java.lang.Object[] var30 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var31 = var28.withHeaderComments(var30);
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord(false);
    java.lang.Character var34 = var31.getCommentMarker();
    java.lang.String[] var36 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var37 = var31.withHeader(var36);
    org.apache.commons.csv.CSVFormat var39 = var31.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var43 = var41.withAllowMissingColumnNames(true);
    java.lang.Object[] var45 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var46 = var43.withHeaderComments(var45);
    org.apache.commons.csv.CSVFormat var48 = var46.withSkipHeaderRecord(false);
    java.lang.Character var49 = var46.getCommentMarker();
    java.lang.String[] var51 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var52 = var46.withHeader(var51);
    org.apache.commons.csv.CSVFormat var53 = var39.withHeader(var51);
    java.lang.String var54 = var22.format((java.lang.Object[])var51);
    org.apache.commons.csv.CSVFormat var55 = var13.withHeaderComments((java.lang.Object[])var51);
    java.lang.String[] var56 = var55.getHeaderComments();
    org.apache.commons.csv.QuoteMode var57 = var55.getQuoteMode();
    org.apache.commons.csv.QuoteMode var58 = var55.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + ""+ "'", var54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test315");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    java.util.Iterator var7 = var5.iterator();
    java.util.Map var8 = var5.getHeaderMap();
    long var9 = var5.getCurrentLineNumber();
    boolean var10 = var5.isClosed();
    long var11 = var5.getCurrentLineNumber();
    long var12 = var5.getRecordNumber();
    long var13 = var5.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test316");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(true);
    boolean var8 = var5.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    java.lang.Object[] var14 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments(var14);
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var18 = var15.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var20 = var18.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var22 = var20.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var24 = var22.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var28 = var26.withAllowMissingColumnNames(true);
    java.lang.Object[] var30 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var31 = var28.withHeaderComments(var30);
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var37 = var35.withAllowMissingColumnNames(true);
    java.lang.Object[] var39 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var40 = var37.withHeaderComments(var39);
    org.apache.commons.csv.CSVFormat var42 = var40.withSkipHeaderRecord(false);
    java.lang.Character var43 = var40.getCommentMarker();
    java.lang.String[] var45 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var46 = var40.withHeader(var45);
    org.apache.commons.csv.CSVFormat var48 = var40.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var52 = var50.withAllowMissingColumnNames(true);
    java.lang.Object[] var54 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var55 = var52.withHeaderComments(var54);
    org.apache.commons.csv.CSVFormat var57 = var55.withSkipHeaderRecord(false);
    java.lang.Character var58 = var55.getCommentMarker();
    java.lang.String[] var60 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var61 = var55.withHeader(var60);
    org.apache.commons.csv.CSVFormat var62 = var48.withHeader(var60);
    java.lang.String var63 = var31.format((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var64 = var22.withHeaderComments((java.lang.Object[])var60);
    java.lang.String var65 = var5.format((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var67 = var5.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var69 = var67.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var71 = var67.withIgnoreEmptyLines(true);
    boolean var72 = var67.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "aa"+ "'", var65.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test317");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var4.withRecordSeparator('a');
    java.lang.Character var7 = var4.getQuoteCharacter();
    boolean var8 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator('a');
    java.lang.String var15 = var12.getNullString();
    org.apache.commons.csv.CSVFormat var17 = var12.withCommentMarker((java.lang.Character)'a');
    boolean var18 = var17.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var22 = var20.withAllowMissingColumnNames(true);
    java.lang.Object[] var24 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var25 = var22.withHeaderComments(var24);
    org.apache.commons.csv.CSVFormat var27 = var25.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var28 = var25.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var30 = var28.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var32 = var30.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var34 = var32.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var36 = var34.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var40 = var38.withAllowMissingColumnNames(true);
    java.lang.Object[] var42 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var43 = var40.withHeaderComments(var42);
    org.apache.commons.csv.CSVFormat var45 = var43.withSkipHeaderRecord(false);
    java.lang.Character var46 = var43.getCommentMarker();
    java.lang.String[] var48 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var49 = var43.withHeader(var48);
    org.apache.commons.csv.CSVFormat var50 = var36.withHeader(var48);
    java.lang.String var51 = var17.format((java.lang.Object[])var48);
    org.apache.commons.csv.CSVFormat var52 = var4.withHeaderComments((java.lang.Object[])var48);
    org.apache.commons.csv.CSVFormat var54 = var4.withNullString("Delimiter=<4> Escape=<a> SkipHeaderRecord:false HeaderComments:[0]");
    boolean var55 = var4.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + ""+ "'", var51.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test318");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var8 = var2.withEscape('a');
    org.apache.commons.csv.CSVFormat var10 = var8.withDelimiter('#');
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("hi!", var10);
    org.apache.commons.csv.CSVFormat var12 = var10.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = var10.withSkipHeaderRecord();
    char var14 = var10.getDelimiter();
    org.apache.commons.csv.CSVFormat var16 = var10.withDelimiter(' ');
    boolean var17 = var16.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var19 = var16.withRecordSeparator("aa");
    char var20 = var16.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == ' ');

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test319");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    boolean var6 = var5.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var8 = var5.withQuote(' ');
    boolean var10 = var5.equals((java.lang.Object)true);
    org.apache.commons.csv.CSVFormat var11 = var5.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var5.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var15 = var5.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var16 = var5.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var16.withSkipHeaderRecord();
    boolean var18 = var17.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test320");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=<4> EmptyLines:ignored SkipHeaderRecord:false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test321");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var2 = var1.withSkipHeaderRecord();
    java.lang.String[] var4 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var5 = var1.withHeader(var4);
    boolean var6 = var5.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var8 = var5.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var10 = var5.withRecordSeparator("Delimiter=<#> Escape=<a> EmptyLines:ignored SkipHeaderRecord:false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test322");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    java.lang.String var5 = var4.getNullString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var9 = var4.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var10 = var9.withSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test323");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    java.util.Iterator var7 = var5.iterator();
    java.util.Map var8 = var5.getHeaderMap();
    long var9 = var5.getCurrentLineNumber();
    boolean var10 = var5.isClosed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var11 = var5.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test324");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    boolean var6 = var5.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var8 = var5.withQuote(' ');
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    java.lang.Object[] var14 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments(var14);
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord(false);
    java.lang.Character var18 = var15.getCommentMarker();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var15.withHeader(var20);
    org.apache.commons.csv.CSVFormat var23 = var15.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var27 = var25.withAllowMissingColumnNames(true);
    java.lang.Object[] var29 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var30 = var27.withHeaderComments(var29);
    org.apache.commons.csv.CSVFormat var32 = var30.withSkipHeaderRecord(false);
    java.lang.Character var33 = var30.getCommentMarker();
    java.lang.String[] var35 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var36 = var30.withHeader(var35);
    org.apache.commons.csv.CSVFormat var37 = var23.withHeader(var35);
    org.apache.commons.csv.CSVFormat var39 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var41 = var39.withAllowMissingColumnNames(true);
    java.lang.Object[] var43 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var44 = var41.withHeaderComments(var43);
    java.lang.String var45 = var37.format(var43);
    org.apache.commons.csv.CSVFormat var46 = var8.withHeaderComments(var43);
    org.apache.commons.csv.CSVFormat var47 = var8.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var49 = var8.withRecordSeparator("Delimiter=<4> QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]");
    boolean var50 = var8.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "0"+ "'", var45.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test325");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines();
    boolean var15 = var14.getAllowMissingColumnNames();
    java.lang.Character var16 = var14.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var18 = var14.withIgnoreSurroundingSpaces(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test326");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var17 = var13.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var19 = var17.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var21 = var19.withIgnoreEmptyLines(true);
    boolean var22 = var21.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test327");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = var6.withRecordSeparator("Delimiter=<4> QuoteChar=<a> CommentStart=<#> SkipHeaderRecord:false");
    boolean var17 = var6.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test328");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var1.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var8 = var1.withQuote(' ');
    org.apache.commons.csv.CSVFormat var10 = var1.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var11 = var1.withIgnoreSurroundingSpaces();
    boolean var12 = var1.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test329");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    java.util.Iterator var7 = var5.iterator();
    java.util.Map var8 = var5.getHeaderMap();
    java.util.Map var9 = var5.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test330");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.QuoteMode var13 = var6.getQuoteMode();
    boolean var14 = var6.isNullStringSet();
    boolean var15 = var6.isNullStringSet();
    org.apache.commons.csv.CSVFormat var16 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var20 = var18.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var22 = var20.withRecordSeparator('a');
    java.lang.String var23 = var20.getNullString();
    org.apache.commons.csv.CSVFormat var25 = var20.withCommentMarker((java.lang.Character)'a');
    boolean var26 = var25.getSkipHeaderRecord();
    java.lang.String var27 = var25.getNullString();
    org.apache.commons.csv.CSVFormat var29 = var25.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var35 = var33.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var36 = var33.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var40 = var38.withAllowMissingColumnNames(true);
    java.lang.Object[] var42 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var43 = var40.withHeaderComments(var42);
    org.apache.commons.csv.CSVFormat var45 = var43.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var46 = var43.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var48 = var46.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var50 = var46.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var52 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var54 = var52.withAllowMissingColumnNames(true);
    java.lang.Object[] var56 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var57 = var54.withHeaderComments(var56);
    org.apache.commons.csv.CSVFormat var59 = var57.withSkipHeaderRecord(false);
    java.lang.Character var60 = var57.getCommentMarker();
    java.lang.String[] var62 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var63 = var57.withHeader(var62);
    org.apache.commons.csv.CSVFormat var65 = var57.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var67 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var69 = var67.withAllowMissingColumnNames(true);
    java.lang.Object[] var71 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var72 = var69.withHeaderComments(var71);
    org.apache.commons.csv.CSVFormat var74 = var72.withSkipHeaderRecord(false);
    java.lang.Character var75 = var72.getCommentMarker();
    java.lang.String[] var77 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var78 = var72.withHeader(var77);
    org.apache.commons.csv.CSVFormat var79 = var65.withHeader(var77);
    org.apache.commons.csv.CSVFormat var80 = var50.withHeaderComments((java.lang.Object[])var77);
    org.apache.commons.csv.CSVFormat var81 = var36.withHeader(var77);
    org.apache.commons.csv.CSVFormat var82 = var29.withHeader(var77);
    org.apache.commons.csv.CSVFormat var83 = var16.withHeader(var77);
    org.apache.commons.csv.CSVFormat var85 = var16.withCommentMarker(' ');
    boolean var86 = var85.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test331");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var5.getHeaderComments();
    java.lang.String var9 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var5.withQuote(' ');
    boolean var12 = var11.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var11.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var16 = var11.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var20 = var18.withAllowMissingColumnNames(true);
    java.lang.Object[] var22 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var23 = var20.withHeaderComments(var22);
    org.apache.commons.csv.CSVFormat var25 = var23.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var26 = var23.withIgnoreEmptyLines();
    boolean var27 = var26.getAllowMissingColumnNames();
    boolean var28 = var11.equals((java.lang.Object)var26);
    boolean var29 = var26.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var35 = var31.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var37 = var35.withAllowMissingColumnNames(false);
    java.lang.String var38 = var35.toString();
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var41 = var40.isNullStringSet();
    org.apache.commons.csv.CSVFormat var43 = var40.withCommentMarker((java.lang.Character)'a');
    java.lang.String var44 = var43.getNullString();
    org.apache.commons.csv.CSVFormat var46 = var43.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var48 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var49 = var48.withSkipHeaderRecord();
    java.lang.String[] var51 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var52 = var48.withHeader(var51);
    java.lang.String var53 = var43.format((java.lang.Object[])var51);
    org.apache.commons.csv.CSVFormat var54 = var35.withHeaderComments((java.lang.Object[])var51);
    org.apache.commons.csv.CSVFormat var55 = var54.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var59 = var57.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var61 = var59.withRecordSeparator('a');
    java.lang.String var62 = var59.getNullString();
    org.apache.commons.csv.CSVFormat var63 = var59.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var65 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var67 = var65.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var69 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var71 = var69.withAllowMissingColumnNames(true);
    java.lang.Object[] var73 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var74 = var71.withHeaderComments(var73);
    java.lang.String var75 = var74.getNullString();
    java.lang.String[] var76 = var74.getHeaderComments();
    org.apache.commons.csv.CSVFormat var77 = var67.withHeader(var76);
    org.apache.commons.csv.CSVFormat var78 = var59.withHeader(var76);
    java.lang.String var79 = var54.format((java.lang.Object[])var76);
    org.apache.commons.csv.CSVFormat var80 = var26.withHeader(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false"+ "'", var38.equals("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "0hi!"+ "'", var79.equals("0hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test332");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var4.withQuote(' ');
    org.apache.commons.csv.CSVParser var10 = org.apache.commons.csv.CSVParser.parse("#", var9);
    boolean var11 = var10.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test333");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var32 = var31.withSkipHeaderRecord();
    java.lang.String[] var34 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var35 = var31.withHeader(var34);
    org.apache.commons.csv.CSVFormat var36 = var29.withHeaderComments((java.lang.Object[])var34);
    org.apache.commons.csv.CSVFormat var38 = var29.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var40 = var29.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var44 = var42.withAllowMissingColumnNames(true);
    java.lang.Object[] var46 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var47 = var44.withHeaderComments(var46);
    org.apache.commons.csv.CSVFormat var49 = var47.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var50 = var47.withIgnoreEmptyLines();
    boolean var51 = var50.isNullStringSet();
    java.lang.String[] var52 = var50.getHeader();
    java.lang.String[] var53 = var50.getHeaderComments();
    org.apache.commons.csv.CSVFormat var54 = var29.withHeader(var53);
    java.lang.String var55 = var54.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[0]"+ "'", var55.equals("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[0]"));

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test334");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var13.withHeaderComments((java.lang.Object[])var26);
    org.apache.commons.csv.CSVFormat var30 = var28.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var32 = var30.withIgnoreEmptyLines(false);
    boolean var33 = var32.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var35 = var32.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var37 = var35.withRecordSeparator("Delimiter=<4> NullString=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVParser var38 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> QuoteChar=<a> CommentStart=<#> SkipHeaderRecord:false", var37);
    java.util.Iterator var39 = var38.iterator();
    var38.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test335");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    org.apache.commons.csv.CSVFormat var15 = var7.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withAllowMissingColumnNames(true);
    java.lang.Object[] var21 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var22 = var19.withHeaderComments(var21);
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord(false);
    java.lang.Character var25 = var22.getCommentMarker();
    java.lang.String[] var27 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var28 = var22.withHeader(var27);
    org.apache.commons.csv.CSVFormat var29 = var15.withHeader(var27);
    boolean var30 = var29.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVParser var31 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false", var29);
    long var32 = var31.getCurrentLineNumber();
    boolean var33 = var31.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test336");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    boolean var10 = var9.isNullStringSet();
    java.lang.String[] var11 = var9.getHeader();
    boolean var12 = var9.getAllowMissingColumnNames();
    boolean var13 = var9.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test337");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0] Header:[]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test338");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(false);
    java.lang.String var30 = var27.toString();
    java.lang.String var31 = var27.toString();
    org.apache.commons.csv.CSVFormat var33 = var27.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    java.lang.Character var35 = var34.getCommentMarker();
    char var36 = var34.getDelimiter();
    org.apache.commons.csv.CSVFormat var37 = var34.withIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]"+ "'", var30.equals("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]"+ "'", var31.equals("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test339");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    boolean var8 = var7.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var7.withQuote(' ');
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var14 = var12.withAllowMissingColumnNames(true);
    java.lang.Object[] var16 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var17 = var14.withHeaderComments(var16);
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord(false);
    java.lang.Character var20 = var17.getCommentMarker();
    java.lang.String[] var22 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var23 = var17.withHeader(var22);
    java.lang.String var24 = var23.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var28 = var26.withAllowMissingColumnNames(true);
    java.lang.Object[] var30 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var31 = var28.withHeaderComments(var30);
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord(false);
    java.lang.Character var34 = var31.getCommentMarker();
    java.lang.String[] var36 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var37 = var31.withHeader(var36);
    org.apache.commons.csv.CSVFormat var38 = var23.withHeaderComments((java.lang.Object[])var36);
    org.apache.commons.csv.CSVFormat var40 = var38.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var43 = var42.withSkipHeaderRecord();
    java.lang.String[] var45 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var46 = var42.withHeader(var45);
    org.apache.commons.csv.CSVFormat var47 = var40.withHeaderComments((java.lang.Object[])var45);
    boolean var48 = var40.isEscapeCharacterSet();
    java.lang.String[] var49 = var40.getHeaderComments();
    org.apache.commons.csv.CSVFormat var50 = var7.withHeader(var49);
    java.lang.Character var51 = var7.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test340");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    java.lang.String var6 = var1.getNullString();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    java.lang.String[] var11 = var8.getHeader();
    org.apache.commons.csv.CSVFormat var13 = var8.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var19 = var17.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames(true);
    boolean var22 = var19.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var24.withAllowMissingColumnNames(true);
    java.lang.Object[] var28 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var29 = var26.withHeaderComments(var28);
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var32 = var29.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var34 = var32.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var36 = var34.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var38 = var36.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var42 = var40.withAllowMissingColumnNames(true);
    java.lang.Object[] var44 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var45 = var42.withHeaderComments(var44);
    org.apache.commons.csv.CSVFormat var47 = var45.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var51 = var49.withAllowMissingColumnNames(true);
    java.lang.Object[] var53 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var54 = var51.withHeaderComments(var53);
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord(false);
    java.lang.Character var57 = var54.getCommentMarker();
    java.lang.String[] var59 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var60 = var54.withHeader(var59);
    org.apache.commons.csv.CSVFormat var62 = var54.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var64 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var66 = var64.withAllowMissingColumnNames(true);
    java.lang.Object[] var68 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var69 = var66.withHeaderComments(var68);
    org.apache.commons.csv.CSVFormat var71 = var69.withSkipHeaderRecord(false);
    java.lang.Character var72 = var69.getCommentMarker();
    java.lang.String[] var74 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var75 = var69.withHeader(var74);
    org.apache.commons.csv.CSVFormat var76 = var62.withHeader(var74);
    java.lang.String var77 = var45.format((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var78 = var36.withHeaderComments((java.lang.Object[])var74);
    java.lang.String var79 = var19.format((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var80 = var13.withHeader(var74);
    org.apache.commons.csv.CSVFormat var81 = var1.withHeaderComments((java.lang.Object[])var74);
    java.lang.String var82 = var1.toString();
    java.lang.Character var83 = var1.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var85 = var1.withAllowMissingColumnNames(true);
    java.lang.String[] var86 = var1.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + ""+ "'", var77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "aa"+ "'", var79.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false"+ "'", var82.equals("Delimiter=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test341");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    java.lang.String var6 = var3.getNullString();
    org.apache.commons.csv.CSVFormat var8 = var3.withCommentMarker((java.lang.Character)'a');
    boolean var9 = var8.getSkipHeaderRecord();
    java.lang.String var10 = var8.getNullString();
    org.apache.commons.csv.CSVFormat var11 = var8.withIgnoreEmptyLines();
    boolean var12 = var8.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test342");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var14 = var10.withRecordSeparator('#');
    boolean var15 = var10.isQuoteCharacterSet();
    org.apache.commons.csv.CSVParser var16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> CommentStart=<#> RecordSeparator=<> SkipHeaderRecord:false", var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var18 = var10.withQuote('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test343");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var13.withHeaderComments((java.lang.Object[])var26);
    org.apache.commons.csv.CSVParser var29 = org.apache.commons.csv.CSVParser.parse("hi!", var13);
    java.util.List var30 = var29.getRecords();
    long var31 = var29.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0L);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test344");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var8 = var1.withNullString("hi!");
    org.apache.commons.csv.CSVFormat var10 = var1.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test345");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var6 = var5.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = var6.withDelimiter('a');
    boolean var9 = var8.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var8.withCommentMarker((java.lang.Character)'4');
    org.apache.commons.csv.CSVFormat var13 = var11.withSkipHeaderRecord(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var15 = var11.withDelimiter('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test346");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    java.lang.String var6 = var1.getNullString();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    java.lang.String[] var11 = var8.getHeader();
    org.apache.commons.csv.CSVFormat var13 = var8.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var19 = var17.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames(true);
    boolean var22 = var19.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var24.withAllowMissingColumnNames(true);
    java.lang.Object[] var28 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var29 = var26.withHeaderComments(var28);
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var32 = var29.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var34 = var32.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var36 = var34.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var38 = var36.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var42 = var40.withAllowMissingColumnNames(true);
    java.lang.Object[] var44 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var45 = var42.withHeaderComments(var44);
    org.apache.commons.csv.CSVFormat var47 = var45.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var51 = var49.withAllowMissingColumnNames(true);
    java.lang.Object[] var53 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var54 = var51.withHeaderComments(var53);
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord(false);
    java.lang.Character var57 = var54.getCommentMarker();
    java.lang.String[] var59 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var60 = var54.withHeader(var59);
    org.apache.commons.csv.CSVFormat var62 = var54.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var64 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var66 = var64.withAllowMissingColumnNames(true);
    java.lang.Object[] var68 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var69 = var66.withHeaderComments(var68);
    org.apache.commons.csv.CSVFormat var71 = var69.withSkipHeaderRecord(false);
    java.lang.Character var72 = var69.getCommentMarker();
    java.lang.String[] var74 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var75 = var69.withHeader(var74);
    org.apache.commons.csv.CSVFormat var76 = var62.withHeader(var74);
    java.lang.String var77 = var45.format((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var78 = var36.withHeaderComments((java.lang.Object[])var74);
    java.lang.String var79 = var19.format((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var80 = var13.withHeader(var74);
    org.apache.commons.csv.CSVFormat var81 = var1.withHeaderComments((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var82 = var1.withIgnoreSurroundingSpaces();
    java.lang.String[] var83 = var82.getHeader();
    boolean var84 = var82.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var85 = var82.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + ""+ "'", var77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "aa"+ "'", var79.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test347");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    java.lang.String var15 = var6.getNullString();
    java.lang.String var16 = var6.getNullString();
    boolean var17 = var6.isEscapeCharacterSet();
    boolean var18 = var6.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var19 = var6.withAllowMissingColumnNames();
    boolean var20 = var19.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test348");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    boolean var8 = var7.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = var7.withEscape('#');
    java.lang.String[] var11 = var10.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test349");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var9.withQuote('a');
    org.apache.commons.csv.CSVFormat var15 = var9.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = var15.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var20 = var16.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var21 = var20.withSkipHeaderRecord();
    boolean var22 = var21.getIgnoreSurroundingSpaces();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var24 = var21.withEscape('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test350");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    java.lang.String var6 = var3.getNullString();
    org.apache.commons.csv.CSVFormat var8 = var3.withCommentMarker((java.lang.Character)'a');
    boolean var9 = var8.getSkipHeaderRecord();
    java.lang.String var10 = var8.getNullString();
    org.apache.commons.csv.CSVFormat var12 = var8.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var16 = var14.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var18 = var16.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var19 = var16.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var23 = var21.withAllowMissingColumnNames(true);
    java.lang.Object[] var25 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var26 = var23.withHeaderComments(var25);
    org.apache.commons.csv.CSVFormat var28 = var26.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var29 = var26.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var31 = var29.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var33 = var29.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var37 = var35.withAllowMissingColumnNames(true);
    java.lang.Object[] var39 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var40 = var37.withHeaderComments(var39);
    org.apache.commons.csv.CSVFormat var42 = var40.withSkipHeaderRecord(false);
    java.lang.Character var43 = var40.getCommentMarker();
    java.lang.String[] var45 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var46 = var40.withHeader(var45);
    org.apache.commons.csv.CSVFormat var48 = var40.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var52 = var50.withAllowMissingColumnNames(true);
    java.lang.Object[] var54 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var55 = var52.withHeaderComments(var54);
    org.apache.commons.csv.CSVFormat var57 = var55.withSkipHeaderRecord(false);
    java.lang.Character var58 = var55.getCommentMarker();
    java.lang.String[] var60 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var61 = var55.withHeader(var60);
    org.apache.commons.csv.CSVFormat var62 = var48.withHeader(var60);
    org.apache.commons.csv.CSVFormat var63 = var33.withHeaderComments((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var64 = var19.withHeader(var60);
    org.apache.commons.csv.CSVFormat var65 = var12.withHeader(var60);
    org.apache.commons.csv.CSVFormat var66 = var65.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test351");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    boolean var10 = var6.isQuoteCharacterSet();
    java.lang.Character var11 = var6.getEscapeCharacter();
    boolean var12 = var6.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines(true);
    boolean var15 = var14.isQuoteCharacterSet();
    boolean var16 = var14.isCommentMarkerSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test352");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    var5.close();
    boolean var8 = var5.isClosed();
    long var9 = var5.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test353");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.String[] var5 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var7 = var2.withCommentMarker('a');
    org.apache.commons.csv.CSVParser var8 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]", var7);
    long var9 = var8.getCurrentLineNumber();
    long var10 = var8.getRecordNumber();
    boolean var11 = var8.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test354");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var5 = var3.withQuote(' ');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'#');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var9 = var7.withCommentMarker('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test355");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var5 = var1.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var7 = var5.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    java.lang.Object[] var13 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var14 = var11.withHeaderComments(var13);
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord(false);
    java.lang.Character var17 = var14.getCommentMarker();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var14.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var5.withHeader(var19);
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var25 = var23.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var27 = var23.withRecordSeparator("hi!");
    boolean var28 = var27.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var30 = var27.withQuote(' ');
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var34 = var32.withAllowMissingColumnNames(true);
    java.lang.Object[] var36 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var37 = var34.withHeaderComments(var36);
    org.apache.commons.csv.CSVFormat var39 = var37.withSkipHeaderRecord(false);
    java.lang.Character var40 = var37.getCommentMarker();
    java.lang.String[] var42 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var43 = var37.withHeader(var42);
    org.apache.commons.csv.CSVFormat var45 = var37.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var47 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var49 = var47.withAllowMissingColumnNames(true);
    java.lang.Object[] var51 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var52 = var49.withHeaderComments(var51);
    org.apache.commons.csv.CSVFormat var54 = var52.withSkipHeaderRecord(false);
    java.lang.Character var55 = var52.getCommentMarker();
    java.lang.String[] var57 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var58 = var52.withHeader(var57);
    org.apache.commons.csv.CSVFormat var59 = var45.withHeader(var57);
    org.apache.commons.csv.CSVFormat var61 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var63 = var61.withAllowMissingColumnNames(true);
    java.lang.Object[] var65 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var66 = var63.withHeaderComments(var65);
    java.lang.String var67 = var59.format(var65);
    org.apache.commons.csv.CSVFormat var68 = var30.withHeaderComments(var65);
    org.apache.commons.csv.CSVFormat var69 = var5.withHeaderComments(var65);
    org.apache.commons.csv.QuoteMode var70 = var5.getQuoteMode();
    org.apache.commons.csv.CSVFormat var71 = var5.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "0"+ "'", var67.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test356");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    org.apache.commons.csv.CSVFormat var15 = var7.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVParser var16 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4>  SkipHeaderRecord:false hi!", var15);
    org.apache.commons.csv.CSVFormat var18 = var15.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var19 = var15.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var21 = var19.withEscape((java.lang.Character)' ');
    boolean var22 = var21.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test357");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    java.lang.String var5 = var4.getNullString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var9 = var4.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var11 = var4.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var15 = var13.withAllowMissingColumnNames(true);
    java.lang.Object[] var17 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var18 = var15.withHeaderComments(var17);
    boolean var19 = var18.isCommentMarkerSet();
    java.lang.Character var20 = var18.getEscapeCharacter();
    java.lang.String var21 = var18.getNullString();
    org.apache.commons.csv.CSVFormat var23 = var18.withEscape('#');
    org.apache.commons.csv.CSVFormat var25 = var23.withCommentMarker('a');
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(true);
    java.lang.Object[] var31 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var32 = var29.withHeaderComments(var31);
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(true);
    java.lang.Object[] var40 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var41 = var38.withHeaderComments(var40);
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord(false);
    java.lang.Character var44 = var41.getCommentMarker();
    java.lang.String[] var46 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var47 = var41.withHeader(var46);
    org.apache.commons.csv.CSVFormat var49 = var41.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var53 = var51.withAllowMissingColumnNames(true);
    java.lang.Object[] var55 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var56 = var53.withHeaderComments(var55);
    org.apache.commons.csv.CSVFormat var58 = var56.withSkipHeaderRecord(false);
    java.lang.Character var59 = var56.getCommentMarker();
    java.lang.String[] var61 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var62 = var56.withHeader(var61);
    org.apache.commons.csv.CSVFormat var63 = var49.withHeader(var61);
    java.lang.String var64 = var32.format((java.lang.Object[])var61);
    java.lang.String var65 = var25.format((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var66 = var11.withHeaderComments((java.lang.Object[])var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "a 0"+ "'", var65.equals("a 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test358");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withRecordSeparator("hi!");
    boolean var7 = var6.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var9 = var6.withQuote(' ');
    boolean var10 = var6.getSkipHeaderRecord();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0] Header:[]", var6);
    long var12 = var11.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test359");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var3.withRecordSeparator("hi!");
    java.lang.Character var9 = var3.getCommentMarker();
    boolean var10 = var3.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var3.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var15 = var13.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var17 = var13.withRecordSeparator("hi!");
    boolean var18 = var17.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var20 = var17.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var24 = var22.withAllowMissingColumnNames(true);
    java.lang.Object[] var26 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var27 = var24.withHeaderComments(var26);
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var30 = var27.withIgnoreEmptyLines();
    boolean var31 = var30.isNullStringSet();
    java.lang.String[] var32 = var30.getHeader();
    java.lang.String[] var33 = var30.getHeaderComments();
    org.apache.commons.csv.CSVFormat var34 = var20.withHeaderComments((java.lang.Object[])var33);
    boolean var35 = var11.equals((java.lang.Object)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test360");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    boolean var7 = var5.isClosed();
    java.util.Iterator var8 = var5.iterator();
    java.util.Iterator var9 = var5.iterator();
    java.util.Map var10 = var5.getHeaderMap();
    long var11 = var5.getCurrentLineNumber();
    java.util.Iterator var12 = var5.iterator();
    var5.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test361");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var13.withHeaderComments((java.lang.Object[])var26);
    org.apache.commons.csv.CSVFormat var30 = var28.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var32 = var30.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var34 = var32.withNullString("Delimiter=<4> QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0] Header:[]");
    org.apache.commons.csv.CSVParser var35 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]", var32);
    boolean var36 = var35.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test362");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var8 = var2.withEscape('a');
    org.apache.commons.csv.CSVFormat var10 = var8.withDelimiter('#');
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("hi!", var10);
    java.util.List var12 = var11.getRecords();
    long var13 = var11.getCurrentLineNumber();
    var11.close();
    var11.close();
    long var16 = var11.getCurrentLineNumber();
    boolean var17 = var11.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test363");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    java.lang.String var6 = var1.getNullString();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    java.lang.String[] var11 = var8.getHeader();
    org.apache.commons.csv.CSVFormat var13 = var8.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var19 = var17.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames(true);
    boolean var22 = var19.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var24.withAllowMissingColumnNames(true);
    java.lang.Object[] var28 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var29 = var26.withHeaderComments(var28);
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var32 = var29.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var34 = var32.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var36 = var34.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var38 = var36.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var42 = var40.withAllowMissingColumnNames(true);
    java.lang.Object[] var44 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var45 = var42.withHeaderComments(var44);
    org.apache.commons.csv.CSVFormat var47 = var45.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var51 = var49.withAllowMissingColumnNames(true);
    java.lang.Object[] var53 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var54 = var51.withHeaderComments(var53);
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord(false);
    java.lang.Character var57 = var54.getCommentMarker();
    java.lang.String[] var59 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var60 = var54.withHeader(var59);
    org.apache.commons.csv.CSVFormat var62 = var54.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var64 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var66 = var64.withAllowMissingColumnNames(true);
    java.lang.Object[] var68 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var69 = var66.withHeaderComments(var68);
    org.apache.commons.csv.CSVFormat var71 = var69.withSkipHeaderRecord(false);
    java.lang.Character var72 = var69.getCommentMarker();
    java.lang.String[] var74 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var75 = var69.withHeader(var74);
    org.apache.commons.csv.CSVFormat var76 = var62.withHeader(var74);
    java.lang.String var77 = var45.format((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var78 = var36.withHeaderComments((java.lang.Object[])var74);
    java.lang.String var79 = var19.format((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var80 = var13.withHeader(var74);
    org.apache.commons.csv.CSVFormat var81 = var1.withHeaderComments((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var83 = var81.withAllowMissingColumnNames(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var85 = var83.withQuote((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + ""+ "'", var77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "aa"+ "'", var79.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test364");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines(true);
    java.lang.String[] var16 = var15.getHeader();
    org.apache.commons.csv.CSVFormat var18 = var15.withEscape((java.lang.Character)'#');
    boolean var19 = var18.isNullStringSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var21 = var18.withEscape('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test365");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var8 = var2.withEscape('a');
    org.apache.commons.csv.CSVFormat var10 = var8.withDelimiter('#');
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("hi!", var10);
    org.apache.commons.csv.CSVFormat var12 = var10.withIgnoreSurroundingSpaces();
    java.lang.String[] var13 = var12.getHeaderComments();
    java.lang.Character var14 = var12.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test366");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var5.getHeaderComments();
    java.lang.String var9 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var5.withQuote(' ');
    boolean var12 = var11.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var11.withDelimiter('4');
    boolean var15 = var11.getIgnoreSurroundingSpaces();
    boolean var16 = var11.isNullStringSet();
    java.lang.String[] var17 = var11.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test367");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var6.withQuote((java.lang.Character)'a');
    java.lang.Character var17 = var6.getCommentMarker();
    org.apache.commons.csv.CSVFormat var19 = var6.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var20 = var19.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = var19.withEscape((java.lang.Character)'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test368");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var4 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var6 = var4.withCommentMarker('#');
    boolean var7 = var4.isQuoteCharacterSet();
    java.lang.Character var8 = var4.getQuoteCharacter();
    boolean var9 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var4.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var13 = var4.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord(true);
    boolean var16 = var13.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test369");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    boolean var14 = var7.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var7.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var17 = var7.withRecordSeparator('#');
    boolean var18 = var17.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]", var17);
    long var20 = var19.getCurrentLineNumber();
    boolean var21 = var19.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test370");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<4> Escape=< > QuoteChar=< > SkipHeaderRecord:false HeaderComments:[0] Header:[]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test371");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    java.lang.String var6 = var3.getNullString();
    org.apache.commons.csv.CSVFormat var8 = var3.withCommentMarker((java.lang.Character)'a');
    boolean var9 = var8.getSkipHeaderRecord();
    java.lang.String var10 = var8.getNullString();
    org.apache.commons.csv.CSVFormat var12 = var8.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var14 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var16 = var14.withAllowMissingColumnNames(true);
    java.lang.Object[] var18 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var19 = var16.withHeaderComments(var18);
    org.apache.commons.csv.CSVFormat var21 = var19.withSkipHeaderRecord(false);
    java.lang.Character var22 = var19.getCommentMarker();
    java.lang.String[] var24 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var25 = var19.withHeader(var24);
    org.apache.commons.csv.CSVFormat var27 = var19.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var29 = var19.withRecordSeparator("Delimiter=<4> QuoteChar=<a> CommentStart=<#> SkipHeaderRecord:false");
    java.lang.String[] var30 = var29.getHeaderComments();
    org.apache.commons.csv.CSVFormat var31 = var8.withHeaderComments((java.lang.Object[])var30);
    boolean var32 = var31.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test372");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    boolean var7 = var6.isCommentMarkerSet();
    java.lang.Character var8 = var6.getEscapeCharacter();
    java.lang.String var9 = var6.getNullString();
    boolean var10 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.QuoteMode var11 = var6.getQuoteMode();
    java.lang.Character var12 = var6.getEscapeCharacter();
    java.lang.String var13 = var6.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var6.withEscape('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test373");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<4> QuoteChar=<a> SkipHeaderRecord:false HeaderComments:[0]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test374");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var5.getHeaderComments();
    java.lang.String var9 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var5.withQuote(' ');
    boolean var12 = var11.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var11.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var16 = var11.withIgnoreHeaderCase(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var18 = var16.withQuote('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test375");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withQuote(' ');
    java.lang.String var16 = var12.getNullString();
    org.apache.commons.csv.CSVFormat var18 = var12.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test376");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    boolean var7 = var6.isCommentMarkerSet();
    java.lang.Character var8 = var6.getEscapeCharacter();
    java.lang.String var9 = var6.getNullString();
    org.apache.commons.csv.CSVFormat var11 = var6.withEscape('a');
    org.apache.commons.csv.CSVFormat var12 = var6.withIgnoreEmptyLines();
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test377");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    boolean var10 = var9.isNullStringSet();
    java.lang.String[] var11 = var9.getHeader();
    boolean var12 = var9.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var9.withQuote((java.lang.Character)'#');
    boolean var15 = var9.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var16 = var9.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var18 = var16.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test378");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    boolean var10 = var6.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var12 = var6.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var14 = var12.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var15 = var14.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = var14.withIgnoreSurroundingSpaces(false);
    char var18 = var17.getDelimiter();
    org.apache.commons.csv.CSVFormat var20 = var17.withRecordSeparator('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test379");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var8 = var2.withEscape('a');
    org.apache.commons.csv.CSVFormat var10 = var8.withDelimiter('#');
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("hi!", var10);
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var14 = var13.isNullStringSet();
    boolean var15 = var10.equals((java.lang.Object)var14);
    org.apache.commons.csv.CSVFormat var17 = var10.withIgnoreEmptyLines(true);
    java.lang.String var18 = var17.toString();
    java.lang.String var19 = var17.toString();
    org.apache.commons.csv.QuoteMode var20 = var17.getQuoteMode();
    org.apache.commons.csv.QuoteMode var21 = var17.getQuoteMode();
    org.apache.commons.csv.QuoteMode var22 = var17.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Delimiter=<#> Escape=<a> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var18.equals("Delimiter=<#> Escape=<a> EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Delimiter=<#> Escape=<a> EmptyLines:ignored SkipHeaderRecord:false"+ "'", var19.equals("Delimiter=<#> Escape=<a> EmptyLines:ignored SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test380");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var9 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var11 = var1.withNullString("hi!");
    org.apache.commons.csv.CSVFormat var13 = var11.withIgnoreEmptyLines(true);
    java.lang.String var14 = var13.getNullString();
    org.apache.commons.csv.CSVFormat var16 = var13.withIgnoreSurroundingSpaces(false);
    boolean var17 = var13.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var19 = var13.withNullString("Delimiter=<4> NullString=<hi!> SkipHeaderRecord:false");
    java.lang.String var20 = var13.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test381");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var6.withEscape((java.lang.Character)'a');
    java.lang.Object[] var17 = new java.lang.Object[] { (short)100};
    org.apache.commons.csv.CSVFormat var18 = var15.withHeaderComments(var17);
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var23 = var21.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var25 = var21.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var27 = var21.withEscape('a');
    org.apache.commons.csv.CSVFormat var29 = var27.withDelimiter('#');
    org.apache.commons.csv.CSVParser var30 = org.apache.commons.csv.CSVParser.parse("hi!", var29);
    org.apache.commons.csv.CSVFormat var31 = var29.withIgnoreEmptyLines();
    boolean var32 = var18.equals((java.lang.Object)var29);
    org.apache.commons.csv.CSVFormat var34 = var29.withRecordSeparator("Delimiter=<4> QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0] Header:[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test382");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var4 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape('#');
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    java.lang.Object[] var12 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var13 = var10.withHeaderComments(var12);
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord(false);
    java.lang.Character var16 = var13.getCommentMarker();
    java.lang.String[] var18 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var19 = var13.withHeader(var18);
    org.apache.commons.csv.CSVFormat var21 = var13.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var25 = var23.withAllowMissingColumnNames(true);
    java.lang.Object[] var27 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var28 = var25.withHeaderComments(var27);
    org.apache.commons.csv.CSVFormat var30 = var28.withSkipHeaderRecord(false);
    java.lang.Character var31 = var28.getCommentMarker();
    java.lang.String[] var33 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var34 = var28.withHeader(var33);
    org.apache.commons.csv.CSVFormat var35 = var21.withHeader(var33);
    java.lang.String var36 = var4.format((java.lang.Object[])var33);
    org.apache.commons.csv.QuoteMode var37 = var4.getQuoteMode();
    boolean var38 = var4.isNullStringSet();
    org.apache.commons.csv.CSVFormat var40 = var4.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var42 = var4.withRecordSeparator("Delimiter=<4> QuoteChar=< > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0] Header:[]");
    org.apache.commons.csv.CSVFormat var44 = var4.withRecordSeparator(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test383");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var32 = var31.withSkipHeaderRecord();
    java.lang.String[] var34 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var35 = var31.withHeader(var34);
    org.apache.commons.csv.CSVFormat var36 = var29.withHeaderComments((java.lang.Object[])var34);
    org.apache.commons.csv.CSVFormat var38 = var29.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var40 = var29.withQuote((java.lang.Character)'a');
    java.lang.String var41 = var29.getNullString();
    org.apache.commons.csv.QuoteMode var42 = var29.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test384");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var6.withCommentMarker((java.lang.Character)'a');
    boolean var12 = var6.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test385");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    java.lang.String var6 = var3.getNullString();
    org.apache.commons.csv.CSVFormat var8 = var3.withCommentMarker((java.lang.Character)'a');
    boolean var9 = var8.getSkipHeaderRecord();
    java.lang.String var10 = var8.getNullString();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var13 = var12.isNullStringSet();
    org.apache.commons.csv.CSVFormat var15 = var12.withCommentMarker((java.lang.Character)'a');
    java.lang.String var16 = var15.getNullString();
    org.apache.commons.csv.CSVFormat var18 = var15.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var20 = var15.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var22 = var15.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var24 = var15.withIgnoreEmptyLines(true);
    boolean var25 = var8.equals((java.lang.Object)var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var27 = var8.withQuote((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test386");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var4 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var6 = var4.withCommentMarker('#');
    boolean var7 = var4.isQuoteCharacterSet();
    java.lang.Character var8 = var4.getQuoteCharacter();
    boolean var9 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var11 = var4.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var13 = var4.withRecordSeparator(' ');
    java.lang.String[] var14 = var4.getHeaderComments();
    boolean var15 = var4.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test387");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    boolean var3 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreSurroundingSpaces(false);
    java.lang.Character var6 = var1.getEscapeCharacter();
    java.lang.Character var7 = var1.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test388");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    java.lang.Character var14 = var6.getCommentMarker();
    org.apache.commons.csv.CSVFormat var16 = var6.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test389");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    boolean var3 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var7 = var1.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var9 = var1.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var11 = var1.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var15 = var13.withAllowMissingColumnNames(true);
    java.lang.Object[] var17 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var18 = var15.withHeaderComments(var17);
    java.lang.String var19 = var18.getNullString();
    java.lang.String[] var20 = var18.getHeaderComments();
    org.apache.commons.csv.CSVFormat var21 = var11.withHeader(var20);
    boolean var22 = var21.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var23 = var21.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test390");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    java.lang.String var6 = var1.getNullString();
    org.apache.commons.csv.CSVFormat var8 = var1.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var10 = var1.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var12 = var1.withQuote(' ');
    java.lang.String var13 = var12.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test391");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    org.apache.commons.csv.CSVFormat var15 = var7.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = var15.withSkipHeaderRecord();
    boolean var17 = var15.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVParser var18 = org.apache.commons.csv.CSVParser.parse("0aa", var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test392");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    boolean var6 = var5.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var8 = var5.withQuote(' ');
    boolean var10 = var5.equals((java.lang.Object)true);
    org.apache.commons.csv.CSVFormat var11 = var5.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var11.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var15 = var11.withQuote('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test393");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    var5.close();
    long var8 = var5.getRecordNumber();
    java.util.Map var9 = var5.getHeaderMap();
    long var10 = var5.getRecordNumber();
    var5.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test394");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var8 = var2.withEscape('a');
    org.apache.commons.csv.CSVFormat var10 = var8.withDelimiter('#');
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("hi!", var10);
    org.apache.commons.csv.CSVFormat var12 = var10.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var13 = var10.withSkipHeaderRecord();
    char var14 = var10.getDelimiter();
    org.apache.commons.csv.CSVFormat var16 = var10.withDelimiter(' ');
    boolean var17 = var16.getIgnoreEmptyLines();
    java.lang.String[] var18 = var16.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test395");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var4.withRecordSeparator('a');
    java.lang.Character var7 = var4.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    java.lang.Object[] var13 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var14 = var11.withHeaderComments(var13);
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord(false);
    java.lang.Character var17 = var14.getCommentMarker();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var14.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var4.withHeader(var19);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var25 = var21.withQuote((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var27 = var21.withEscape(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test396");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var4.withRecordSeparator('a');
    java.lang.Character var7 = var4.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    java.lang.Object[] var13 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var14 = var11.withHeaderComments(var13);
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord(false);
    java.lang.Character var17 = var14.getCommentMarker();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var14.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var4.withHeader(var19);
    org.apache.commons.csv.CSVFormat var22 = var21.withIgnoreSurroundingSpaces();
    boolean var23 = var22.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var27 = var25.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var29 = var25.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var31 = var29.withAllowMissingColumnNames(false);
    java.lang.String var32 = var29.toString();
    boolean var33 = var22.equals((java.lang.Object)var29);
    char var34 = var29.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false"+ "'", var32.equals("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == '4');

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test397");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var9.withQuote('a');
    org.apache.commons.csv.CSVFormat var15 = var9.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = var15.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var19 = var18.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var21 = var19.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var23 = var21.withDelimiter(' ');
    java.lang.Character var24 = var21.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var26 = var21.withQuote(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + '#'+ "'", var24.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test398");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    boolean var7 = var6.isCommentMarkerSet();
    java.lang.Character var8 = var6.getEscapeCharacter();
    java.lang.String var9 = var6.getNullString();
    boolean var10 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.QuoteMode var11 = var6.getQuoteMode();
    java.lang.Character var12 = var6.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var21 = var17.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var23 = var17.withEscape('a');
    org.apache.commons.csv.CSVFormat var25 = var23.withDelimiter('#');
    org.apache.commons.csv.CSVParser var26 = org.apache.commons.csv.CSVParser.parse("hi!", var25);
    org.apache.commons.csv.CSVFormat var27 = var25.withIgnoreSurroundingSpaces();
    java.lang.String[] var28 = var27.getHeaderComments();
    org.apache.commons.csv.CSVFormat var30 = var27.withAllowMissingColumnNames(false);
    boolean var31 = var6.equals((java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test399");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var5.getHeaderComments();
    java.lang.String var9 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var5.withQuote(' ');
    boolean var12 = var11.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var11.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var16 = var11.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var20 = var18.withAllowMissingColumnNames(true);
    java.lang.Object[] var22 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var23 = var20.withHeaderComments(var22);
    org.apache.commons.csv.CSVFormat var25 = var23.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var26 = var23.withIgnoreEmptyLines();
    boolean var27 = var26.getAllowMissingColumnNames();
    boolean var28 = var11.equals((java.lang.Object)var26);
    char var29 = var11.getDelimiter();
    org.apache.commons.csv.CSVFormat var31 = var11.withAllowMissingColumnNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test400");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var3.withEscape(' ');
    org.apache.commons.csv.CSVFormat var7 = var3.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var12 = var9.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var14 = var12.withEscape('#');
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var29 = var21.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    java.lang.Object[] var35 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var36 = var33.withHeaderComments(var35);
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord(false);
    java.lang.Character var39 = var36.getCommentMarker();
    java.lang.String[] var41 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var42 = var36.withHeader(var41);
    org.apache.commons.csv.CSVFormat var43 = var29.withHeader(var41);
    java.lang.String var44 = var12.format((java.lang.Object[])var41);
    org.apache.commons.csv.CSVFormat var45 = var3.withHeader(var41);
    boolean var46 = var3.isCommentMarkerSet();
    java.lang.String[] var47 = var3.getHeaderComments();
    java.lang.String[] var48 = var3.getHeader();
    org.apache.commons.csv.CSVFormat var50 = var3.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var52 = var3.withIgnoreHeaderCase(false);
    char var53 = var52.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == '4');

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test401");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var14 = var10.withRecordSeparator('#');
    boolean var15 = var10.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var17 = var10.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVParser var18 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> QuoteChar=<a> CommentStart=< > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]", var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test402");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var4.withRecordSeparator('a');
    java.lang.Character var7 = var4.getQuoteCharacter();
    boolean var8 = var4.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = var4.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var11 = var10.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test403");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    boolean var14 = var7.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var7.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var17 = var7.withRecordSeparator('#');
    boolean var18 = var17.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var19 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]", var17);
    long var20 = var19.getCurrentLineNumber();
    long var21 = var19.getRecordNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0L);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test404");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    org.apache.commons.csv.CSVFormat var15 = var7.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVParser var16 = org.apache.commons.csv.CSVParser.parse("hi!", var7);
    org.apache.commons.csv.CSVFormat var18 = var7.withQuote((java.lang.Character)'a');
    boolean var19 = var18.isCommentMarkerSet();
    boolean var20 = var18.getAllowMissingColumnNames();
    boolean var21 = var18.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test405");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var1.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var8 = var6.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    java.lang.Object[] var14 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments(var14);
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord(false);
    java.lang.Character var18 = var15.getCommentMarker();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var15.withHeader(var20);
    org.apache.commons.csv.CSVFormat var23 = var15.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var27 = var25.withAllowMissingColumnNames(true);
    java.lang.Object[] var29 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var30 = var27.withHeaderComments(var29);
    org.apache.commons.csv.CSVFormat var32 = var30.withSkipHeaderRecord(false);
    java.lang.Character var33 = var30.getCommentMarker();
    java.lang.String[] var35 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var36 = var30.withHeader(var35);
    org.apache.commons.csv.CSVFormat var37 = var23.withHeader(var35);
    org.apache.commons.csv.CSVFormat var38 = var6.withHeaderComments((java.lang.Object[])var35);
    boolean var39 = var6.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test406");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var12.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord(false);
    boolean var32 = var31.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var34 = var31.withNullString("Delimiter=<#> Escape=<a> EmptyLines:ignored SkipHeaderRecord:false");
    java.lang.Character var35 = var31.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test407");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    org.apache.commons.csv.QuoteMode var18 = var15.getQuoteMode();
    org.apache.commons.csv.CSVFormat var20 = var15.withRecordSeparator("Delimiter=<4> EmptyLines:ignored SkipHeaderRecord:true HeaderComments:[0]");
    java.lang.String var21 = var20.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test408");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(true);
    boolean var8 = var5.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    java.lang.Object[] var14 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments(var14);
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var18 = var15.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var20 = var18.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var22 = var20.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var24 = var22.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var28 = var26.withAllowMissingColumnNames(true);
    java.lang.Object[] var30 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var31 = var28.withHeaderComments(var30);
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var37 = var35.withAllowMissingColumnNames(true);
    java.lang.Object[] var39 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var40 = var37.withHeaderComments(var39);
    org.apache.commons.csv.CSVFormat var42 = var40.withSkipHeaderRecord(false);
    java.lang.Character var43 = var40.getCommentMarker();
    java.lang.String[] var45 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var46 = var40.withHeader(var45);
    org.apache.commons.csv.CSVFormat var48 = var40.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var52 = var50.withAllowMissingColumnNames(true);
    java.lang.Object[] var54 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var55 = var52.withHeaderComments(var54);
    org.apache.commons.csv.CSVFormat var57 = var55.withSkipHeaderRecord(false);
    java.lang.Character var58 = var55.getCommentMarker();
    java.lang.String[] var60 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var61 = var55.withHeader(var60);
    org.apache.commons.csv.CSVFormat var62 = var48.withHeader(var60);
    java.lang.String var63 = var31.format((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var64 = var22.withHeaderComments((java.lang.Object[])var60);
    java.lang.String var65 = var5.format((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var67 = var5.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var69 = var67.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var71 = var67.withIgnoreEmptyLines(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var73 = var67.withCommentMarker((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "aa"+ "'", var65.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test409");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    char var5 = var4.getDelimiter();
    org.apache.commons.csv.CSVFormat var7 = var4.withQuote((java.lang.Character)'#');
    java.lang.String var8 = var7.toString();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.Object[] var15 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var16 = var13.withHeaderComments(var15);
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var21 = var19.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var23 = var21.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var25 = var23.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(true);
    java.lang.Object[] var31 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var32 = var29.withHeaderComments(var31);
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(true);
    java.lang.Object[] var40 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var41 = var38.withHeaderComments(var40);
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord(false);
    java.lang.Character var44 = var41.getCommentMarker();
    java.lang.String[] var46 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var47 = var41.withHeader(var46);
    org.apache.commons.csv.CSVFormat var49 = var41.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var53 = var51.withAllowMissingColumnNames(true);
    java.lang.Object[] var55 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var56 = var53.withHeaderComments(var55);
    org.apache.commons.csv.CSVFormat var58 = var56.withSkipHeaderRecord(false);
    java.lang.Character var59 = var56.getCommentMarker();
    java.lang.String[] var61 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var62 = var56.withHeader(var61);
    org.apache.commons.csv.CSVFormat var63 = var49.withHeader(var61);
    java.lang.String var64 = var32.format((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var65 = var23.withHeaderComments((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var66 = var9.withHeaderComments((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var68 = var9.withRecordSeparator("a");
    java.lang.String var69 = var9.getRecordSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Delimiter=<4> QuoteChar=<#> CommentStart=<a> SkipHeaderRecord:false"+ "'", var8.equals("Delimiter=<4> QuoteChar=<#> CommentStart=<a> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test410");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(true);
    boolean var8 = var7.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test411");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var4.withRecordSeparator("hi!");
    boolean var10 = var4.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var12 = var4.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVParser var13 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> Escape=<#> SkipHeaderRecord:false", var12);
    java.util.Map var14 = var13.getHeaderMap();
    var13.close();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test412");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var12.withRecordSeparator('4');
    org.apache.commons.csv.QuoteMode var30 = var12.getQuoteMode();
    org.apache.commons.csv.CSVFormat var32 = var12.withCommentMarker('#');
    boolean var33 = var32.isCommentMarkerSet();
    java.lang.Character var34 = var32.getCommentMarker();
    org.apache.commons.csv.CSVFormat var36 = var32.withQuote('a');
    org.apache.commons.csv.CSVFormat var38 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var40 = var38.withAllowMissingColumnNames(true);
    java.lang.Object[] var42 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var43 = var40.withHeaderComments(var42);
    org.apache.commons.csv.CSVFormat var45 = var43.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var46 = var43.withIgnoreEmptyLines();
    boolean var47 = var43.isQuoteCharacterSet();
    boolean var48 = var43.isNullStringSet();
    org.apache.commons.csv.CSVFormat var49 = var43.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var53 = var51.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var55 = var51.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var57 = var55.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var59 = var57.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var61 = var59.withNullString("Delimiter=<4> CommentStart=<#> RecordSeparator=<hi!> SkipHeaderRecord:false");
    boolean var62 = var61.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var64 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var66 = var64.withAllowMissingColumnNames(true);
    java.lang.Object[] var68 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var69 = var66.withHeaderComments(var68);
    org.apache.commons.csv.CSVFormat var71 = var69.withSkipHeaderRecord(false);
    java.lang.Character var72 = var69.getCommentMarker();
    java.lang.String[] var74 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var75 = var69.withHeader(var74);
    boolean var76 = var69.getIgnoreSurroundingSpaces();
    java.lang.Character var77 = var69.getCommentMarker();
    org.apache.commons.csv.QuoteMode var78 = var69.getQuoteMode();
    boolean var79 = var69.isNullStringSet();
    org.apache.commons.csv.CSVFormat var81 = var69.withEscape('#');
    org.apache.commons.csv.CSVFormat var83 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var84 = var83.withSkipHeaderRecord();
    java.lang.String[] var86 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var87 = var83.withHeader(var86);
    org.apache.commons.csv.CSVFormat var88 = var69.withHeader(var86);
    org.apache.commons.csv.CSVFormat var89 = var61.withHeader(var86);
    java.lang.String var90 = var49.format((java.lang.Object[])var86);
    java.lang.String var91 = var32.format((java.lang.Object[])var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + '#'+ "'", var34.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + ""+ "'", var90.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "# 0"+ "'", var91.equals("# 0"));

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test413");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("04");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test414");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    var5.close();
    java.util.Iterator var8 = var5.iterator();
    var5.close();
    var5.close();
    var5.close();
    long var12 = var5.getRecordNumber();
    java.util.Map var13 = var5.getHeaderMap();
    long var14 = var5.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0L);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test415");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var6.withQuote((java.lang.Character)'a');
    java.lang.Character var17 = var6.getCommentMarker();
    java.lang.String var18 = var6.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var22 = var20.withAllowMissingColumnNames(true);
    java.lang.Object[] var24 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var25 = var22.withHeaderComments(var24);
    org.apache.commons.csv.CSVFormat var27 = var25.withSkipHeaderRecord(false);
    java.lang.Character var28 = var25.getCommentMarker();
    java.lang.String[] var30 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var31 = var25.withHeader(var30);
    boolean var32 = var25.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var33 = var25.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var35 = var25.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var39 = var37.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var41 = var37.withIgnoreEmptyLines(false);
    boolean var42 = var41.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var44 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var46 = var44.withAllowMissingColumnNames(true);
    java.lang.Object[] var48 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var49 = var46.withHeaderComments(var48);
    org.apache.commons.csv.CSVFormat var50 = var49.withAllowMissingColumnNames();
    org.apache.commons.csv.QuoteMode var51 = var49.getQuoteMode();
    boolean var52 = var49.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var56 = var54.withAllowMissingColumnNames(true);
    java.lang.Object[] var58 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var59 = var56.withHeaderComments(var58);
    org.apache.commons.csv.CSVFormat var61 = var59.withSkipHeaderRecord(false);
    java.lang.Character var62 = var59.getCommentMarker();
    java.lang.String[] var64 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var65 = var59.withHeader(var64);
    java.lang.String var66 = var65.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var68 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var70 = var68.withAllowMissingColumnNames(true);
    java.lang.Object[] var72 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var73 = var70.withHeaderComments(var72);
    org.apache.commons.csv.CSVFormat var75 = var73.withSkipHeaderRecord(false);
    java.lang.Character var76 = var73.getCommentMarker();
    java.lang.String[] var78 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var79 = var73.withHeader(var78);
    org.apache.commons.csv.CSVFormat var80 = var65.withHeaderComments((java.lang.Object[])var78);
    java.lang.String var81 = var49.format((java.lang.Object[])var78);
    org.apache.commons.csv.CSVFormat var82 = var41.withHeaderComments((java.lang.Object[])var78);
    org.apache.commons.csv.CSVFormat var83 = var25.withHeader(var78);
    java.lang.String var84 = var6.format((java.lang.Object[])var78);
    java.lang.Character var85 = var6.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + ""+ "'", var81.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + ""+ "'", var84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test416");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withRecordSeparator("hi!");
    boolean var7 = var6.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var9 = var6.withQuote(' ');
    boolean var10 = var6.getSkipHeaderRecord();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0] Header:[]", var6);
    var11.close();
    var11.close();
    boolean var14 = var11.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test417");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.QuoteMode var13 = var6.getQuoteMode();
    boolean var14 = var6.isNullStringSet();
    org.apache.commons.csv.CSVFormat var16 = var6.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var18 = var16.withCommentMarker('4');
    org.apache.commons.csv.CSVFormat var20 = var16.withNullString("04");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test418");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    var5.close();
    long var8 = var5.getCurrentLineNumber();
    java.util.Iterator var9 = var5.iterator();
    var5.close();
    long var11 = var5.getRecordNumber();
    java.util.Map var12 = var5.getHeaderMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var13 = var5.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test419");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var6.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var20 = var18.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var22 = var18.withIgnoreEmptyLines(false);
    boolean var23 = var22.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var27 = var25.withAllowMissingColumnNames(true);
    java.lang.Object[] var29 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var30 = var27.withHeaderComments(var29);
    org.apache.commons.csv.CSVFormat var31 = var30.withAllowMissingColumnNames();
    org.apache.commons.csv.QuoteMode var32 = var30.getQuoteMode();
    boolean var33 = var30.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var37 = var35.withAllowMissingColumnNames(true);
    java.lang.Object[] var39 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var40 = var37.withHeaderComments(var39);
    org.apache.commons.csv.CSVFormat var42 = var40.withSkipHeaderRecord(false);
    java.lang.Character var43 = var40.getCommentMarker();
    java.lang.String[] var45 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var46 = var40.withHeader(var45);
    java.lang.String var47 = var46.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var51 = var49.withAllowMissingColumnNames(true);
    java.lang.Object[] var53 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var54 = var51.withHeaderComments(var53);
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord(false);
    java.lang.Character var57 = var54.getCommentMarker();
    java.lang.String[] var59 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var60 = var54.withHeader(var59);
    org.apache.commons.csv.CSVFormat var61 = var46.withHeaderComments((java.lang.Object[])var59);
    java.lang.String var62 = var30.format((java.lang.Object[])var59);
    org.apache.commons.csv.CSVFormat var63 = var22.withHeaderComments((java.lang.Object[])var59);
    org.apache.commons.csv.CSVFormat var64 = var6.withHeader(var59);
    boolean var65 = var64.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var67 = var64.withIgnoreEmptyLines(true);
    boolean var68 = var64.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var70 = var64.withEscape((java.lang.Character)'a');
    boolean var71 = var70.isQuoteCharacterSet();
    boolean var72 = var70.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + ""+ "'", var62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test420");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    java.lang.String var6 = var3.getNullString();
    boolean var7 = var3.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var9 = var3.withIgnoreSurroundingSpaces(true);
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var14 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = var14.withEscape('#');
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var20 = var18.withAllowMissingColumnNames(true);
    java.lang.Object[] var22 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var23 = var20.withHeaderComments(var22);
    org.apache.commons.csv.CSVFormat var25 = var23.withSkipHeaderRecord(false);
    java.lang.Character var26 = var23.getCommentMarker();
    java.lang.String[] var28 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var29 = var23.withHeader(var28);
    org.apache.commons.csv.CSVFormat var31 = var23.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var33 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var35 = var33.withAllowMissingColumnNames(true);
    java.lang.Object[] var37 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var38 = var35.withHeaderComments(var37);
    org.apache.commons.csv.CSVFormat var40 = var38.withSkipHeaderRecord(false);
    java.lang.Character var41 = var38.getCommentMarker();
    java.lang.String[] var43 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var44 = var38.withHeader(var43);
    org.apache.commons.csv.CSVFormat var45 = var31.withHeader(var43);
    java.lang.String var46 = var14.format((java.lang.Object[])var43);
    org.apache.commons.csv.CSVFormat var47 = var3.withHeader(var43);
    org.apache.commons.csv.CSVFormat var48 = var3.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var50 = var3.withDelimiter('a');
    java.lang.String var51 = var3.getNullString();
    boolean var52 = var3.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var54 = var3.withEscape(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + ""+ "'", var46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test421");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false HeaderComments:[0]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test422");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[0]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test423");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var15 = var14.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var19 = var15.withDelimiter('4');
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var22 = var21.isNullStringSet();
    boolean var23 = var21.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var25 = var21.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var27 = var21.withRecordSeparator("");
    org.apache.commons.csv.CSVFormat var29 = var21.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = var21.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var33 = var21.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var37 = var35.withAllowMissingColumnNames(true);
    java.lang.Object[] var39 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var40 = var37.withHeaderComments(var39);
    org.apache.commons.csv.CSVFormat var42 = var40.withSkipHeaderRecord(false);
    java.lang.Character var43 = var40.getCommentMarker();
    java.lang.String[] var45 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var46 = var40.withHeader(var45);
    java.lang.String var47 = var46.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var51 = var49.withAllowMissingColumnNames(true);
    java.lang.Object[] var53 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var54 = var51.withHeaderComments(var53);
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord(false);
    java.lang.Character var57 = var54.getCommentMarker();
    java.lang.String[] var59 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var60 = var54.withHeader(var59);
    org.apache.commons.csv.CSVFormat var61 = var46.withHeaderComments((java.lang.Object[])var59);
    boolean var62 = var61.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var64 = var61.withNullString("");
    boolean var65 = var64.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var67 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var69 = var67.withAllowMissingColumnNames(true);
    java.lang.Object[] var71 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var72 = var69.withHeaderComments(var71);
    org.apache.commons.csv.CSVFormat var74 = var72.withSkipHeaderRecord(false);
    java.lang.Character var75 = var72.getCommentMarker();
    java.lang.String[] var77 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var78 = var72.withHeader(var77);
    org.apache.commons.csv.CSVFormat var80 = var72.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var82 = var72.withRecordSeparator("Delimiter=<4> QuoteChar=<a> CommentStart=<#> SkipHeaderRecord:false");
    java.lang.String[] var83 = var82.getHeaderComments();
    org.apache.commons.csv.CSVFormat var84 = var64.withHeader(var83);
    org.apache.commons.csv.CSVFormat var85 = var33.withHeader(var83);
    org.apache.commons.csv.CSVFormat var86 = var15.withHeader(var83);
    org.apache.commons.csv.CSVFormat var87 = var86.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var89 = var86.withRecordSeparator('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test424");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var5 = var3.withQuote(' ');
    org.apache.commons.csv.CSVFormat var7 = var5.withQuote((java.lang.Character)'#');
    boolean var8 = var7.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator('a');
    java.lang.String var15 = var12.getNullString();
    org.apache.commons.csv.CSVFormat var17 = var12.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames(true);
    java.lang.Object[] var23 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var24 = var21.withHeaderComments(var23);
    org.apache.commons.csv.CSVFormat var26 = var24.withSkipHeaderRecord(false);
    java.lang.Character var27 = var24.getCommentMarker();
    java.lang.String[] var29 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var30 = var24.withHeader(var29);
    org.apache.commons.csv.CSVFormat var32 = var24.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var36 = var34.withAllowMissingColumnNames(true);
    java.lang.Object[] var38 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var39 = var36.withHeaderComments(var38);
    org.apache.commons.csv.CSVFormat var41 = var39.withSkipHeaderRecord(false);
    java.lang.Character var42 = var39.getCommentMarker();
    java.lang.String[] var44 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var45 = var39.withHeader(var44);
    org.apache.commons.csv.CSVFormat var46 = var32.withHeader(var44);
    org.apache.commons.csv.CSVFormat var47 = var17.withHeader(var44);
    org.apache.commons.csv.CSVFormat var48 = var7.withHeader(var44);
    java.lang.Character var49 = var48.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + '#'+ "'", var49.equals('#'));

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test425");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    java.lang.String var14 = var13.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var16 = var13.withQuote(' ');
    org.apache.commons.csv.CSVFormat var18 = var16.withEscape((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var20 = var18.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var21 = var18.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVParser var22 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> Escape=<a> EmptyLines:ignored SkipHeaderRecord:false", var18);
    long var23 = var22.getRecordNumber();
    long var24 = var22.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0L);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test426");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat.Predefined var1 = org.apache.commons.csv.CSVFormat.Predefined.valueOf("Delimiter=<4> QuoteChar=<a> SkipHeaderRecord:false HeaderComments:[0]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test427");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.String[] var5 = var2.getHeader();
    org.apache.commons.csv.CSVFormat var7 = var2.withCommentMarker('a');
    org.apache.commons.csv.CSVParser var8 = org.apache.commons.csv.CSVParser.parse("aa", var7);
    long var9 = var8.getRecordNumber();
    var8.close();
    long var11 = var8.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test428");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var6.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var18 = var6.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var22 = var20.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var24 = var20.withRecordSeparator("hi!");
    boolean var25 = var24.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var27 = var24.withQuote(' ');
    boolean var28 = var27.isQuoteCharacterSet();
    java.lang.Character var29 = var27.getCommentMarker();
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var35 = var31.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var37 = var35.withAllowMissingColumnNames(false);
    java.lang.String[] var38 = var35.getHeaderComments();
    java.lang.String var39 = var35.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var41 = var35.withQuote(' ');
    boolean var42 = var41.getSkipHeaderRecord();
    java.lang.String[] var43 = var41.getHeaderComments();
    org.apache.commons.csv.CSVFormat var45 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var47 = var45.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var49 = var47.withEscape(' ');
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var53 = var51.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var55 = var51.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var57 = var55.withQuote('a');
    java.lang.Object[] var58 = new java.lang.Object[] { var55};
    org.apache.commons.csv.CSVFormat var59 = var49.withHeaderComments(var58);
    java.lang.String var60 = var41.format(var58);
    org.apache.commons.csv.CSVFormat var61 = var27.withHeaderComments(var58);
    org.apache.commons.csv.CSVFormat var62 = var18.withHeaderComments(var58);
    org.apache.commons.csv.CSVFormat var64 = var18.withDelimiter(' ');
    org.apache.commons.csv.CSVFormat var65 = var18.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.QuoteMode var66 = var65.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "Delimiter=<4>  SkipHeaderRecord:false hi!"+ "'", var60.equals("Delimiter=<4>  SkipHeaderRecord:false hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test429");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    boolean var6 = var5.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var8 = var5.withQuote(' ');
    boolean var10 = var5.equals((java.lang.Object)true);
    org.apache.commons.csv.CSVFormat var11 = var5.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var5.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var15 = var5.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var19 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var20 = var19.isNullStringSet();
    org.apache.commons.csv.CSVFormat var22 = var19.withNullString("");
    org.apache.commons.csv.CSVFormat var24 = var19.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var26 = var24.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var30 = var28.withAllowMissingColumnNames(true);
    java.lang.Object[] var32 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var33 = var30.withHeaderComments(var32);
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord(false);
    java.lang.Character var36 = var33.getCommentMarker();
    java.lang.String[] var38 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var39 = var33.withHeader(var38);
    org.apache.commons.csv.CSVFormat var41 = var33.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var43 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var45 = var43.withAllowMissingColumnNames(true);
    java.lang.Object[] var47 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var48 = var45.withHeaderComments(var47);
    org.apache.commons.csv.CSVFormat var50 = var48.withSkipHeaderRecord(false);
    java.lang.Character var51 = var48.getCommentMarker();
    java.lang.String[] var53 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var54 = var48.withHeader(var53);
    org.apache.commons.csv.CSVFormat var55 = var41.withHeader(var53);
    org.apache.commons.csv.CSVFormat var56 = var24.withHeaderComments((java.lang.Object[])var53);
    org.apache.commons.csv.CSVFormat var57 = var15.withHeader(var53);
    org.apache.commons.csv.QuoteMode var58 = var57.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test430");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var12.withRecordSeparator('a');
    org.apache.commons.csv.CSVFormat var31 = var29.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var35 = var33.withQuote(' ');
    org.apache.commons.csv.CSVFormat var37 = var35.withEscape('a');
    java.lang.String[] var38 = var35.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test431");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    boolean var10 = var9.isNullStringSet();
    org.apache.commons.csv.CSVFormat var12 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var14 = var12.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var16 = var12.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(false);
    boolean var19 = var9.equals((java.lang.Object)var18);
    boolean var20 = var9.getIgnoreEmptyLines();
    java.lang.String var21 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Delimiter=<4> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]"+ "'", var21.equals("Delimiter=<4> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]"));

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test432");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    char var5 = var4.getDelimiter();
    org.apache.commons.csv.CSVFormat var7 = var4.withQuote((java.lang.Character)'#');
    java.lang.String var8 = var7.toString();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.Object[] var15 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var16 = var13.withHeaderComments(var15);
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var21 = var19.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var23 = var21.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var25 = var23.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(true);
    java.lang.Object[] var31 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var32 = var29.withHeaderComments(var31);
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(true);
    java.lang.Object[] var40 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var41 = var38.withHeaderComments(var40);
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord(false);
    java.lang.Character var44 = var41.getCommentMarker();
    java.lang.String[] var46 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var47 = var41.withHeader(var46);
    org.apache.commons.csv.CSVFormat var49 = var41.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var53 = var51.withAllowMissingColumnNames(true);
    java.lang.Object[] var55 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var56 = var53.withHeaderComments(var55);
    org.apache.commons.csv.CSVFormat var58 = var56.withSkipHeaderRecord(false);
    java.lang.Character var59 = var56.getCommentMarker();
    java.lang.String[] var61 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var62 = var56.withHeader(var61);
    org.apache.commons.csv.CSVFormat var63 = var49.withHeader(var61);
    java.lang.String var64 = var32.format((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var65 = var23.withHeaderComments((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var66 = var9.withHeaderComments((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var68 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var70 = var68.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var71 = var68.withAllowMissingColumnNames();
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    org.apache.commons.csv.CSVFormat var73 = var66.withHeaderComments(var72);
    java.lang.Character var74 = var66.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var75 = var66.withIgnoreSurroundingSpaces();
    boolean var76 = var66.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Delimiter=<4> QuoteChar=<#> CommentStart=<a> SkipHeaderRecord:false"+ "'", var8.equals("Delimiter=<4> QuoteChar=<#> CommentStart=<a> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + '#'+ "'", var74.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test433");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var3 = var2.isNullStringSet();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var9 = var7.withAllowMissingColumnNames(true);
    java.lang.Object[] var11 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var12 = var9.withHeaderComments(var11);
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord(false);
    java.lang.Character var15 = var12.getCommentMarker();
    java.lang.String[] var17 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var18 = var12.withHeader(var17);
    java.lang.String var19 = var18.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var23 = var21.withAllowMissingColumnNames(true);
    java.lang.Object[] var25 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var26 = var23.withHeaderComments(var25);
    org.apache.commons.csv.CSVFormat var28 = var26.withSkipHeaderRecord(false);
    java.lang.Character var29 = var26.getCommentMarker();
    java.lang.String[] var31 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var32 = var26.withHeader(var31);
    org.apache.commons.csv.CSVFormat var33 = var18.withHeaderComments((java.lang.Object[])var31);
    java.lang.String var34 = var5.format((java.lang.Object[])var31);
    boolean var35 = var5.isQuoteCharacterSet();
    org.apache.commons.csv.CSVParser var36 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false", var5);
    org.apache.commons.csv.CSVFormat var37 = var5.withIgnoreSurroundingSpaces();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var39 = var5.withCommentMarker('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test434");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withRecordSeparator("hi!");
    boolean var7 = var6.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var9 = var6.withQuote(' ');
    boolean var10 = var6.getSkipHeaderRecord();
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0] Header:[]", var6);
    boolean var12 = var11.isClosed();
    java.util.Map var13 = var11.getHeaderMap();
    java.util.List var14 = var11.getRecords();
    long var15 = var11.getCurrentLineNumber();
    long var16 = var11.getCurrentLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0L);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test435");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var17 = var13.withNullString("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]");
    boolean var18 = var17.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test436");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withQuote((java.lang.Character)'a');
    boolean var6 = var3.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var12 = var8.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var14 = var12.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var18 = var16.withNullString("Delimiter=<4> CommentStart=<#> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var20 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var22 = var20.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var24 = var20.withIgnoreEmptyLines(false);
    java.lang.String var25 = var20.getNullString();
    org.apache.commons.csv.CSVFormat var26 = var20.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var29 = var28.isNullStringSet();
    org.apache.commons.csv.CSVFormat var31 = var28.withCommentMarker((java.lang.Character)'a');
    java.lang.String var32 = var31.getNullString();
    org.apache.commons.csv.CSVFormat var34 = var31.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var37 = var36.withSkipHeaderRecord();
    java.lang.String[] var39 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var40 = var36.withHeader(var39);
    java.lang.String var41 = var31.format((java.lang.Object[])var39);
    java.lang.String var42 = var20.format((java.lang.Object[])var39);
    org.apache.commons.csv.CSVFormat var43 = var16.withHeaderComments((java.lang.Object[])var39);
    org.apache.commons.csv.CSVFormat var44 = var3.withHeader(var39);
    org.apache.commons.csv.CSVFormat var45 = var44.withIgnoreEmptyLines();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test437");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    boolean var6 = var5.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var8 = var5.withQuote(' ');
    boolean var10 = var5.equals((java.lang.Object)true);
    org.apache.commons.csv.CSVFormat var11 = var5.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var5.withRecordSeparator("Delimiter=<4> QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]");
    org.apache.commons.csv.CSVFormat var15 = var5.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreEmptyLines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test438");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.QuoteMode var4 = var3.getQuoteMode();
    org.apache.commons.csv.CSVFormat var6 = var3.withEscape('#');
    char var7 = var6.getDelimiter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == '4');

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test439");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    boolean var9 = var8.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var8.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var12 = var8.withAllowMissingColumnNames();
    java.lang.String var13 = var12.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test440");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    boolean var3 = var1.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var8 = var7.isNullStringSet();
    org.apache.commons.csv.CSVFormat var10 = var7.withCommentMarker((java.lang.Character)'a');
    java.lang.String var11 = var10.getNullString();
    org.apache.commons.csv.CSVFormat var13 = var10.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var16 = var15.withSkipHeaderRecord();
    java.lang.String[] var18 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var19 = var15.withHeader(var18);
    java.lang.String var20 = var10.format((java.lang.Object[])var18);
    org.apache.commons.csv.CSVFormat var21 = var1.withHeader(var18);
    java.lang.Character var22 = var1.getEscapeCharacter();
    java.lang.String var23 = var1.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test441");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote('a');
    org.apache.commons.csv.CSVFormat var16 = var14.withNullString("Delimiter=<4> QuoteChar=<a> CommentStart=< > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]");
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var20 = var18.withAllowMissingColumnNames(true);
    java.lang.Object[] var22 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var23 = var20.withHeaderComments(var22);
    org.apache.commons.csv.CSVFormat var24 = var23.withAllowMissingColumnNames();
    boolean var25 = var24.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(true);
    java.lang.Object[] var31 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var32 = var29.withHeaderComments(var31);
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord(false);
    java.lang.Character var35 = var32.getCommentMarker();
    java.lang.String[] var37 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var38 = var32.withHeader(var37);
    java.lang.String var39 = var38.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var43 = var41.withAllowMissingColumnNames(true);
    java.lang.Object[] var45 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var46 = var43.withHeaderComments(var45);
    org.apache.commons.csv.CSVFormat var48 = var46.withSkipHeaderRecord(false);
    java.lang.Character var49 = var46.getCommentMarker();
    java.lang.String[] var51 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var52 = var46.withHeader(var51);
    org.apache.commons.csv.CSVFormat var53 = var38.withHeaderComments((java.lang.Object[])var51);
    org.apache.commons.csv.CSVFormat var55 = var53.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var58 = var57.withSkipHeaderRecord();
    java.lang.String[] var60 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var61 = var57.withHeader(var60);
    org.apache.commons.csv.CSVFormat var62 = var55.withHeaderComments((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var63 = var24.withHeaderComments((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var64 = var16.withHeaderComments((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var66 = var64.withCommentMarker((java.lang.Character)' ');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var68 = var66.withQuote((java.lang.Character)' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test442");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var8 = var2.withEscape('a');
    org.apache.commons.csv.CSVFormat var10 = var8.withDelimiter('#');
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("hi!", var10);
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var14 = var13.isNullStringSet();
    boolean var15 = var10.equals((java.lang.Object)var14);
    org.apache.commons.csv.CSVFormat var17 = var10.withIgnoreEmptyLines(true);
    java.lang.Character var18 = var17.getQuoteCharacter();
    boolean var19 = var17.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test443");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var17 = var15.withIgnoreHeaderCase(false);
    boolean var18 = var17.getIgnoreEmptyLines();
    boolean var19 = var17.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var22 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var24 = var22.withAllowMissingColumnNames(true);
    java.lang.Object[] var26 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var27 = var24.withHeaderComments(var26);
    org.apache.commons.csv.CSVFormat var29 = var27.withSkipHeaderRecord(false);
    java.lang.Character var30 = var27.getCommentMarker();
    java.lang.String[] var32 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var33 = var27.withHeader(var32);
    java.lang.String var34 = var33.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(true);
    java.lang.Object[] var40 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var41 = var38.withHeaderComments(var40);
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord(false);
    java.lang.Character var44 = var41.getCommentMarker();
    java.lang.String[] var46 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var47 = var41.withHeader(var46);
    org.apache.commons.csv.CSVFormat var48 = var33.withHeaderComments((java.lang.Object[])var46);
    org.apache.commons.csv.CSVParser var49 = org.apache.commons.csv.CSVParser.parse("hi!", var33);
    java.lang.String[] var50 = var33.getHeader();
    org.apache.commons.csv.CSVFormat var51 = var17.withHeaderComments((java.lang.Object[])var50);
    boolean var52 = var51.isNullStringSet();
    org.apache.commons.csv.CSVFormat var53 = var51.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var55 = var53.withRecordSeparator('a');
    boolean var56 = var55.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test444");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var15 = var6.withEscape((java.lang.Character)'a');
    java.lang.Object[] var17 = new java.lang.Object[] { (short)100};
    org.apache.commons.csv.CSVFormat var18 = var15.withHeaderComments(var17);
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var23 = var21.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var25 = var21.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var27 = var21.withEscape('a');
    org.apache.commons.csv.CSVFormat var29 = var27.withDelimiter('#');
    org.apache.commons.csv.CSVParser var30 = org.apache.commons.csv.CSVParser.parse("hi!", var29);
    org.apache.commons.csv.CSVFormat var31 = var29.withIgnoreEmptyLines();
    boolean var32 = var18.equals((java.lang.Object)var29);
    org.apache.commons.csv.CSVFormat var34 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var36 = var34.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var38 = var34.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var40 = var38.withQuote('a');
    org.apache.commons.csv.CSVFormat var42 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var44 = var42.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var46 = var42.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var48 = var42.withEscape('a');
    org.apache.commons.csv.CSVFormat var50 = var42.withNullString("");
    java.lang.String var51 = var42.toString();
    java.lang.Character var52 = var42.getEscapeCharacter();
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var55 = var54.isNullStringSet();
    org.apache.commons.csv.CSVFormat var57 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var59 = var57.withAllowMissingColumnNames(true);
    java.lang.Object[] var61 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var62 = var59.withHeaderComments(var61);
    org.apache.commons.csv.CSVFormat var64 = var62.withSkipHeaderRecord(false);
    java.lang.Character var65 = var62.getCommentMarker();
    java.lang.String[] var67 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var68 = var62.withHeader(var67);
    java.lang.String var69 = var68.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var71 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var73 = var71.withAllowMissingColumnNames(true);
    java.lang.Object[] var75 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var76 = var73.withHeaderComments(var75);
    org.apache.commons.csv.CSVFormat var78 = var76.withSkipHeaderRecord(false);
    java.lang.Character var79 = var76.getCommentMarker();
    java.lang.String[] var81 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var82 = var76.withHeader(var81);
    org.apache.commons.csv.CSVFormat var83 = var68.withHeaderComments((java.lang.Object[])var81);
    org.apache.commons.csv.CSVFormat var85 = var83.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var87 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var88 = var87.withSkipHeaderRecord();
    java.lang.String[] var90 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var91 = var87.withHeader(var90);
    org.apache.commons.csv.CSVFormat var92 = var85.withHeaderComments((java.lang.Object[])var90);
    boolean var93 = var85.isEscapeCharacterSet();
    java.lang.String[] var94 = var85.getHeaderComments();
    org.apache.commons.csv.CSVFormat var95 = var54.withHeaderComments((java.lang.Object[])var94);
    boolean var96 = var42.equals((java.lang.Object)var94);
    org.apache.commons.csv.CSVFormat var97 = var38.withHeader(var94);
    org.apache.commons.csv.CSVFormat var98 = var29.withHeaderComments((java.lang.Object[])var94);
    java.lang.String[] var99 = var98.getHeader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false"+ "'", var51.equals("Delimiter=<4> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test445");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var6 = var1.withQuote((java.lang.Character)'a');
    boolean var7 = var6.getIgnoreEmptyLines();
    java.lang.Character var8 = var6.getCommentMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test446");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var2.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var8 = var2.withEscape('a');
    org.apache.commons.csv.CSVFormat var10 = var8.withDelimiter('#');
    org.apache.commons.csv.CSVParser var11 = org.apache.commons.csv.CSVParser.parse("hi!", var10);
    org.apache.commons.csv.CSVFormat var12 = var10.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var10.withRecordSeparator('a');
    java.lang.Character var15 = var10.getEscapeCharacter();
    org.apache.commons.csv.QuoteMode var16 = var10.getQuoteMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 'a'+ "'", var15.equals('a'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test447");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    java.lang.String var5 = var4.getNullString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var9 = var7.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var11 = var9.withSkipHeaderRecord(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var13 = var11.withQuote('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test448");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    boolean var6 = var5.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var8 = var5.withQuote(' ');
    boolean var10 = var5.equals((java.lang.Object)true);
    org.apache.commons.csv.CSVFormat var11 = var5.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var13 = var5.withRecordSeparator("Delimiter=<4> QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]");
    org.apache.commons.csv.CSVFormat var15 = var5.withDelimiter('a');
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test449");


    org.apache.commons.csv.CSVFormat var3 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var5 = var3.withAllowMissingColumnNames(true);
    java.lang.Object[] var7 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var8 = var5.withHeaderComments(var7);
    org.apache.commons.csv.CSVFormat var10 = var8.withSkipHeaderRecord(false);
    java.lang.Character var11 = var8.getCommentMarker();
    java.lang.String[] var13 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var14 = var8.withHeader(var13);
    org.apache.commons.csv.CSVFormat var16 = var8.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVParser var17 = org.apache.commons.csv.CSVParser.parse("hi!", var8);
    org.apache.commons.csv.CSVFormat var18 = var8.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var20 = var18.withEscape('#');
    java.lang.String[] var21 = var18.getHeader();
    org.apache.commons.csv.CSVParser var22 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0] Header:[]", var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test450");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var32 = var31.withSkipHeaderRecord();
    java.lang.String[] var34 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var35 = var31.withHeader(var34);
    org.apache.commons.csv.CSVFormat var36 = var29.withHeaderComments((java.lang.Object[])var34);
    org.apache.commons.csv.CSVFormat var38 = var29.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var40 = var29.withEscape((java.lang.Character)'#');
    java.lang.String var41 = var40.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var43 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var45 = var43.withAllowMissingColumnNames(true);
    java.lang.Object[] var47 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var48 = var45.withHeaderComments(var47);
    org.apache.commons.csv.CSVFormat var50 = var48.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var51 = var48.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var53 = var51.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var55 = var53.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var57 = var55.withIgnoreEmptyLines(true);
    java.lang.String[] var58 = var57.getHeader();
    org.apache.commons.csv.CSVFormat var60 = var57.withEscape((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var63 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var65 = var63.withAllowMissingColumnNames(true);
    java.lang.Object[] var67 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var68 = var65.withHeaderComments(var67);
    org.apache.commons.csv.CSVFormat var70 = var68.withSkipHeaderRecord(false);
    java.lang.Character var71 = var68.getCommentMarker();
    java.lang.String[] var73 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var74 = var68.withHeader(var73);
    java.lang.String var75 = var74.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var77 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var79 = var77.withAllowMissingColumnNames(true);
    java.lang.Object[] var81 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var82 = var79.withHeaderComments(var81);
    org.apache.commons.csv.CSVFormat var84 = var82.withSkipHeaderRecord(false);
    java.lang.Character var85 = var82.getCommentMarker();
    java.lang.String[] var87 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var88 = var82.withHeader(var87);
    org.apache.commons.csv.CSVFormat var89 = var74.withHeaderComments((java.lang.Object[])var87);
    org.apache.commons.csv.CSVParser var90 = org.apache.commons.csv.CSVParser.parse("hi!", var74);
    java.lang.String[] var91 = var74.getHeader();
    java.lang.String var92 = var57.format((java.lang.Object[])var91);
    java.lang.String var93 = var40.format((java.lang.Object[])var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "0aa"+ "'", var92.equals("0aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + ""+ "'", var93.equals(""));

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test451");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var4 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var6 = var4.withCommentMarker('#');
    boolean var7 = var4.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat.Predefined[] var8 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var9 = var4.withHeaderComments((java.lang.Object[])var8);
    org.apache.commons.csv.CSVFormat var10 = var4.withSkipHeaderRecord();
    org.apache.commons.csv.QuoteMode var11 = var4.getQuoteMode();
    java.lang.Character var12 = var4.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test452");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(true);
    boolean var8 = var5.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    java.lang.Object[] var14 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments(var14);
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var18 = var15.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var20 = var18.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var22 = var20.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var24 = var22.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var28 = var26.withAllowMissingColumnNames(true);
    java.lang.Object[] var30 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var31 = var28.withHeaderComments(var30);
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var37 = var35.withAllowMissingColumnNames(true);
    java.lang.Object[] var39 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var40 = var37.withHeaderComments(var39);
    org.apache.commons.csv.CSVFormat var42 = var40.withSkipHeaderRecord(false);
    java.lang.Character var43 = var40.getCommentMarker();
    java.lang.String[] var45 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var46 = var40.withHeader(var45);
    org.apache.commons.csv.CSVFormat var48 = var40.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var52 = var50.withAllowMissingColumnNames(true);
    java.lang.Object[] var54 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var55 = var52.withHeaderComments(var54);
    org.apache.commons.csv.CSVFormat var57 = var55.withSkipHeaderRecord(false);
    java.lang.Character var58 = var55.getCommentMarker();
    java.lang.String[] var60 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var61 = var55.withHeader(var60);
    org.apache.commons.csv.CSVFormat var62 = var48.withHeader(var60);
    java.lang.String var63 = var31.format((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var64 = var22.withHeaderComments((java.lang.Object[])var60);
    java.lang.String var65 = var5.format((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var67 = var5.withIgnoreEmptyLines(false);
    boolean var68 = var67.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "aa"+ "'", var65.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test453");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var5.getHeaderComments();
    java.lang.String var9 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var5.withQuote(' ');
    org.apache.commons.csv.CSVFormat var13 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var15 = var13.withCommentMarker('#');
    java.lang.String[] var16 = var15.getHeaderComments();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var20 = var18.withAllowMissingColumnNames(true);
    java.lang.Object[] var22 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var23 = var20.withHeaderComments(var22);
    org.apache.commons.csv.CSVFormat var25 = var23.withSkipHeaderRecord(false);
    java.lang.Character var26 = var25.getCommentMarker();
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var30 = var28.withAllowMissingColumnNames(true);
    java.lang.Object[] var32 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var33 = var30.withHeaderComments(var32);
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var36 = var33.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var38 = var36.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var40 = var38.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var41 = var38.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var43 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var45 = var43.withAllowMissingColumnNames(true);
    java.lang.Object[] var47 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var48 = var45.withHeaderComments(var47);
    org.apache.commons.csv.CSVFormat var50 = var48.withSkipHeaderRecord(false);
    java.lang.Character var51 = var48.getCommentMarker();
    java.lang.String[] var53 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var54 = var48.withHeader(var53);
    org.apache.commons.csv.CSVFormat var56 = var48.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var58 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var60 = var58.withAllowMissingColumnNames(true);
    java.lang.Object[] var62 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var63 = var60.withHeaderComments(var62);
    org.apache.commons.csv.CSVFormat var65 = var63.withSkipHeaderRecord(false);
    java.lang.Character var66 = var63.getCommentMarker();
    java.lang.String[] var68 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var69 = var63.withHeader(var68);
    org.apache.commons.csv.CSVFormat var70 = var56.withHeader(var68);
    org.apache.commons.csv.CSVFormat var71 = var41.withHeader(var68);
    org.apache.commons.csv.CSVFormat var72 = var25.withHeaderComments((java.lang.Object[])var68);
    org.apache.commons.csv.CSVFormat var73 = var15.withHeaderComments((java.lang.Object[])var68);
    org.apache.commons.csv.CSVFormat var74 = var5.withHeaderComments((java.lang.Object[])var68);
    org.apache.commons.csv.CSVFormat var75 = var74.withAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test454");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var14 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var29 = var21.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    java.lang.Object[] var35 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var36 = var33.withHeaderComments(var35);
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord(false);
    java.lang.Character var39 = var36.getCommentMarker();
    java.lang.String[] var41 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var42 = var36.withHeader(var41);
    org.apache.commons.csv.CSVFormat var43 = var29.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = var14.withHeader(var41);
    org.apache.commons.csv.CSVFormat var46 = var14.withIgnoreEmptyLines(true);
    org.apache.commons.csv.QuoteMode var47 = var14.getQuoteMode();
    org.apache.commons.csv.CSVFormat var49 = var14.withIgnoreHeaderCase(false);
    java.lang.String var50 = var49.toString();
    org.apache.commons.csv.CSVFormat var52 = var49.withNullString("Delimiter=<#> Escape=<a> EmptyLines:ignored SkipHeaderRecord:false");
    boolean var53 = var52.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "Delimiter=<4> QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]"+ "'", var50.equals("Delimiter=<4> QuoteChar=<a> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test455");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    java.lang.Character var10 = var7.getCommentMarker();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var7.withHeader(var12);
    org.apache.commons.csv.CSVFormat var15 = var7.withAllowMissingColumnNames(false);
    java.lang.String var16 = var7.getNullString();
    org.apache.commons.csv.CSVFormat var18 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var19 = var18.isNullStringSet();
    org.apache.commons.csv.CSVFormat var21 = var18.withCommentMarker((java.lang.Character)'a');
    java.lang.String var22 = var21.getNullString();
    org.apache.commons.csv.CSVFormat var24 = var21.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var27 = var26.withSkipHeaderRecord();
    java.lang.String[] var29 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var30 = var26.withHeader(var29);
    java.lang.String var31 = var21.format((java.lang.Object[])var29);
    org.apache.commons.csv.CSVFormat var32 = var7.withHeader(var29);
    org.apache.commons.csv.CSVParser var33 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]", var7);
    org.apache.commons.csv.CSVFormat var35 = var7.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var36 = var35.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var38 = var35.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var40 = var38.withIgnoreHeaderCase(false);
    boolean var41 = var38.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test456");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var9 = var1.withNullString("");
    org.apache.commons.csv.CSVFormat var11 = var1.withNullString("hi!");
    org.apache.commons.csv.CSVFormat var13 = var11.withIgnoreEmptyLines(true);
    java.lang.String var14 = var13.getNullString();
    org.apache.commons.csv.CSVFormat var16 = var13.withIgnoreSurroundingSpaces(false);
    boolean var17 = var13.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var19 = var13.withNullString("Delimiter=<4> NullString=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var21 = var19.withQuote('#');
    boolean var22 = var21.getIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var24 = var21.withSkipHeaderRecord(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test457");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    boolean var7 = var6.isCommentMarkerSet();
    java.lang.Character var8 = var6.getEscapeCharacter();
    boolean var9 = var6.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test458");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    boolean var12 = var9.getIgnoreHeaderCase();
    boolean var13 = var9.isQuoteCharacterSet();
    org.apache.commons.csv.CSVFormat var14 = var9.withIgnoreEmptyLines();
    boolean var15 = var14.getSkipHeaderRecord();
    java.lang.String var16 = var14.getNullString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test459");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape(' ');
    org.apache.commons.csv.CSVFormat var8 = var4.withCommentMarker('#');
    org.apache.commons.csv.CSVParser var9 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false", var8);
    var9.close();
    java.util.Iterator var11 = var9.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var12 = var9.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test460");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(false);
    java.lang.String var30 = var27.toString();
    boolean var31 = var27.getAllowMissingColumnNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]"+ "'", var30.equals("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[] Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test461");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote('a');
    org.apache.commons.csv.CSVFormat var16 = var14.withNullString("Delimiter=<4> QuoteChar=<a> CommentStart=< > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]");
    org.apache.commons.csv.CSVFormat var18 = var16.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var20 = var16.withEscape(' ');
    org.apache.commons.csv.CSVFormat var22 = var16.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var24 = var22.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test462");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var6.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var18 = var6.withDelimiter('a');
    boolean var19 = var6.getIgnoreSurroundingSpaces();
    java.lang.String[] var20 = var6.getHeaderComments();
    java.lang.String var21 = var6.getNullString();
    org.apache.commons.csv.CSVFormat var22 = var6.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = var6.withCommentMarker((java.lang.Character)' ');
    java.lang.Character var25 = var24.getCommentMarker();
    boolean var26 = var24.getSkipHeaderRecord();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ' '+ "'", var25.equals(' '));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test463");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var17 = var13.withNullString("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0]");
    org.apache.commons.csv.CSVFormat var18 = var13.withSkipHeaderRecord();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var20 = var18.withCommentMarker((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test464");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines();
    boolean var15 = var14.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var17.withSkipHeaderRecord();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var17.withHeader(var20);
    org.apache.commons.csv.CSVFormat var22 = var14.withHeader(var20);
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var24.withAllowMissingColumnNames(true);
    java.lang.Object[] var28 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var29 = var26.withHeaderComments(var28);
    boolean var30 = var29.isCommentMarkerSet();
    java.lang.Character var31 = var29.getEscapeCharacter();
    java.lang.String var32 = var29.getNullString();
    org.apache.commons.csv.CSVFormat var34 = var29.withEscape('a');
    org.apache.commons.csv.CSVFormat var35 = var29.withIgnoreEmptyLines();
    boolean var36 = var22.equals((java.lang.Object)var35);
    java.lang.String[] var37 = var22.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test465");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    boolean var8 = var5.isEscapeCharacterSet();
    boolean var9 = var5.isEscapeCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test466");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = var12.withQuote(' ');
    org.apache.commons.csv.CSVFormat var17 = var15.withEscape((java.lang.Character)' ');
    java.lang.Character var18 = var17.getQuoteCharacter();
    java.lang.Character var19 = var17.getCommentMarker();
    boolean var20 = var17.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ' '+ "'", var18.equals(' '));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test467");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var4 = var1.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var6 = var4.withEscape('#');
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    java.lang.Object[] var12 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var13 = var10.withHeaderComments(var12);
    org.apache.commons.csv.CSVFormat var15 = var13.withSkipHeaderRecord(false);
    java.lang.Character var16 = var13.getCommentMarker();
    java.lang.String[] var18 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var19 = var13.withHeader(var18);
    org.apache.commons.csv.CSVFormat var21 = var13.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var23 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var25 = var23.withAllowMissingColumnNames(true);
    java.lang.Object[] var27 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var28 = var25.withHeaderComments(var27);
    org.apache.commons.csv.CSVFormat var30 = var28.withSkipHeaderRecord(false);
    java.lang.Character var31 = var28.getCommentMarker();
    java.lang.String[] var33 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var34 = var28.withHeader(var33);
    org.apache.commons.csv.CSVFormat var35 = var21.withHeader(var33);
    java.lang.String var36 = var4.format((java.lang.Object[])var33);
    org.apache.commons.csv.CSVFormat.Predefined[] var37 = org.apache.commons.csv.CSVFormat.Predefined.values();
    org.apache.commons.csv.CSVFormat var38 = var4.withHeaderComments((java.lang.Object[])var37);
    org.apache.commons.csv.CSVFormat var40 = var38.withRecordSeparator("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    java.lang.String var41 = var40.getNullString();
    java.lang.String var42 = var40.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Delimiter=<4> RecordSeparator=<Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false> SkipHeaderRecord:false HeaderComments:[Default, Excel, MySQL, RFC4180, TDF]"+ "'", var42.equals("Delimiter=<4> RecordSeparator=<Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false> SkipHeaderRecord:false HeaderComments:[Default, Excel, MySQL, RFC4180, TDF]"));

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test468");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var4.withRecordSeparator('a');
    java.lang.Character var7 = var4.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withAllowMissingColumnNames(true);
    java.lang.Object[] var13 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var14 = var11.withHeaderComments(var13);
    org.apache.commons.csv.CSVFormat var16 = var14.withSkipHeaderRecord(false);
    java.lang.Character var17 = var14.getCommentMarker();
    java.lang.String[] var19 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var20 = var14.withHeader(var19);
    org.apache.commons.csv.CSVFormat var21 = var4.withHeader(var19);
    org.apache.commons.csv.CSVFormat var22 = var21.withIgnoreSurroundingSpaces();
    boolean var23 = var22.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var27 = var25.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var29 = var25.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var31 = var29.withAllowMissingColumnNames(false);
    java.lang.String var32 = var29.toString();
    boolean var33 = var22.equals((java.lang.Object)var29);
    org.apache.commons.csv.CSVFormat var35 = var22.withIgnoreHeaderCase(false);
    boolean var37 = var22.equals((java.lang.Object)"Delimiter=<4> QuoteChar=< > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0] Header:[]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false"+ "'", var32.equals("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test469");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var6 = var1.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var8 = var6.withIgnoreSurroundingSpaces(true);
    java.lang.Character var9 = var8.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test470");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    java.lang.String var6 = var1.getNullString();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    java.lang.String[] var11 = var8.getHeader();
    org.apache.commons.csv.CSVFormat var13 = var8.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var19 = var17.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames(true);
    boolean var22 = var19.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var24.withAllowMissingColumnNames(true);
    java.lang.Object[] var28 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var29 = var26.withHeaderComments(var28);
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var32 = var29.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var34 = var32.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var36 = var34.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var38 = var36.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var42 = var40.withAllowMissingColumnNames(true);
    java.lang.Object[] var44 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var45 = var42.withHeaderComments(var44);
    org.apache.commons.csv.CSVFormat var47 = var45.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var51 = var49.withAllowMissingColumnNames(true);
    java.lang.Object[] var53 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var54 = var51.withHeaderComments(var53);
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord(false);
    java.lang.Character var57 = var54.getCommentMarker();
    java.lang.String[] var59 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var60 = var54.withHeader(var59);
    org.apache.commons.csv.CSVFormat var62 = var54.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var64 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var66 = var64.withAllowMissingColumnNames(true);
    java.lang.Object[] var68 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var69 = var66.withHeaderComments(var68);
    org.apache.commons.csv.CSVFormat var71 = var69.withSkipHeaderRecord(false);
    java.lang.Character var72 = var69.getCommentMarker();
    java.lang.String[] var74 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var75 = var69.withHeader(var74);
    org.apache.commons.csv.CSVFormat var76 = var62.withHeader(var74);
    java.lang.String var77 = var45.format((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var78 = var36.withHeaderComments((java.lang.Object[])var74);
    java.lang.String var79 = var19.format((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var80 = var13.withHeader(var74);
    org.apache.commons.csv.CSVFormat var81 = var1.withHeaderComments((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var82 = var1.withIgnoreSurroundingSpaces();
    boolean var83 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var85 = var1.withCommentMarker(' ');
    org.apache.commons.csv.QuoteMode var86 = var1.getQuoteMode();
    org.apache.commons.csv.CSVFormat var88 = var1.withEscape((java.lang.Character)' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + ""+ "'", var77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "aa"+ "'", var79.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test471");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    var5.close();
    java.util.Iterator var8 = var5.iterator();
    var5.close();
    java.util.Map var10 = var5.getHeaderMap();
    java.util.Map var11 = var5.getHeaderMap();
    boolean var12 = var5.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test472");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    java.lang.Object[] var14 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments(var14);
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord(false);
    java.lang.Character var18 = var15.getCommentMarker();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var15.withHeader(var20);
    org.apache.commons.csv.CSVFormat var23 = var15.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var27 = var25.withAllowMissingColumnNames(true);
    java.lang.Object[] var29 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var30 = var27.withHeaderComments(var29);
    org.apache.commons.csv.CSVFormat var32 = var30.withSkipHeaderRecord(false);
    java.lang.Character var33 = var30.getCommentMarker();
    java.lang.String[] var35 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var36 = var30.withHeader(var35);
    org.apache.commons.csv.CSVFormat var37 = var23.withHeader(var35);
    java.lang.String var38 = var6.format((java.lang.Object[])var35);
    org.apache.commons.csv.CSVFormat var40 = var6.withSkipHeaderRecord(true);
    java.lang.Character var41 = var6.getCommentMarker();
    org.apache.commons.csv.CSVFormat var43 = var6.withRecordSeparator(' ');
    org.apache.commons.csv.CSVFormat var44 = var43.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var46 = var43.withIgnoreSurroundingSpaces(false);
    org.apache.commons.csv.CSVFormat var48 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var50 = var48.withAllowMissingColumnNames(true);
    java.lang.Object[] var52 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var53 = var50.withHeaderComments(var52);
    org.apache.commons.csv.CSVFormat var55 = var53.withSkipHeaderRecord(false);
    java.lang.Character var56 = var53.getCommentMarker();
    java.lang.String[] var58 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var59 = var53.withHeader(var58);
    boolean var60 = var53.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var62 = var53.withEscape((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var64 = var62.withIgnoreSurroundingSpaces(true);
    java.lang.String[] var65 = var64.getHeaderComments();
    org.apache.commons.csv.CSVFormat var66 = var46.withHeader(var65);
    org.apache.commons.csv.CSVFormat var68 = var66.withCommentMarker('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test473");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var9.withQuote('a');
    org.apache.commons.csv.CSVFormat var15 = var9.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = var9.withIgnoreEmptyLines();
    java.lang.Character var17 = var16.getQuoteCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test474");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    java.util.Iterator var7 = var5.iterator();
    java.util.Map var8 = var5.getHeaderMap();
    long var9 = var5.getRecordNumber();
    java.util.Map var10 = var5.getHeaderMap();
    long var11 = var5.getRecordNumber();
    boolean var12 = var5.isClosed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var13 = var5.getRecords();
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test475");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var3 = var2.isNullStringSet();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var9 = var7.withAllowMissingColumnNames(true);
    java.lang.Object[] var11 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var12 = var9.withHeaderComments(var11);
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord(false);
    java.lang.Character var15 = var12.getCommentMarker();
    java.lang.String[] var17 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var18 = var12.withHeader(var17);
    java.lang.String var19 = var18.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var23 = var21.withAllowMissingColumnNames(true);
    java.lang.Object[] var25 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var26 = var23.withHeaderComments(var25);
    org.apache.commons.csv.CSVFormat var28 = var26.withSkipHeaderRecord(false);
    java.lang.Character var29 = var26.getCommentMarker();
    java.lang.String[] var31 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var32 = var26.withHeader(var31);
    org.apache.commons.csv.CSVFormat var33 = var18.withHeaderComments((java.lang.Object[])var31);
    java.lang.String var34 = var5.format((java.lang.Object[])var31);
    boolean var35 = var5.isQuoteCharacterSet();
    org.apache.commons.csv.CSVParser var36 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false", var5);
    var36.close();
    boolean var38 = var36.isClosed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test476");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    java.lang.String var6 = var1.getNullString();
    org.apache.commons.csv.CSVFormat var8 = var1.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var10 = var8.withIgnoreHeaderCase(false);
    boolean var11 = var10.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test477");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    java.lang.String var6 = var1.getNullString();
    org.apache.commons.csv.CSVFormat var8 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var8.withAllowMissingColumnNames(true);
    java.lang.String[] var11 = var8.getHeader();
    org.apache.commons.csv.CSVFormat var13 = var8.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var19 = var17.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var21 = var19.withAllowMissingColumnNames(true);
    boolean var22 = var19.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var24.withAllowMissingColumnNames(true);
    java.lang.Object[] var28 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var29 = var26.withHeaderComments(var28);
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var32 = var29.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var34 = var32.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var36 = var34.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var38 = var36.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var42 = var40.withAllowMissingColumnNames(true);
    java.lang.Object[] var44 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var45 = var42.withHeaderComments(var44);
    org.apache.commons.csv.CSVFormat var47 = var45.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var49 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var51 = var49.withAllowMissingColumnNames(true);
    java.lang.Object[] var53 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var54 = var51.withHeaderComments(var53);
    org.apache.commons.csv.CSVFormat var56 = var54.withSkipHeaderRecord(false);
    java.lang.Character var57 = var54.getCommentMarker();
    java.lang.String[] var59 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var60 = var54.withHeader(var59);
    org.apache.commons.csv.CSVFormat var62 = var54.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var64 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var66 = var64.withAllowMissingColumnNames(true);
    java.lang.Object[] var68 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var69 = var66.withHeaderComments(var68);
    org.apache.commons.csv.CSVFormat var71 = var69.withSkipHeaderRecord(false);
    java.lang.Character var72 = var69.getCommentMarker();
    java.lang.String[] var74 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var75 = var69.withHeader(var74);
    org.apache.commons.csv.CSVFormat var76 = var62.withHeader(var74);
    java.lang.String var77 = var45.format((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var78 = var36.withHeaderComments((java.lang.Object[])var74);
    java.lang.String var79 = var19.format((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var80 = var13.withHeader(var74);
    org.apache.commons.csv.CSVFormat var81 = var1.withHeaderComments((java.lang.Object[])var74);
    org.apache.commons.csv.CSVFormat var82 = var1.withIgnoreSurroundingSpaces();
    boolean var83 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var85 = var1.withCommentMarker(' ');
    boolean var86 = var85.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var88 = var85.withIgnoreHeaderCase(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + ""+ "'", var77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "aa"+ "'", var79.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test478");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    char var9 = var8.getDelimiter();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.Object[] var15 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var16 = var13.withHeaderComments(var15);
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord(false);
    java.lang.Character var19 = var16.getCommentMarker();
    java.lang.String[] var21 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var22 = var16.withHeader(var21);
    org.apache.commons.csv.CSVFormat var24 = var22.withQuote('a');
    org.apache.commons.csv.CSVFormat var26 = var24.withNullString("Delimiter=<4> QuoteChar=<a> CommentStart=< > EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]");
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var30 = var28.withAllowMissingColumnNames(true);
    java.lang.Object[] var32 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var33 = var30.withHeaderComments(var32);
    org.apache.commons.csv.CSVFormat var34 = var33.withAllowMissingColumnNames();
    boolean var35 = var34.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var37 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var39 = var37.withAllowMissingColumnNames(true);
    java.lang.Object[] var41 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var42 = var39.withHeaderComments(var41);
    org.apache.commons.csv.CSVFormat var44 = var42.withSkipHeaderRecord(false);
    java.lang.Character var45 = var42.getCommentMarker();
    java.lang.String[] var47 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var48 = var42.withHeader(var47);
    java.lang.String var49 = var48.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var53 = var51.withAllowMissingColumnNames(true);
    java.lang.Object[] var55 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var56 = var53.withHeaderComments(var55);
    org.apache.commons.csv.CSVFormat var58 = var56.withSkipHeaderRecord(false);
    java.lang.Character var59 = var56.getCommentMarker();
    java.lang.String[] var61 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var62 = var56.withHeader(var61);
    org.apache.commons.csv.CSVFormat var63 = var48.withHeaderComments((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var65 = var63.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var67 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var68 = var67.withSkipHeaderRecord();
    java.lang.String[] var70 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var71 = var67.withHeader(var70);
    org.apache.commons.csv.CSVFormat var72 = var65.withHeaderComments((java.lang.Object[])var70);
    org.apache.commons.csv.CSVFormat var73 = var34.withHeaderComments((java.lang.Object[])var70);
    org.apache.commons.csv.CSVFormat var74 = var26.withHeaderComments((java.lang.Object[])var70);
    org.apache.commons.csv.CSVFormat var75 = var8.withHeaderComments((java.lang.Object[])var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test479");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote('a');
    org.apache.commons.csv.CSVFormat var15 = var14.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var17 = var14.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var19 = var17.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var21 = var17.withQuote('#');
    boolean var22 = var17.isQuoteCharacterSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test480");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var28 = var14.withHeader(var26);
    boolean var29 = var28.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var31 = var28.withEscape((java.lang.Character)'#');
    java.lang.String var32 = var28.toString();
    java.lang.Character var33 = var28.getCommentMarker();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var35 = var28.withCommentMarker((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0] Header:[]"+ "'", var32.equals("Delimiter=<4> SkipHeaderRecord:false HeaderComments:[0] Header:[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test481");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    boolean var28 = var27.isCommentMarkerSet();
    boolean var29 = var27.isCommentMarkerSet();
    java.lang.String[] var30 = var27.getHeader();
    org.apache.commons.csv.CSVFormat var31 = var27.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.QuoteMode var32 = var27.getQuoteMode();
    java.lang.String[] var33 = var27.getHeader();
    org.apache.commons.csv.CSVFormat var35 = var27.withAllowMissingColumnNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test482");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVParser var5 = org.apache.commons.csv.CSVParser.parse("", var4);
    var5.close();
    var5.close();
    java.util.Iterator var8 = var5.iterator();
    var5.close();
    java.util.Iterator var10 = var5.iterator();
    java.util.Map var11 = var5.getHeaderMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test483");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    java.lang.String var5 = var4.getNullString();
    org.apache.commons.csv.CSVFormat var7 = var4.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var10 = var9.withSkipHeaderRecord();
    java.lang.String[] var12 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var13 = var9.withHeader(var12);
    java.lang.String var14 = var4.format((java.lang.Object[])var12);
    boolean var15 = var4.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test484");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    boolean var13 = var6.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var14 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var16 = var6.withRecordSeparator('#');
    java.lang.Character var17 = var6.getQuoteCharacter();
    org.apache.commons.csv.CSVFormat var19 = var6.withEscape((java.lang.Character)' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test485");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var11.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var14 = var11.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var16 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var18 = var16.withAllowMissingColumnNames(true);
    java.lang.Object[] var20 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var21 = var18.withHeaderComments(var20);
    org.apache.commons.csv.CSVFormat var23 = var21.withSkipHeaderRecord(false);
    java.lang.Character var24 = var21.getCommentMarker();
    java.lang.String[] var26 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var27 = var21.withHeader(var26);
    org.apache.commons.csv.CSVFormat var29 = var21.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var31 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var33 = var31.withAllowMissingColumnNames(true);
    java.lang.Object[] var35 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var36 = var33.withHeaderComments(var35);
    org.apache.commons.csv.CSVFormat var38 = var36.withSkipHeaderRecord(false);
    java.lang.Character var39 = var36.getCommentMarker();
    java.lang.String[] var41 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var42 = var36.withHeader(var41);
    org.apache.commons.csv.CSVFormat var43 = var29.withHeader(var41);
    org.apache.commons.csv.CSVFormat var44 = var14.withHeader(var41);
    org.apache.commons.csv.CSVFormat var46 = var14.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var47 = var46.withAllowMissingColumnNames();
    boolean var48 = var47.isNullStringSet();
    org.apache.commons.csv.CSVFormat var50 = var47.withSkipHeaderRecord(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test486");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(true);
    boolean var8 = var5.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    java.lang.Object[] var14 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments(var14);
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var18 = var15.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var20 = var18.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var22 = var20.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var24 = var22.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var26 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var28 = var26.withAllowMissingColumnNames(true);
    java.lang.Object[] var30 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var31 = var28.withHeaderComments(var30);
    org.apache.commons.csv.CSVFormat var33 = var31.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var35 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var37 = var35.withAllowMissingColumnNames(true);
    java.lang.Object[] var39 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var40 = var37.withHeaderComments(var39);
    org.apache.commons.csv.CSVFormat var42 = var40.withSkipHeaderRecord(false);
    java.lang.Character var43 = var40.getCommentMarker();
    java.lang.String[] var45 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var46 = var40.withHeader(var45);
    org.apache.commons.csv.CSVFormat var48 = var40.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var50 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var52 = var50.withAllowMissingColumnNames(true);
    java.lang.Object[] var54 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var55 = var52.withHeaderComments(var54);
    org.apache.commons.csv.CSVFormat var57 = var55.withSkipHeaderRecord(false);
    java.lang.Character var58 = var55.getCommentMarker();
    java.lang.String[] var60 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var61 = var55.withHeader(var60);
    org.apache.commons.csv.CSVFormat var62 = var48.withHeader(var60);
    java.lang.String var63 = var31.format((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var64 = var22.withHeaderComments((java.lang.Object[])var60);
    java.lang.String var65 = var5.format((java.lang.Object[])var60);
    org.apache.commons.csv.CSVFormat var67 = var5.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var68 = var67.withSkipHeaderRecord();
    java.lang.String[] var69 = var68.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + ""+ "'", var63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "aa"+ "'", var65.equals("aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test487");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var6.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var16 = var14.withEscape((java.lang.Character)'#');
    java.lang.String[] var17 = var16.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test488");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var2 = var1.isNullStringSet();
    org.apache.commons.csv.CSVFormat var4 = var1.withCommentMarker((java.lang.Character)'a');
    char var5 = var4.getDelimiter();
    org.apache.commons.csv.CSVFormat var7 = var4.withQuote((java.lang.Character)'#');
    java.lang.String var8 = var7.toString();
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var11 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var13 = var11.withAllowMissingColumnNames(true);
    java.lang.Object[] var15 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var16 = var13.withHeaderComments(var15);
    org.apache.commons.csv.CSVFormat var18 = var16.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var19 = var16.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var21 = var19.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var23 = var21.withCommentMarker((java.lang.Character)' ');
    org.apache.commons.csv.CSVFormat var25 = var23.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var27 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var29 = var27.withAllowMissingColumnNames(true);
    java.lang.Object[] var31 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var32 = var29.withHeaderComments(var31);
    org.apache.commons.csv.CSVFormat var34 = var32.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var36 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(true);
    java.lang.Object[] var40 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var41 = var38.withHeaderComments(var40);
    org.apache.commons.csv.CSVFormat var43 = var41.withSkipHeaderRecord(false);
    java.lang.Character var44 = var41.getCommentMarker();
    java.lang.String[] var46 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var47 = var41.withHeader(var46);
    org.apache.commons.csv.CSVFormat var49 = var41.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var51 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var53 = var51.withAllowMissingColumnNames(true);
    java.lang.Object[] var55 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var56 = var53.withHeaderComments(var55);
    org.apache.commons.csv.CSVFormat var58 = var56.withSkipHeaderRecord(false);
    java.lang.Character var59 = var56.getCommentMarker();
    java.lang.String[] var61 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var62 = var56.withHeader(var61);
    org.apache.commons.csv.CSVFormat var63 = var49.withHeader(var61);
    java.lang.String var64 = var32.format((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var65 = var23.withHeaderComments((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var66 = var9.withHeaderComments((java.lang.Object[])var61);
    org.apache.commons.csv.CSVFormat var68 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var70 = var68.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var71 = var68.withAllowMissingColumnNames();
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    org.apache.commons.csv.CSVFormat var73 = var66.withHeaderComments(var72);
    boolean var74 = var66.getIgnoreSurroundingSpaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Delimiter=<4> QuoteChar=<#> CommentStart=<a> SkipHeaderRecord:false"+ "'", var8.equals("Delimiter=<4> QuoteChar=<#> CommentStart=<a> SkipHeaderRecord:false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + ""+ "'", var64.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test489");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    java.lang.String var13 = var12.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var15 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var17 = var15.withAllowMissingColumnNames(true);
    java.lang.Object[] var19 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var20 = var17.withHeaderComments(var19);
    org.apache.commons.csv.CSVFormat var22 = var20.withSkipHeaderRecord(false);
    java.lang.Character var23 = var20.getCommentMarker();
    java.lang.String[] var25 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var26 = var20.withHeader(var25);
    org.apache.commons.csv.CSVFormat var27 = var12.withHeaderComments((java.lang.Object[])var25);
    boolean var28 = var27.isCommentMarkerSet();
    org.apache.commons.csv.CSVFormat var30 = var27.withNullString("");
    org.apache.commons.csv.CSVFormat var32 = var27.withQuote(' ');
    org.apache.commons.csv.CSVFormat var34 = var27.withIgnoreEmptyLines(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test490");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var5 = var3.withRecordSeparator('a');
    java.lang.String var6 = var3.getNullString();
    org.apache.commons.csv.CSVFormat var8 = var3.withRecordSeparator('#');
    org.apache.commons.csv.CSVFormat var10 = var8.withRecordSeparator("aa");
    boolean var11 = var10.getAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var13 = var10.withIgnoreEmptyLines(true);
    org.apache.commons.csv.CSVFormat var15 = var10.withCommentMarker((java.lang.Character)'#');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.CSVFormat var17 = var10.withCommentMarker((java.lang.Character)'4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test491");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.csv.QuoteMode var1 = org.apache.commons.csv.QuoteMode.valueOf("Delimiter=<4> EmptyLines:ignored SkipHeaderRecord:false HeaderComments:[0]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test492");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var9 = var6.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var11 = var9.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var13 = var9.withQuote('a');
    org.apache.commons.csv.CSVFormat var15 = var9.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var17 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var19 = var17.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var21 = var19.withEscape(' ');
    org.apache.commons.csv.CSVFormat var23 = var19.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var25 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var27 = var25.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var28 = var25.withAllowMissingColumnNames();
    org.apache.commons.csv.CSVFormat var30 = var28.withEscape('#');
    org.apache.commons.csv.CSVFormat var32 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var34 = var32.withAllowMissingColumnNames(true);
    java.lang.Object[] var36 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var37 = var34.withHeaderComments(var36);
    org.apache.commons.csv.CSVFormat var39 = var37.withSkipHeaderRecord(false);
    java.lang.Character var40 = var37.getCommentMarker();
    java.lang.String[] var42 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var43 = var37.withHeader(var42);
    org.apache.commons.csv.CSVFormat var45 = var37.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var47 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var49 = var47.withAllowMissingColumnNames(true);
    java.lang.Object[] var51 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var52 = var49.withHeaderComments(var51);
    org.apache.commons.csv.CSVFormat var54 = var52.withSkipHeaderRecord(false);
    java.lang.Character var55 = var52.getCommentMarker();
    java.lang.String[] var57 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var58 = var52.withHeader(var57);
    org.apache.commons.csv.CSVFormat var59 = var45.withHeader(var57);
    java.lang.String var60 = var28.format((java.lang.Object[])var57);
    org.apache.commons.csv.CSVFormat var61 = var19.withHeader(var57);
    org.apache.commons.csv.CSVFormat var62 = var15.withHeader(var57);
    org.apache.commons.csv.CSVFormat var63 = var62.withSkipHeaderRecord();
    boolean var64 = var63.isNullStringSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ""+ "'", var60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test493");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var5.getHeaderComments();
    java.lang.String var9 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var5.withQuote(' ');
    boolean var12 = var11.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var11.withDelimiter('4');
    boolean var15 = var11.getIgnoreSurroundingSpaces();
    java.lang.String var16 = var11.getRecordSeparator();
    boolean var17 = var11.getIgnoreHeaderCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test494");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var8 = var6.withSkipHeaderRecord(false);
    java.lang.Character var9 = var6.getCommentMarker();
    java.lang.String[] var11 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var12 = var6.withHeader(var11);
    org.apache.commons.csv.CSVFormat var14 = var12.withQuote('a');
    org.apache.commons.csv.CSVFormat var15 = var14.withIgnoreEmptyLines();
    boolean var16 = var14.isEscapeCharacterSet();
    org.apache.commons.csv.CSVFormat var18 = var14.withEscape('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test495");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var1.withEscape('a');
    org.apache.commons.csv.CSVFormat var9 = var1.withNullString("");
    boolean var10 = var1.isNullStringSet();
    java.lang.Character var11 = var1.getEscapeCharacter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test496");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withIgnoreEmptyLines(false);
    org.apache.commons.csv.CSVFormat var7 = var1.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var9 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var11 = var9.withCommentMarker('#');
    org.apache.commons.csv.CSVFormat var13 = var11.withRecordSeparator('a');
    java.lang.String var14 = var11.getNullString();
    org.apache.commons.csv.CSVFormat var16 = var11.withCommentMarker((java.lang.Character)'a');
    boolean var17 = var7.equals((java.lang.Object)var16);
    org.apache.commons.csv.CSVFormat var19 = var16.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var20 = var16.withIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var21 = var16.withIgnoreEmptyLines();
    java.lang.String var22 = var16.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var24 = var16.withRecordSeparator("Delimiter=<4> Escape=<#> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var26 = var24.withCommentMarker(' ');
    org.apache.commons.csv.CSVFormat var28 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var30 = var28.withAllowMissingColumnNames(true);
    java.lang.Object[] var32 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var33 = var30.withHeaderComments(var32);
    org.apache.commons.csv.CSVFormat var35 = var33.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var36 = var33.withIgnoreEmptyLines();
    boolean var37 = var33.isQuoteCharacterSet();
    boolean var38 = var33.isNullStringSet();
    org.apache.commons.csv.CSVFormat var39 = var33.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var41 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var43 = var41.withCommentMarker((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var45 = var41.withCommentMarker((java.lang.Character)'#');
    org.apache.commons.csv.CSVFormat var47 = var45.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var49 = var47.withSkipHeaderRecord(true);
    org.apache.commons.csv.CSVFormat var51 = var49.withNullString("Delimiter=<4> CommentStart=<#> RecordSeparator=<hi!> SkipHeaderRecord:false");
    boolean var52 = var51.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var54 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var56 = var54.withAllowMissingColumnNames(true);
    java.lang.Object[] var58 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var59 = var56.withHeaderComments(var58);
    org.apache.commons.csv.CSVFormat var61 = var59.withSkipHeaderRecord(false);
    java.lang.Character var62 = var59.getCommentMarker();
    java.lang.String[] var64 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var65 = var59.withHeader(var64);
    boolean var66 = var59.getIgnoreSurroundingSpaces();
    java.lang.Character var67 = var59.getCommentMarker();
    org.apache.commons.csv.QuoteMode var68 = var59.getQuoteMode();
    boolean var69 = var59.isNullStringSet();
    org.apache.commons.csv.CSVFormat var71 = var59.withEscape('#');
    org.apache.commons.csv.CSVFormat var73 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var74 = var73.withSkipHeaderRecord();
    java.lang.String[] var76 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var77 = var73.withHeader(var76);
    org.apache.commons.csv.CSVFormat var78 = var59.withHeader(var76);
    org.apache.commons.csv.CSVFormat var79 = var51.withHeader(var76);
    java.lang.String var80 = var39.format((java.lang.Object[])var76);
    org.apache.commons.csv.CSVFormat var81 = var26.withHeader(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + ""+ "'", var80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test497");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    org.apache.commons.csv.CSVFormat var5 = var1.withRecordSeparator("hi!");
    org.apache.commons.csv.CSVFormat var7 = var5.withAllowMissingColumnNames(false);
    java.lang.String[] var8 = var5.getHeaderComments();
    java.lang.String var9 = var5.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var11 = var5.withQuote(' ');
    boolean var12 = var11.getSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var14 = var11.withDelimiter('4');
    boolean var15 = var11.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var17 = var11.withNullString("Delimiter=<4> RecordSeparator=<hi!> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVFormat var18 = var17.withSkipHeaderRecord();
    org.apache.commons.csv.CSVFormat var20 = var17.withCommentMarker((java.lang.Character)'#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test498");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    boolean var3 = var2.isNullStringSet();
    org.apache.commons.csv.CSVFormat var5 = var2.withNullString("");
    org.apache.commons.csv.CSVFormat var7 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var9 = var7.withAllowMissingColumnNames(true);
    java.lang.Object[] var11 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var12 = var9.withHeaderComments(var11);
    org.apache.commons.csv.CSVFormat var14 = var12.withSkipHeaderRecord(false);
    java.lang.Character var15 = var12.getCommentMarker();
    java.lang.String[] var17 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var18 = var12.withHeader(var17);
    java.lang.String var19 = var18.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var21 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var23 = var21.withAllowMissingColumnNames(true);
    java.lang.Object[] var25 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var26 = var23.withHeaderComments(var25);
    org.apache.commons.csv.CSVFormat var28 = var26.withSkipHeaderRecord(false);
    java.lang.Character var29 = var26.getCommentMarker();
    java.lang.String[] var31 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var32 = var26.withHeader(var31);
    org.apache.commons.csv.CSVFormat var33 = var18.withHeaderComments((java.lang.Object[])var31);
    java.lang.String var34 = var5.format((java.lang.Object[])var31);
    boolean var35 = var5.isQuoteCharacterSet();
    org.apache.commons.csv.CSVParser var36 = org.apache.commons.csv.CSVParser.parse("Delimiter=<4> SkipHeaderRecord:false", var5);
    org.apache.commons.csv.CSVFormat var37 = var5.withIgnoreSurroundingSpaces();
    java.lang.String var38 = var37.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Delimiter=<4> NullString=<> SurroundingSpaces:ignored SkipHeaderRecord:false"+ "'", var38.equals("Delimiter=<4> NullString=<> SurroundingSpaces:ignored SkipHeaderRecord:false"));

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test499");


    org.apache.commons.csv.CSVFormat var2 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var4 = var2.withAllowMissingColumnNames(true);
    java.lang.Object[] var6 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var7 = var4.withHeaderComments(var6);
    org.apache.commons.csv.CSVFormat var9 = var7.withSkipHeaderRecord(false);
    org.apache.commons.csv.CSVFormat var10 = var7.withIgnoreEmptyLines();
    org.apache.commons.csv.CSVFormat var12 = var10.withQuote((java.lang.Character)'a');
    org.apache.commons.csv.CSVFormat var14 = var10.withQuote('a');
    org.apache.commons.csv.CSVFormat var16 = var10.withAllowMissingColumnNames(false);
    boolean var17 = var10.isQuoteCharacterSet();
    boolean var18 = var10.getIgnoreSurroundingSpaces();
    org.apache.commons.csv.CSVFormat var20 = var10.withIgnoreHeaderCase(false);
    org.apache.commons.csv.CSVFormat var22 = var20.withRecordSeparator("Delimiter=<4> QuoteChar=<a> CommentStart=<#> RecordSeparator=<> SkipHeaderRecord:false");
    org.apache.commons.csv.CSVParser var23 = org.apache.commons.csv.CSVParser.parse("", var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test500");


    org.apache.commons.csv.CSVFormat var1 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var3 = var1.withAllowMissingColumnNames(true);
    java.lang.Object[] var5 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var6 = var3.withHeaderComments(var5);
    org.apache.commons.csv.CSVFormat var7 = var6.withAllowMissingColumnNames();
    boolean var8 = var7.getIgnoreHeaderCase();
    org.apache.commons.csv.CSVFormat var10 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var12 = var10.withAllowMissingColumnNames(true);
    java.lang.Object[] var14 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var15 = var12.withHeaderComments(var14);
    org.apache.commons.csv.CSVFormat var17 = var15.withSkipHeaderRecord(false);
    java.lang.Character var18 = var15.getCommentMarker();
    java.lang.String[] var20 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var21 = var15.withHeader(var20);
    java.lang.String var22 = var21.getRecordSeparator();
    org.apache.commons.csv.CSVFormat var24 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var26 = var24.withAllowMissingColumnNames(true);
    java.lang.Object[] var28 = new java.lang.Object[] { 0L};
    org.apache.commons.csv.CSVFormat var29 = var26.withHeaderComments(var28);
    org.apache.commons.csv.CSVFormat var31 = var29.withSkipHeaderRecord(false);
    java.lang.Character var32 = var29.getCommentMarker();
    java.lang.String[] var34 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var35 = var29.withHeader(var34);
    org.apache.commons.csv.CSVFormat var36 = var21.withHeaderComments((java.lang.Object[])var34);
    org.apache.commons.csv.CSVFormat var38 = var36.withAllowMissingColumnNames(false);
    org.apache.commons.csv.CSVFormat var40 = org.apache.commons.csv.CSVFormat.newFormat('4');
    org.apache.commons.csv.CSVFormat var41 = var40.withSkipHeaderRecord();
    java.lang.String[] var43 = new java.lang.String[] { ""};
    org.apache.commons.csv.CSVFormat var44 = var40.withHeader(var43);
    org.apache.commons.csv.CSVFormat var45 = var38.withHeaderComments((java.lang.Object[])var43);
    org.apache.commons.csv.CSVFormat var46 = var7.withHeaderComments((java.lang.Object[])var43);
    org.apache.commons.csv.CSVFormat var48 = var46.withNullString("Delimiter=<4> NullString=<hi!> SkipHeaderRecord:false");
    java.lang.String[] var49 = var46.getHeaderComments();
    java.lang.String[] var50 = var46.getHeaderComments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

}
